#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
using namespace std;

//unionFind
class unionFind {
private:
	int* p;   //親配列のポインタ
	int* rank;
	int N;   //要素数
public:
	unionFind(int);   //コンストラクタ
	int parent(int);   //親要素を返す
	void unit(int, int);   //2要素をつなぐ
	int operator[](int);   //parentの省略形
	~unionFind();
	int size();   //要素数を返す
};

unionFind::unionFind(int n) {
	N = n;
	p = new int[N];
	rank = new int[N];
	for (int i = 0; i < N; i++) {
		p[i] = i;
		rank[i] = 0;
	}
	return;
}

int unionFind::parent(int n) {
	if (n < 0 || n >= N)return -1;
	if (p[n] == n)return n;   //自分が一番上の親
	return p[n] = parent(p[n]);   //つなぎ直しと上にたどる操作
}

int unionFind::operator[](int n) {
	return parent(n);
}

void unionFind::unit(int x, int y) {
	x = parent(x), y = parent(y);
	if (x == y)return;   //根が同じだから何もせずに帰る
	if (rank[x] < rank[y])p[x] = y;
	else {
		p[y] = x;
		if (rank[x] == rank[y])rank[x]++;
	}
	return;
}

unionFind::~unionFind() {
	delete(p);
	delete(rank);
	return;
}

int unionFind::size() {
	return N;
}

int N,M,Q;
typedef pair<int, int> pii;
struct road {
	int u, v;   //0-index
	int year;
};
vector<road> roads;
struct query {
	int q;   //添え字
	int habitat, year;
};
vector<query> Querys;
queue<road> rq;
vector<int> ans;
vector<int> ufcheck;

int main(){
	cin >> N >> M;
	roads.resize(M);
	for (int m = 0; m < M; m++) {
		cin >> roads[m].u >> roads[m].v >> roads[m].year;
		roads[m].u--;
		roads[m].v--;
	}
	sort(roads.begin(), roads.end(), [](road a, road b) {
		return a.year > b.year;
	});
	for (int m = 0; m < M; m++)rq.push(roads[m]);
	cin >> Q;
	Querys.resize(Q);
	for (int q = 0 ; q < Q; q++) {
		Querys[q].q = q;
		cin >> Querys[q].habitat >> Querys[q].year;
		Querys[q].habitat--;
	}
	sort(Querys.begin(), Querys.end(), [](query a, query b) {
		return a.year > b.year;
	});
	ans.resize(Q);
	unionFind UF(N);
	ufcheck.resize(N,1);
	for (int q = 0; q < Q; q++) {
		while (!rq.empty()) {
			if (rq.front().year > Querys[q].year) {
				if (UF.parent(rq.front().u) == UF.parent(rq.front().v)) {
					rq.pop();
					continue;
				}
				int sum = ufcheck[UF.parent(rq.front().u)] + ufcheck[UF.parent(rq.front().v)];
				ufcheck[UF.parent(rq.front().u)] = sum;
				ufcheck[UF.parent(rq.front().v)] = sum;
				UF.unit(rq.front().u, rq.front().v);
				rq.pop();
			}
			else break;
		}
		ans[Querys[q].q] = ufcheck[UF.parent(Querys[q].habitat)];
	}
	for (int q = 0; q < Q; q++) {
		cout << ans[q] << endl;
	}
	return 0;
}
