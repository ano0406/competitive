#include <iostream>
#include <algorithm>
#include <map>
#include <set>
#include <vector>
#include <queue>
#include <math.h>

using namespace std;
typedef pair<int, int> pii;
typedef pair<int, long double> pild;
typedef pair<long double, int> pldi;

void solve();

int main() {
	solve();
	return 0;
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////


//unionFind
class unionFind {
private:
	int* p;   //親配列のポインタ
	int* rank;
	int N;   //要素数
public:
	unionFind(int);   //コンストラクタ
	int parent(int);   //親要素を返す
	void unit(int, int);   //2要素をつなぐ
	int operator[](int);   //parentの省略形
	~unionFind();
	int size();   //要素数を返す
};

unionFind::unionFind(int n) {
	N = n;
	p = new int[N];
	rank = new int[N];
	for (int i = 0; i < N; i++) {
		p[i] = i;
		rank[i] = 0;
	}
	return;
}

int unionFind::parent(int n) {
	if (n < 0 || n >= N)return -1;
	if (p[n] == n)return n;   //自分が一番上の親
	return p[n] = parent(p[n]);   //つなぎ直しと上にたどる操作
}

int unionFind::operator[](int n) {
	return parent(n);
}

void unionFind::unit(int x, int y) {
	x = parent(x), y = parent(y);
	if (x == y)return;   //根が同じだから何もせずに帰る
	if (rank[x] < rank[y])p[x] = y;
	else {
		p[y] = x;
		if (rank[x] == rank[y])rank[x]++;
	}
	return;
}

unionFind::~unionFind() {
	delete(p);
	delete(rank);
	return;
}

int unionFind::size() {
	return N;
}




//重み付きグラフ
//距離の部分をテンプレートに
template<class T>
class wGraph {
public:
	int N;
	vector<multimap<int, T> >* E;
	wGraph(int n) {
		N = n;
		E = new vector<multimap<int,T> >;
		E->resize(N);
	}
	~wGraph() {
		delete E;
	}
	void addEdge(int a, int b, T c) {
		E->at(a).emplace(b,c);
	}
	bool isConnected(int a, int b) {
		return (E->at(a).find(b) != E->at(a).end());
	}
};

//ダイクストラする
//O(ElogV)
template<class T>
T* dijkstra(wGraph<T>* g, int s) {
	T* arr = new T[g->N];
	for (int i = 0; i < g->N; i++) {
		arr[i] = -1;
	}
	typedef pair<T, int> t;
	priority_queue<t, vector<t>, greater<t>> q;
	q.push(t(0,s));
	while (!q.empty()) {
		t e = q.top();
		q.pop();
		if (arr[e.second] != -1 && arr[e.second] <= e.first)continue;
		arr[e.second] = e.first;
		for (auto itr = g->E->at(e.second).begin(); itr != g->E->at(e.second).end(); itr++) {
			q.push(t(e.first + (*itr).second,(*itr).first));
		}
	}
	return arr;
}

wGraph<long int>* G = NULL;
vector<long int> ans;
long int* arr;
void solve() {
	while (true) {
		int N, K;
		cin >> N >> K;
		if (N == 0 && K == 0) {
			for (auto itr = ans.begin(); itr != ans.end(); itr++)cout << *itr << endl;
			delete G;
			return;
		}
		delete G;
		G = new wGraph<long int>(N);
		for (int k = 0; k < K; k++) {
			int a;
			cin >> a;
			if (a == 0) {
				int b;
				cin >> a >> b;
				a--; b--;
				delete arr;
				arr = dijkstra(G,a);
				ans.push_back(arr[b]);
			}
			else {
				int b, c;
				cin >> a >> b >> c;
				a--; b--;
				G->addEdge(a,b,c);
				G->addEdge(b,a,c);
			}
		}
	}
}