#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	ll X;
	cin >> X;
	vector<bool> DP(X + 1, false);
	DP[0] = true;
	for (ll x = 1; x <= X; x++) {
		if (x >= 100)DP[x] = DP[x] | DP[x - 100];
		if (x >= 101)DP[x] = DP[x] | DP[x - 101];
		if (x >= 102)DP[x] = DP[x] | DP[x - 102];
		if (x >= 103)DP[x] = DP[x] | DP[x - 103];
		if (x >= 104)DP[x] = DP[x] | DP[x - 104];
		if (x >= 105)DP[x] = DP[x] | DP[x - 105];
	}
	if (DP[X])cout << 1 << "\n";
	else cout << 0 << "\n";
	return 0;
}
