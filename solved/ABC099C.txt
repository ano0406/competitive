void solve();

int main() {
	solve();
	return 0;
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
#include <iostream>
#include <algorithm>
#include <vector>
#include <set>
#include <queue>
#include <functional>
#include <map>
#include <string>
#include <boost/multiprecision/cpp_int.hpp>
#include <limits.h>

using namespace std;
using namespace boost::multiprecision;

int N;
vector<int> v;
int dp[100001];

void solve() {
	cin >> N;
	v.push_back(1);
	int n = 6;
	while (n <= N) {
		v.push_back(n);
		n *= 6;
	}
	n = 9;
	while (n <= N) {
		v.push_back(n);
		n *= 9;
	}
	dp[0] = 0;
	for (int n = 1; n <= N; n++) {
		dp[n] = N;
		for (int c = 0; c < v.size(); c++) {
			if (n >= v[c])dp[n] = min(dp[n],dp[n-v[c]]+1);
		}
	}
	cout << dp[N] << endl;
	return;
}