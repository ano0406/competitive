#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>
#include <bitset>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

template< typename T >
struct edge {
	ll src, to;
	T cost;

	edge(int to, T cost) : src(-1), to(to), cost(cost) {}

	edge(ll src, ll to, T cost) : src(src), to(to), cost(cost) {}

	edge& operator=(const int& x) {
		to = x;
		return *this;
	}

	operator int() const { return to; }
};

template< typename T >
using Edges = vector< edge< T > >;
template< typename T >
using WeightedGraph = vector< Edges< T > >;
using UnWeightedGraph = vector< vector< int > >;
template< typename T >
using Matrix = vector< vector< T > >;

template< typename T >
vector< T > dijkstra(WeightedGraph< T >& g, int s) {
	const auto INF = numeric_limits< T >::max();
	vector< T > dist(g.size(), INF);

	using Pi = pair< T, int >;
	priority_queue< Pi, vector< Pi >, greater< Pi > > que;
	dist[s] = 0;
	que.emplace(dist[s], s);
	while (!que.empty()) {
		T cost;
		int idx;
		tie(cost, idx) = que.top();
		que.pop();
		if (dist[idx] < cost) continue;
		for (auto& e : g[idx]) {
			auto next_cost = cost + e.cost;
			if (dist[e.to] <= next_cost) continue;
			dist[e.to] = next_cost;
			que.emplace(dist[e.to], e.to);
		}
	}
	return dist;
}

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	ll H, W, X;
	pll start, goal;
	cin >> H >> W >> X;
	cin >> start.second >> start.first;
	start.second--;
	start.first--;
	cin >> goal.second >> goal.first;
	goal.second--;
	goal.first--;
	VVLL MAP;
	MAP.resize(W, VLL(H,0));
	for (ll y = 0; y < H; y++) {
		for (ll x = 0; x < W; x++) {
			cin >> MAP[x][y];
			MAP[x][y]--;
		}
	}
	VLL C(X);
	for (ll x = 0; x < X; x++) {
		cin >> C[x];
	}
	queue<pll> q;
	ll glas = X;   //éüÇ…ìhÇÈêF
	for (ll x = 0; x < W; x++) {
		for (ll y = 0; y < H; y++) {
			if (MAP[x][y] != -1)continue;
			MAP[x][y] = glas;
			q.push(pll(x, y));
			while (!q.empty()) {
				ll cx = q.front().first;
				ll cy = q.front().second;
				q.pop();
				ll vect[4][2] = {
					{1,0},{-1,0},{0,1},{0,-1}
				};
				for (ll v = 0; v < 4; v++) {
					ll nx = cx + vect[v][0];
					ll ny = cy + vect[v][1];
					if (nx < 0 || nx >= W || ny < 0 || ny >= H)continue;
					if (MAP[nx][ny] != -1)continue;
					MAP[nx][ny] = glas;
					q.push(pll(nx, ny));
				}
			}
			glas++;
			C.push_back(0);
		}
	}
	vector<set<ll>> next(C.size());
	for (ll x = 0; x < W; x++) {
		for (ll y = 0; y < H; y++) {
			ll vect[4][2] = {
				{1,0},{-1,0},{0,1},{0,-1}
			};
			for (ll v = 0; v < 4; v++) {
				ll nx = x + vect[v][0];
				ll ny = y + vect[v][1];
				if (nx < 0 || nx >= W || ny < 0 || ny >= H)continue;
				if (MAP[x][y] == MAP[nx][ny])continue;
				next[MAP[x][y]].insert(MAP[nx][ny]);
			}
		}
	}
	WeightedGraph<ll> G(C.size());
	for (ll n = 0; n < C.size(); n++) {
		for (ll p : next[n]) {
			G[n].push_back({ n,p,C[p] });
		}
	}
	ll s = MAP[start.first][start.second];
	ll g = MAP[goal.first][goal.second];
	VLL res = dijkstra(G, s);
	cout << res[g] << "\n";
	return 0;
}