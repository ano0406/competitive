#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
using namespace std;
long long MOD = 1e9 + 7;

//使い勝手・安全性について要修正
class Replacement {
public:
	vector<int> V;
	int N;
	int sgn = 1;
	Replacement(int n) {
		N = n;
		V.resize(N);
		for (n = 0; n < N; n++)V[n] = n;
	}
	Replacement(vector<int> v) {
		N = v.size();
		V = v;
		vector<int> VV(V.size());
		for (int n = 0; n < V.size(); n++)VV[n] = n;
		int counter = 0;
		for (int i = 0; i < VV.size(); i++) {
			if (V[i] != VV[i]) {
				for (int x = i + 1; x < VV.size(); x++) {
					if (VV[x] != V[i])continue;
					VV[x] = VV[i];
					VV[i] = V[i];
					break;
				}
				counter++;
			}
		}
		sgn = (counter % 2 == 1 ? -1 : 1);
	}
	int& operator[](int n) {
		assert(n >= 0 && n < N);
		return V[n];
	}
	void print() {
		cout << "(";
		for (int n = 0; n < N - 1; n++) cout << V[n] << ",";
		cout << V[N - 1] << ")" << endl;
	}
	Replacement inv() {
		Replacement i(N);
		i.sgn = sgn;
		for (int n = 0; n < N; n++)i[V[n]] = n;
		return i;
	}
};

class Replacement2 {
public:
	int N, A, B;
	int sgn = -1;
	Replacement2(int n, int a, int b) {
		N = n;
		assert(a >= 0 && a < N);
		A = min(a, b);
		assert(b >= 0 && b < N);
		B = max(a, b);
	}
	void print() {
		cout << "(" << A << "," << B << ")" << endl;
	}
};

Replacement operator*(Replacement A, Replacement2 B) {   //AにBを食わせる
	assert(A.N == B.N);
	Replacement C(A);
	C[B.A] = C[B.A] ^ C[B.B];
	C[B.B] = C[B.A] ^ C[B.B];
	C[B.A] = C[B.A] ^ C[B.B];
	C.sgn *= -1;
	return C;
}

//A(B)
Replacement operator*(Replacement2& A, Replacement2& B) {
	assert(A.N == B.N);
	Replacement C(A.N);
	C[B.A] = C[B.A] ^ C[B.B];
	C[B.B] = C[B.A] ^ C[B.B];
	C[B.A] = C[B.A] ^ C[B.B];
	C[A.A] = C[A.A] ^ C[A.B];
	C[A.B] = C[A.A] ^ C[A.B];
	C[A.A] = C[A.A] ^ C[A.B];
	return C;
}

template<class T>
class Matrix {
public:
	long long W, H;
	vector<vector<T>> V;
	void print() {
		cout << "[" << endl;
		for (int y = 0; y < H; y++) {
			cout << "[";
			for (int x = 0; x < W; x++)cout << V[y][x] << ",";
			cout << "]" << endl;
		}
		cout << "]" << endl;
	}
	Matrix(int h, int w) {
		W = w, H = h;
		V.resize(H, vector<T>(W, 0));
	}
	Matrix(int n) {
		W = n, H = n;
		V.resize(H, vector<T>(W, 0));
	}
	Matrix(Replacement R) {
		W = R.N; H = R.N;
		V.resize(H, vector<T>(W, 0));
		for (int x = 0; x < W; x++) {
			V[R[x]][x] = 1;
		}
	}
	vector<T>& operator[](int y) {
		return V.at(y);
	}
	template<class T2>
	Matrix operator*=(T2 k) {
		for (int x = 0; x < W; x++) {
			for (int y = 0; y < H; y++)V[x][y] *= k;
		}
		return *this;
	}
	Matrix operator+=(Matrix<T>& A) {
		assert(A.W == W && A.H == H);
		for (int y = 0; y < H; y++) {
			for (int x = 0; x < W; x++)V[x][y] += A[x][y];
		}
		return *this;
	}
	Matrix operator-=(Matrix<T>& A) {
		assert(A.W == W && A.H == H);
		for (int y = 0; y < H; y++) {
			for (int x = 0; x < W; x++)V[y][x] -= A[y][x];
		}
		return *this;
	}
	static Matrix<T> E(int N) {
		Matrix e(N);
		for (int n = 0; n < N; n++)e[n][n] = 1;
		return e;
	}
	T static det(Matrix<T> A, bool fl = false) {
		assert(A.W == A.H);
		Matrix<long double> B(A.W);
		for (int y = 0; y < B.W; y++) {
			for (int x = 0; x < B.W; x++)B[y][x] = A[y][x];
		}
		long double ret = 1;
		for (int i = 0; i < B.W; i++) {
			int idx = -1;
			for (int j = i; j < B.W; j++) {
				if (B[j][i] != 0) {
					idx = j;
					break;
				}
			}
			if (idx == -1) return (0);
			if (i != idx) {
				ret *= -1;
				swap(B[i], B[idx]);
			}
			ret *= B[i][i];
			long double vv = B[i][i];
			for (int j = 0; j < B.W; j++) {
				B[i][j] /= vv;
			}
			for (int j = i + 1; j < B.W; j++) {
				long double a = B[j][i];
				for (int k = 0; k < B.W; k++) {
					B[j][k] -= B[i][k] * a;
				}
			}
			if (fl)B.print();
		}
		return round(ret);
	}

};

template<class T>
Matrix<T> operator*(Matrix<T> A, Matrix<T> B) {
	assert(A.W == B.H);
	Matrix<T> C(A.H, B.W);
	for (int x = 0; x < C.W; x++) {
		for (int y = 0; y < C.H; y++) {
			for (int k = 0; k < A.W; k++)
				C[y][x] += A[y][k] * B[k][x];
		}
	}
	return C;
}
Matrix<int> operator%(Matrix<int>& A, int mod) {
	assert(mod >= 1);
	Matrix<int> C(A);
	for (int x = 0; x < A.W; x++) {
		for (int y = 0; y < A.H; y++)C[x][y] %= mod;
	}
	return C;
}
Matrix<long long> operator%(Matrix<long long>& A, long long mod) {
	assert(mod >= 1);
	Matrix<long long> C(A);
	for (int x = 0; x < A.W; x++) {
		for (int y = 0; y < A.H; y++)C[x][y] %= mod;
	}
	return C;
}

template<class T>
Matrix<T> operator+(Matrix<T>& A, Matrix<T>& B) {
	assert(A.W == B.W && A.H == B.H);
	Matrix<T> C(A);
	C += B;
	return C;
}

template<class T>
Matrix<T> operator-(Matrix<T>& A, Matrix<T>& B) {
	assert(A.W == B.W && A.H == B.H);
	Matrix<T> C(A);
	C -= B;
	return C;
}

//A:分解する行列
//L,U:分解後の行列(2つ併せて格納) 一応Uの対角成分が1
//R:右から掛ける、置換の行列
//不可能(おそらく非正則と同値)ならばfalseを返す
template<class T>
bool LUdecomposition(Matrix<T>& A, Matrix<T>& L, Matrix<T>& U, Replacement& R) {
	int N = A.W;
	U = A;
	L = Matrix<T>::E(A.W);
	for (int q = 0; q < N - 1; q++) {
		int ix = q;
		while (ix < N) {
			if (U[q][ix] != 0)break;
			ix++;
		}
		if (ix == N)return false;
		if (ix != q) {
			for (int y = 0; y < N; y++) {
				T t = U[y][q];
				U[y][q] = U[y][ix];
				U[y][ix] = t;
			}
			R = R * Replacement2(N, q, ix);
		}
		for (int y = q; y < N; y++)L[y][q] = U[y][q];
		for (int x = q; x < N; x++)U[q][x] /= L[q][q];
		for (int y = q + 1; y < N; y++) {
			for (int x = q; x < N; x++) {
				U[y][x] -= L[y][q] * U[q][x];
			}
		}
	}
	L[N - 1][N - 1] = U[N - 1][N - 1];
	U[N - 1][N - 1] = 1;
	return true;
}

//LUx = Bなる方程式を解く
//(LUx = L(Ux) = Ly = B ---> Ux = y)
template<class T>
Matrix<T> solveLUEquation(Matrix<T>& L, Matrix<T>& U, Matrix<T>& B) {
	int N = L.W;
	//Ly = B
	Matrix<T> Y(N, 1);
	Y[0][0] = B[0][0] / L[0][0];
	for (int i = 1; i < N; i++) {
		T temp = B[i][0];
		for (int j = 0; j < i; j++)temp -= L[i][j] * Y[j][0];
		Y[i][0] = temp / L[i][i];
	}
	//Ux = y
	Matrix<T> X(N, 1);
	X[N - 1][0] = Y[N - 1][0];
	for (int j = N - 2; j >= 0; j--) {
		T temp = Y[j][0];
		for (int t = j + 1; t < N; t++)temp -= U[j][t] * X[t][0];
		X[j][0] = temp;
	}
	return X;
}

template<class T>
Matrix<T> InverseMatrix(Matrix<T>& L, Matrix<T>& U, Replacement& R) {
	//R^-1
	Matrix<T> RR = Matrix<T>(R.inv());
	int N = U.H;
	//U^-1
	Matrix<T> UU(N);
	for (int j = 0; j < N; j++) {
		for (int i = j; i >= 0; i--) {
			UU[i][j] = (i == j ? 1 : 0);
			for (int t = i + 1; t <= j; t++)UU[i][j] -= U[i][t] * UU[t][j];
		}
	}
	//L^-1
	Matrix<T> LL(N);
	for (int j = 0; j < N; j++) {
		for (int i = j; i < N; i++) {
			if (i == j)LL[i][j] = 1;
			for (int t = j; t < i; t++)LL[i][j] -= L[i][t] * LL[t][j];
			LL[i][j] /= L[i][i];
		}
	}
	LL = UU * LL;
	LL = Matrix<T>(R.inv()) * LL;
	return LL;
}

template<class T>
Matrix<T> InverseMatrix(Matrix<T>& A) {
	int N = A.H;
	Matrix<T> U(N), L(N);
	Replacement R(N);
	if (!LUdecomposition(A, L, U, R))return A;
	return InverseMatrix(L, U, R);
}

template<class T>
Matrix<T> mypow(Matrix<T> base, long long p, long long mod = 1e9 + 7) {
	if (p == 0)return Matrix<T>::E(base.H);
	else if (p == 1)return base;
	Matrix<T> ans = mypow(base, p/2, mod);
	ans = ans*ans;
	ans = ans % mod;
	if (p & 1) {
		ans = ans*base;
		ans = ans%mod;
	}
	return ans;
}

long long N,K;
int main() {
	cin >> N >> K;
	Matrix<long long> mat(N);
	for (int y = 0; y < N; y++) {
		for (int x = 0; x < N; x++) {
			cin >> mat[x][y];
		}
	}
	mat = mypow(mat, K,MOD);
	long long ans = 0;
	for (int x = 0; x < N; x++) {
		for (int y = 0; y < N; y++) {
			ans = (ans + mat[x][y]) % MOD;
		}
	}
	cout << ans << endl;
	return 0;
}