#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>

using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	ll N, K;
	cin >> N >> K;
	vector<pll> V;
	V.reserve(N + 2);
	V.push_back(pll(0, 0));
	for (ll n = 0; n < N; n++) {
		ll a;
		cin >> a;
		V.push_back(pll(a-1, n + 1));
	}
	for (ll n = 1; n <= N; n++) {
		V[n].first += V[n - 1].first;
		V[n].first %= K;
	}
	sort(V.begin(), V.end(), [](pll a, pll b) {
		if (a.first != b.first)return a.first < b.first;
		else return a.second < b.second;
	});
	V.push_back(pll(K, 0));
	ll ans = 0;
	deque<ll> deq;
	deq.push_back(0);
	for (ll n = 1; n <= N + 1; n++) {
		if (V[n].first == V[n - 1].first) {
			while (!deq.empty()) {
				if (deq.front() <= V[n].second - K)deq.pop_front();
				else break;
			}
			ans += (ll)deq.size();
			deq.push_back(V[n].second);
		}
		else {
			deq.clear();
			deq.push_back(V[n].second);
		}
	}
	cout << ans << "\n";
	return 0;
}
