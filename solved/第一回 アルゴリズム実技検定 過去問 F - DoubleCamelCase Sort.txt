#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	string S;
	cin >> S;
	vector<string> str;
	while (S.size() > 0) {
		for (ll n = 1; n < S.size(); n++) {
			if (S[n] >= 'A' && S[n] <= 'Z') {
				str.push_back(S.substr(0, n + 1));
				S = S.substr(n + 1);
				break;
			}
		}
	}
	for (string &s : str) {
		s[0] -= 'A';
		s[0] += 'a';
		s.back() -= 'A';
		s.back() += 'a';
	}
	sort(str.begin(), str.end(), [](string a, string b) {
		for (ll n = 0; n < min(a.size(), b.size()); n++) {
			if (a[n] != b[n])return a[n] < b[n];
		}
		return a.size() < b.size();
	});
	for (string &s : str) {
		s[0] -= 'a';
		s[0] += 'A';
		s.back() -= 'a';
		s.back() += 'A';
		cout << s;
	}
	cout << "\n";
	return 0;
}
