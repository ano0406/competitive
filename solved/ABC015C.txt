#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>
#include <bitset>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	ll N, K;
	cin >> N >> K;
	VVLL A;
	A.resize(N, VLL(K));
	for (ll n = 0; n < N; n++) {
		for (ll k = 0; k < K; k++) {
			cin >> A[n][k];
		}
	}
	queue<pll> q;   //éüå©ÇÈÇ‡ÇÃÅAç°ÇÃíl
	for (ll k = 0; k < K; k++) {
		q.push(pll(1, A[0][k]));
	}
	while (!q.empty()) {
		pll c = q.front();
		q.pop();
		if (c.first == N) {
			if (c.second == 0) {
				cout << "Found\n";
				return 0;
			}
			else continue;
		}
		for (ll k = 0; k < K; k++) {
			pll next = pll(c.first + 1, c.second ^ A[c.first][k]);
			q.push(next);
		}
	}
	cout << "Nothing\n";
	return 0;
}
