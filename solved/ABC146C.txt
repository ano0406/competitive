#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

ll A, B, X;

bool judge(ll n) {
	ll d = 0;
	ll co = n;
	while (co > 0) {
		co /= 10;
		d++;
	}
	return X >= A * n + B * d;
}

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	cin >> A >> B >> X;
	ll s = 0, e = 1e9+1;
	while (e - s > 1) {
		ll m = (e + s) / 2;
		if (judge(m))s = m;
		else e = m;
	}
	cout << s << "\n";
	return 0;
}