#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>
#include <bitset>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

//ägí£ägí£EuclidÇÃå›èúñ@Ç…ÇÊÇÈ(äKèÊ)ãtå≥ÇÃãÅÇﬂï˚
//O(N)
void stairs(long long N, vector<long long>& st, long long mod = 1e9 + 7) {
	st.resize(N + 1, 1);
	for (long long n = 2; n <= N; n++) {
		st[n] = (st[n - 1] * n) % mod;
	}
}

ll stair(ll N, ll mod = 1e9 + 7) {
	ll ans = 1;
	for (ll n = 2; n <= N; n++)ans = (ans * n) % mod;
	return ans;
}

void modinvs(long long N, vector<long long>& inv, vector<long long>& sinv, long long mod = 1e9 + 7) {
	inv.resize(N + 1);
	sinv.resize(N + 1);
	inv[1] = 1;
	sinv[0] = 1;
	sinv[1] = 1;
	for (int n = 2; n <= N; n++) {
		inv[n] = mod - (inv[mod % n] * (mod / n)) % mod;
		sinv[n] = (sinv[n - 1] * inv[n]) % mod;
	}
}

//(n^(-1),(n!)^(-1))
pll modinvs(ll N, ll mod = 1e9 + 7) {
	vector<ll> inv(N + 1);
	inv[1] = 1;
	ll sinv = 1;
	for (int n = 2; n <= N; n++) {
		inv[n] = mod - (inv[mod % n] * (mod / n)) % mod;
		sinv = (sinv * inv[n]) % mod;
	}
	return pll(inv[N], sinv);
}

long long Comb(long long n, long long k, vector<long long>& st, vector<long long>& sinv, long long mod = 1e9 + 7) {
	long long ans = st[n];
	ans = (ans * sinv[n - k]) % mod;
	ans = (ans * sinv[k]) % mod;
	return ans;
}

ll Comb(ll N, ll K, ll mod = 1e9 + 7) {
	if (K == 0 || K == N)return 1;
	ll ans = stair(N, mod);
	ans = (ans * modinvs(N - K).second) % mod;
	ans = (ans * modinvs(K).second) % mod;
	return ans;
}

VLL st, inv, sinv;

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	ll N, M;
	cin >> N >> M;
	stairs(N + M, st);
	modinvs(N + M, inv, sinv);
	ll whole = (st[N + M - 2] * sinv[N - 1]) % MOD;
	whole = (whole * sinv[M - 1]) % MOD;
	ll ans = 0;
	for (ll p = 0; p <= N; p++) {
		if ((N - p) & 1)continue;
		ll q = (N - p) / 2;
		if (q < 0)continue;
		if (M - p - q < 0)continue;
		ll temp = 0;
		if (p > 0) {
			ll temp1 = (st[M - 1] * sinv[p-1]) % MOD;
			temp1 = (temp1 * sinv[q]) % MOD;
			temp1 = (temp1 * sinv[M - p - q]) % MOD;
			temp += temp1;
		}
		if (q > 0) {
			ll temp2 = (st[M - 1] * sinv[p]) % MOD;
			temp2 = (temp2 * sinv[q - 1]) % MOD;
			temp2 = (temp2 * sinv[M - p - q]) % MOD;
			temp += temp2;
		}
		ans = (ans + temp) % MOD;
	}
	whole = (whole - ans) % MOD;
	if (whole < 0)whole += MOD;
	cout << whole << "\n";
	return 0;
}
