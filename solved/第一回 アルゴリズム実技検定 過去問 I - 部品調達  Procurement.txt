#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	ll N, M;
	cin >> N >> M;
	VLL sets(M,0);
	VLL costs(M);
	for (ll m = 0; m < M; m++) {
		string S;
		cin >> S;
		for (ll n = 0; n < N; n++) {
			if (S[n] == 'Y')sets[m] += ((ll)1 << n);
		}
		cin >> costs[m];
	}
	VLL DP(1 << N, 1e13);
	DP[0] = 0;
	for (ll m = 0; m < M; m++) {
		for (ll code = 0; code < ((ll)1 << N); code++) {
			if (DP[code] == 1e13)continue;
			DP[code | sets[m]] = min(DP[code | sets[m]], DP[code] + costs[m]);
		}
	}
	if (DP[(1 << N) - 1] == 1e13)cout << -1 << "\n";
	else cout << DP.back() << "\n";
	return 0;
}
