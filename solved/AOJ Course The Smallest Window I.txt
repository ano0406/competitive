#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>

using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;


int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	ll N,S;
	cin >> N >> S;
	vector<ll> A(N+1, 0);
	for (ll n = 0; n < N; n++)cin >> A[n];
	ll ans = LLONG_MAX;
	ll sum = A[0];
	ll s = 0, e = 0;
	while (e < N) {
		if (sum >= S) {
			ans = min(ans, e - s + 1);
			if (e == s)sum += A[++e];
			else sum -= A[s++];
		}
		else {
			sum += A[++e];
		}
	}
	if (ans == LLONG_MAX)cout << 0 << "\n";
	else cout << ans << "\n";
	return 0;
}