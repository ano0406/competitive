void solve();

int main() {
	solve();
	return 0;
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
#include <iostream>
#include <vector>
#include <map>
#include <limits.h>
#include <algorithm>
#include <set>

using namespace std;

bool dict(string a, string b) {
	for (int i = 0; i < min(a.size(), b.size()); i++) {
		if (a[i] != b[i])return a[i] < b[i];
	}
	return (a.size() < b.size());
}

void solve() {
	while (true) {
		int N;
		cin >> N;
		if(N == 0)return;
		typedef pair<int, int> pii;
		typedef pair<pii, string> type;
		vector<type> arr;
		arr.resize(N);
		for (int n = 0; n < N; n++) {
			int time0 = 0, time1 = 0;
			cin >> arr[n].second;
			int p;
			cin >> p;
			int a, b, c, d, e, f, s, m;
			cin >> a >> b >>  c >> d >> e >> f >> s >> m;
			time0 = a + b + c, time1 = d + e;
			int T = time0 + m * time1;
			arr[n].first.first = f * m * s-p;
			arr[n].first.second = T;
		}
		sort(arr.begin(), arr.end(), [](type a, type b) {
			int num = a.first.first * b.first.second - a.first.second * b.first.first;
			if (num != 0)return (num > 0);
			else return dict(a.second, b.second);
		});
		for (int n = 0; n < N; n++)cout << arr[n].second << endl;
		cout << "#" << endl;
	}
}