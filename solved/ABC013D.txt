#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

ll N, M, D;

VLL doub(VLL V, ll d) {
	if (d == 0) {
		VLL ans(N);
		for (ll n = 0; n < N; n++)ans[n] = n;
		return ans;
	}
	if (d == 1)return V;
	VLL res1 = doub(V, d / 2);
	VLL ans(N);
	for (ll n = 0; n < N; n++) {
		ans[n] = res1[res1[n]];
	}
	if (d % 2 == 0)return ans;
	VLL ans2(N);
	for (ll n = 0; n < N; n++) {
		ans2[n] = ans[V[n]];
	}
	return ans2;
}

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	cin >> N >> M >> D;
	VLL V0(N);
	for (ll n = 0; n < N; n++)V0[n] = n;
	for (ll m = 0; m < M; m++) {
		ll a;
		cin >> a;
		swap(V0[a], V0[a - 1]);
	}
	VLL V1(N);
	for (ll n = 0; n < N; n++) {
		V1[V0[n]] = n;
	}
	VLL ans = doub(V1, D);
	for (ll n = 0; n < N; n++) {
		cout << ans[n] + 1 << "\n";
	}
	return 0;
}
