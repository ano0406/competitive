#include <iostream>

#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
using namespace std;

template<class T>
void in(vector<T>& V) {
	for (auto itr = V.begin(); itr != V.end(); itr++)cin >> *itr;
	return;
}

template<class T>
void out(vector<T>& V) {
	for (T& itr : V)cout << itr << endl;
	return;
}

//ãÛvectorÇóvëfêîNÇÃsegTreeÇ∆ÇµÇƒzÇ≈èâä˙âª
template<class T>
void segTree_init(vector<T>& vec, int N, T z) {
	int RN = 1;
	while (RN < N)RN *= 2;
	vec.resize(2 * RN, z);
}

//vecÇsegTreeÇ∆ÇµÇƒnî‘ñ⁄ÇxÇ…
template<class T>
void segTree_set(vector<T>& vec, int n, T x, function<T(T, T)> f,int k  = -1) {
	int RN = (vec.size() + 1) / 2;
	if (k == -1) {
		k = n + RN;
		vec[k] = x;
		segTree_set(vec, n, x, f, k / 2);
	}
	else if(k != 0){
		vec[k] = f(vec[2 * k], vec[2 * k + 1]);
		segTree_set(vec, n, x, f, k / 2);
	}
}

//vecÇ™segTreeÇÃéûÇÃÅAnî‘ñ⁄ÇÃóvëf
template<class T>
T segTree_at(vector<T>& vec, int n) {
	int RN = (vec.size()) / 2;
	return vec[RN + n];
}

//get [a,b]
template<class T>
T segTree_get(vector<T>& vec, int a, int b, function<T(T, T)> f, T e, int k = 1, int l = 0, int r = -1) {
	if (r == -1)r = vec.size() / 2 - 1;
	if (b < l || r < a)return e;
	else if (a <= l && r <= b)return vec[k];
	else return f(
		segTree_get(vec, a, b, f, e, 2 * k, l, (l + r) / 2),
		segTree_get(vec, a, b, f, e, 2 * k + 1, (l + r) / 2 + 1, r)
	);
}

int N, M;
vector<vector<int>> V;
vector<int> Vin;
typedef pair<int, int> seg;
vector<seg> seg0;

int main() {
	cin >> N >> M;
	V.resize(N);
	Vin.resize(N);
	for (int n = 0; n < N + M - 1; n++) {
		int a, b;
		cin >> a >> b;
		V[--a].push_back(--b);
		Vin[b]++;
	}
	segTree_init(seg0, N, seg(-1, INT_MAX));
	function<seg(seg,seg)> lambda = [](seg a, seg b) {
		if (a.second < b.second)return a;
		else return b;
	};
	for (int n = 0; n < N; n++) {
		segTree_set(seg0, n, seg(n, Vin[n]), lambda);
	}
	vector<int> parent(N, -1);
	for (int n = 0; n < N; n++) {
		int cur = segTree_get(seg0, 0, N - 1, lambda, seg(-1, INT_MAX)).first;
		segTree_set(seg0, cur, seg(n, INT_MAX), lambda);
		for (int c : V[cur]) {
			int now = segTree_get(seg0, c, c, lambda, seg(-1, INT_MAX)).second;
			segTree_set(seg0, c, seg(c, now - 1), lambda);
			parent[c] = cur;
		}
	}
	for (int n = 0; n < N; n++)cout << parent[n] + 1 << endl;
	return 0;
}