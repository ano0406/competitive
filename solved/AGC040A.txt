#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
using namespace std;
long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
//typedef boost::multiprecision::cpp_int bigint;

ll N;
vector<pll> LR;
vector<ll> minleft;
vector<ll> minright;

string S;
int main() {
	cin >> S;
	ll N = S.size();
	vector<ll> charge;
	if (S[0] == '>')charge.push_back(0);
	ll counter = 1;
	for (ll n = 1; n < N; n++) {
		if (S[n] == S[n - 1])counter++;
		else {
			charge.push_back(counter);
			counter = 1;
		}
	}
	charge.push_back(counter);
	charge.push_back(0);
	ll sum = 0;
	for (ll n = 0; n < charge.size(); n++) {
		ll e = charge[n];
		sum += e * (e - 1) / 2;
	}
	for (ll n = 0; n + 1 < charge.size(); n+=2) {
		sum += max(charge[n], charge[n + 1]);
	}
	cout << sum << endl;
	return 0;
}
