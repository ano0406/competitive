#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>

using namespace std;
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
//typedef boost::multiprecision::cpp_int bigint;

typedef pair<string, ll> P;
queue<P> pros;

ll N, T;

int main() {
	cin >> N >> T;
	for (ll n = 0; n < N; n++) {
		string name;
		ll t;
		cin >> name >> t;
		pros.push(P(name, t));
	}
	ll time = 0;
	while (!pros.empty()) {
		P cur = pros.front();
		if (cur.second <= T) {
			time += cur.second;
			cout << cur.first << " " << time << endl;
		}
		else {
			pros.push(P(cur.first, cur.second - T));
			time += T;
		}
		pros.pop();
	}
	return 0;
}