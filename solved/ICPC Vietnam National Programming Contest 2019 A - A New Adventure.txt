#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
using namespace std;
long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
//typedef boost::multiprecision::cpp_int bigint;

template< typename T >
struct edge {
	int src, to;
	T cost;

	edge(int to, T cost) : src(-1), to(to), cost(cost) {}

	edge(int src, int to, T cost) : src(src), to(to), cost(cost) {}

	edge& operator=(const int& x) {
		to = x;
		return *this;
	}

	operator int() const { return to; }
};

template< typename T >
using Edges = vector< edge< T > >;
template< typename T >
using WeightedGraph = vector< Edges< T > >;
using UnWeightedGraph = vector< vector< int > >;
template< typename T >
using Matrix = vector< vector< T > >;

template< typename T >
vector< T > dijkstra(WeightedGraph< T >& g, int s) {
	const auto INF = numeric_limits< T >::max();
	vector< T > dist(g.size(), INF);

	using Pi = pair< T, int >;
	priority_queue< Pi, vector< Pi >, greater< Pi > > que;
	dist[s] = 0;
	que.emplace(dist[s], s);
	while (!que.empty()) {
		T cost;
		int idx;
		tie(cost, idx) = que.top();
		que.pop();
		if (dist[idx] < cost) continue;
		for (auto& e : g[idx]) {
			auto next_cost = cost + e.cost;
			if (dist[e.to] <= next_cost) continue;
			dist[e.to] = next_cost;
			que.emplace(dist[e.to], e.to);
		}
	}
	return dist;
}

ll H, W;
vector<vector<ll>> MAP;   //0->‰½‚à–³‚µ 1->ŽÔ

int conv(int y, int x) {
	if (y == H)return W * H;
	x = (x + 3 * W) % W;
	return y*W + x;
}

int main() {
	cin >> H >> W;
	MAP.resize(H, vector<ll>(W, 0));
	for (ll y = 0; y < H; y++) {
		string S;
		cin >> S;
		for (ll x = 0; x < W; x++) {
			if (S[x] == 'M')MAP[y][x] = 1;
			else MAP[y][x] = 0;
		}
	}
	WeightedGraph<ll> G(H * W + 1);
	for (int y = 0; y < H; y++) {
		for (int x = 0; x < W; x++) {
			if (MAP[y][x] == 1)continue;
			if (MAP[y][(x+1)%W] != 1)G[conv(y, x)].push_back({ conv(y,x),conv(y,x),1 });
			if (MAP[y][(x - 1+W)%W] != 1)G[conv(y, x)].push_back({ conv(y,x),conv(y,x - 1),1 });
			if (MAP[y][(x - 1+W)%W] != 1 && MAP[y][(x - 2+W)%W] != 1)G[conv(y, x)].push_back({ conv(y,x),conv(y,x - 2),1 });
			if (y < H - 1) {
				if (MAP[y + 1][(x - 1 + W) % W] != 1 && MAP[y+1][x] != 1)G[conv(y, x)].push_back({ conv(y,x),conv(y + 1,x - 1),1 });
			}
			else {
				G[conv(y, x)].push_back({ conv(y,x),conv(y + 1,x - 1),1 });
			}
			if (y > 0) {
				if (MAP[y - 1][(x - 1 + W) % W] != 1 && MAP[y-1][x] != 1)G[conv(y, x)].push_back({ conv(y,x),conv(y - 1,x - 1),1 });
			}
		}
	}
	vector<ll> dijk = dijkstra(G, 0);
	if (dijk[W * H] == LLONG_MAX)cout << -1 << endl;
	else cout << dijk[W * H] << endl;
	return 0;
}