#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

ll N, K;
ll points[3];
VLL hands;   //0,1,2->rosk,scisser,paper
VVLL DP;

ll dp(ll n) {
	ll ind = 1;
	DP[0] = { 0,0,0 };
	for (; n < N; n += K,ind++) {
		for (ll h = 0; h < 3; h++) {
			DP[ind][h] = max(DP[ind - 1][(h + 1) % 3], DP[ind - 1][(h + 2) % 3]);
			if ((h + 1) % 3 == hands[n]) {
				DP[ind][h] += points[h];
			}
		}
	}
	ind--;
	return max(DP[ind][0], max(DP[ind][1], DP[ind][2]));
}

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	cin >> N >> K;
	hands.resize(N);
	cin >> points[0] >> points[1] >> points[2];
	string T;
	cin >> T;
	for (ll n = 0; n < N; n++) {
		if (T[n] == 'r')hands[n] = 0;
		else if (T[n] == 's')hands[n] = 1;
		else hands[n] = 2;
	}
	DP.resize(N+1,VLL(3,0));
	ll ans = 0;
	for (ll n = 0; n < min(N, K); n++) {
		ans += dp(n);
	}
	cout << ans << "\n";
	return 0;
}
