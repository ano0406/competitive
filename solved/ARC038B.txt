#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
using namespace std;
long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
//typedef boost::multiprecision::cpp_int bigint;

ll H, W;
vector<vector<ll>> MAP;   //0->í çsâ¬î\ 1->è·äQï®
vector<vector<ll>> DP;

ll dp(ll x, ll y) {
	if (DP[x][y] != -1)return DP[x][y];
	ll ans = dp(x + 1, y) * dp(x, y + 1) * dp(x + 1, y + 1);
	DP[x][y] = 1 - ans;
	return DP[x][y];
}

int main() {
	cin >> H >> W;
	MAP.resize(W+1, vector<ll>(H+1, 1));
	DP.resize(W+1, vector<ll>(H+1, -1));
	for (ll y = 0; y < H; y++) {
		string S;
		cin >> S;
		for (ll x = 0; x < W; x++) {
			if (S[x] == '.')MAP[x][y] = 0;
		}
	}
	for (ll x = 0; x <= W; x++) {
		for (ll y = 0; y <= H; y++) {
			if (MAP[x][y] == 1)DP[x][y] = 1;
			else if (MAP[x + 1][y] == 1 && MAP[x][y + 1] == 1 && MAP[x + 1][y + 1] == 1)DP[x][y] = 0;
		}
	}
	if (dp(0, 0) == 1)cout << "First" << endl;
	else cout << "Second" << endl;
	return 0;
}
