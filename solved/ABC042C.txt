#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
using namespace std;
long long MOD = 1e9 + 7;

int N, K;
vector<int> D;
vector<int> allow;

int main() {
	cin >> N >> K;
	D.resize(N);
	for (int n = 0; n < N; n++)cin >> D[n];
	for (int d = 0; d < 10; d++) {
		bool flag = true;
		for (int n = 0; n < K; n++) {
			if (d == D[n]) {
				flag = false;
				break;
			}
		}
		if (flag)allow.push_back(d);
	}
	K = allow.size();
	for (int d4 = 0; d4 < K; d4++) {
		int num = allow[d4];
		if (num >= N) {
			cout << num << endl;
			return 0;
		}
	}
	for (int d3 = 0; d3 < K; d3++) {
		for (int d4 = 0; d4 < K; d4++) {
			int num = 10 * allow[d3] + allow[d4];
			if (num >= N) {
				cout << num << endl;
				return 0;
			}
		}
	}
	for (int d2 = 0; d2 < K; d2++) {
		for (int d3 = 0; d3 < K; d3++) {
			for (int d4 = 0; d4 < K; d4++) {
				int num = 100 * allow[d2] + 10 * allow[d3] + allow[d4];
				if (num >= N) {
					cout << num << endl;
					return 0;
				}
			}
		}
	}
	for (int d1 = 0; d1 < K; d1++) {
		for (int d2 = 0; d2 < K; d2++) {
			for (int d3 = 0; d3 < K; d3++) {
				for (int d4 = 0; d4 < K; d4++) {
					int num = 1000 * allow[d1] + 100 * allow[d2] + 10 * allow[d3] + allow[d4];
					if (num >= N) {
						cout << num << endl;
						return 0;
					}
				}
			}
		}
	}
	for (int d0 = 0; d0 < K; d0++) {
		for (int d1 = 0; d1 < K; d1++) {
			for (int d2 = 0; d2 < K; d2++) {
				for (int d3 = 0; d3 < K; d3++) {
					for (int d4 = 0; d4 < K; d4++) {
						int num = 10000 * allow[d0] + 1000 * allow[d1] + 100 * allow[d2] + 10 * allow[d3] + allow[d4];
						if (num >= N) {
							cout << num << endl;
							return 0;
						}
					}
				}
			}
		}
	}
}
