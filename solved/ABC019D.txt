#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>
#include <bitset>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	ll N;
	cin >> N;
	ll maxd = 0;
	ll maxn = 1;
	for (ll n = 2; n <= N; n++) {
		cout << "? 1 " << n << "\n";
		cout << flush;
		ll d;
		cin >> d;
		if (d > maxd) {
			maxd = d;
			maxn = n;
		}
	}
	maxd = 0;
	for (ll n = 1; n <= N; n++) {
		if (n == maxn)continue;
		cout << "? " << maxn << " " << n << "\n" << flush;
		ll d;
		cin >> d;
		maxd = max(maxd, d);
	}
	cout << "! " << maxd << "\n" << flush;
	return 0;
}
