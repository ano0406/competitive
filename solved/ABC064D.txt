#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>

using namespace std;
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
//typedef boost::multiprecision::cpp_int bigint;

int main() {
	ll N;
	string S;
	cin >> N;
	cin >> S;
	ll n = 0;
	ll l = 0, r = 0;
	while (n < S.size()) {
		if (S[n] == '(')l++;
		else r++;
		if (r <= l)n++;
		else {
			S.insert(0, "(");
			l++;
			n += 2;
		}
	}
	if (l != r) {
		for (ll d = 0; d < l - r; d++)S += string(")");
	}
	cout << S << endl;
	return 0;
}
