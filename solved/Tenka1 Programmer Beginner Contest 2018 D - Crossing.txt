#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>

using namespace std;
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
//typedef boost::multiprecision::cpp_int bigint;

ll N;

bool checkfor(ll K) {
	if (K * (K - 1) / 2 != N)return false;
	vector<vector<ll>> ans;
	ans.resize(K);
	for (ll s = 0,n = 1; s < K; s++) {
		for (ll t = s + 1; t < K; t++,n++) {
			ans[s].push_back(n);
			ans[t].push_back(n);
		}
	}
	cout << "Yes" << endl;
	cout << K << endl;
	for (ll k = 0; k < K; k++) {
		cout << ans[k].size() << " ";
		for (ll num : ans[k])cout << num << " ";
		cout << endl;
	}
	return true;
}

int main() {
	cin >> N;
	bool flag = false;
	for (ll k = 1; k <= 1e3; k++) {
		if (checkfor(k)) {
			flag = true;
			break;
		}
	}
	if (!flag)cout << "No" << endl;
	return 0;
}