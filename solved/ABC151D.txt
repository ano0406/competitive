#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long long LL;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

LL H, W;
VVLL MAP;   //1->unavailable

LL bfs(LL sx, LL sy) {
	if (MAP[sx][sy] == 1)return 0;
	struct query {
		LL x, y, d;
	};
	queue<query> q;
	LL V[4][2] = {
		{0,1},{0,-1},{1,0},{-1,0}
	};
	VVLL res;
	res.resize(W, VLL(H, -1));
	q.push({ sx,sy,0 });
	LL ans = 0;
	res[sx][sy] = 0;
	while(q.size() > 0) {
		LL x = q.front().x;
		LL y = q.front().y;
		LL d = q.front().d;
		q.pop();
		for (LL v = 0; v < 4; v++) {
			LL nx = x + V[v][0];
			LL ny = y + V[v][1];
			if (nx < 0 || nx >= W || ny < 0 || ny >= H)continue;
			if (MAP[nx][ny] == 1)continue;
			if (res[nx][ny] != -1)continue;
			res[nx][ny] = d + 1;
			q.push({ nx,ny,d + 1 });
			ans = max(ans, d + 1);
		}
	}
	return ans;
}

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	cin >> H >> W;
	MAP.resize(W, VLL(H, 0));
	for (LL y = 0; y < H; y++) {
		string S;
		cin >> S;
		for (LL x = 0; x < W; x++) {
			if (S[x] == '#')MAP[x][y] = 1;
		}
	}
	LL ans = 0;
	for (LL sx = 0; sx < W; sx++) {
		for (LL sy = 0; sy < H; sy++) {
			ans = max(ans, bfs(sx, sy));
		}
	}
	cout << ans << "\n";
	return 0;
}
