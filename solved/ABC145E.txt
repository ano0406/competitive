#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>

using namespace std;
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
//typedef boost::multiprecision::cpp_int bigint;

ll N, T;
vector<ll> A, B;
vector<vector<ll>> DP1, DP2;

int main() {
	cin >> N >> T;
	A.resize(N + 1);
	B.resize(N + 1);
	for (ll n = 1; n <= N; n++)cin >> A[n] >> B[n];
	DP1.resize(N + 2, vector<ll>(T + 1,0));
	DP2.resize(N + 2, vector<ll>(T + 1,0));
	for (ll n = 1; n <= N; n++) {
		for (ll t = 0; t <= T; t++) {
			DP1[n][t] = DP1[n - 1][t];
			if (t >= A[n])DP1[n][t] = max(DP1[n][t], DP1[n - 1][t - A[n]] + B[n]);
		}
	}
	for (ll n = N; n >= 1; n--) {
		for (ll t = 0; t <= T; t++) {
			DP2[n][t] = DP2[n + 1][t];
			if (t >= A[n])DP2[n][t] = max(DP2[n][t], DP2[n + 1][t - A[n]] + B[n]);
		}
	}
	ll ans = DP1[N][T - 1];
	for (ll n = 1; n <= N; n++) {
		ll temp = 0;
		for (ll t = 0; t <= T - 1; t++) {
			temp = max(temp, DP1[n - 1][t] + DP2[n + 1][T - 1 - t]);
		}
		temp += B[n];
		ans = max(ans, temp);
	}
	cout << ans << endl;
	return 0;
}
