#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>

using namespace std;
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
//typedef boost::multiprecision::cpp_int bigint;

ll N;
vector<ll> P;
vector<ll> le,ri;   //ç∂Ç©ÇÁÅAâEÇ©ÇÁòAë±âΩå¬ÇÃêî
vector<ll> pos;   //âΩÇ™âΩî‘ñ⁄Ç…Ç†ÇÈÇ©

int main() {
	cin >> N;
	P.resize(N);
	pos.resize(N+1);
	for (ll n = 0; n < N; n++) {
		cin >> P[n];
		pos[P[n]] = n;
	}
	le.resize(N+1, 0);
	le[1] = 1;
	for (ll num = 2; num <= N; num++) {
		if (pos[num - 1] < pos[num])le[num] = le[num - 1] + 1;
		else le[num] = 1;
	}
	ri.resize(N + 2, 0);
	ri[N] = 1;
	for (ll num = N - 1; num >= 1; num--) {
		if (pos[num + 1] > pos[num])ri[num] = ri[num + 1] + 1;
		else ri[num] = 1;
	}
	ll ans = LLONG_MAX;
	for (ll n = 0; n <= N; n++) {
		ll res = (n - le[n]) + (N - n - ri[n]+1);
		ans = min(ans, res);
	}
	cout << ans << endl;
	return 0;
}