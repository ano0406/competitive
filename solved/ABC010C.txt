#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

ll sx, sy, tx, ty;
ll T, V;

bool judge(ll x,ll y) {
	ld d1 = sqrt((x - sx) * (x - sx) + (y - sy) * (y - sy));
	ld d2 = sqrt((x - tx) * (x - tx) + (y - ty) * (y - ty));
	return (d1 + d2 <= T * V);
}

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	cin >> sx >> sy >> tx >> ty;
	cin >> T >> V;
	ll N;
	cin >> N;
	VLL A(N);
	for (ll n = 0; n < N; n++) {
		ll x, y;
		cin >> x >> y;
		if (judge(x, y)) {
			cout << "YES\n";
			return 0;
		}
	}
	cout << "NO\n";
	return 0;
}
