#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long LL;
typedef long double LD;
typedef pair<LL, LL> PLL;
typedef pair<LD, LL> PDL;
typedef pair<LD, LD> PDD;
typedef vector<LL> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

template<class T>
void in(T& x) {
	cin >> x;
}

template<class T1, class T2>
void in(pair<T1, T2>& p) {
	in(p.first);
	in(p.second);
}

template<class T>
void in(vector<T>& v, LL st = -1, LL en = -1) {
	if (st == -1) {
		st = 0;
		en = v.size() - 1;
	}
	for (LL n = st; n <= en; n++) {
		in(v[n]);
	}
}

VVLL MAP;

LL vect[8][2] = {
	{1,0},{1,1},{0,1},{-1,1},{-1,0},{-1,-1},{0,-1},{1,-1}
};

LL mami(){
	PLL pos(0, 0);
	LL num = 0;
	for (LL Y = 8; Y >= 1; Y--) {
		for (LL X = 1; X <= 8; X++) {
			if (MAP[X][Y] != 0)continue;
			LL temp = 0;
			for (LL v = 0; v < 8; v++) {
				LL x = X+vect[v][0], y = Y+vect[v][1];
				while (MAP[x][y] != 0) {
					if (MAP[x][y] == 1) {
						temp += max(abs(X - x), abs(Y - y)) - 1;
						break;
					}
					x += vect[v][0];
					y += vect[v][1];
				}
			}
			if (temp > num) {
				num = temp;
				pos = PLL(X, Y);
			}
		}
	}
	if (num == 0)return 0;
	MAP[pos.first][pos.second] = 1;
	for (LL v = 0; v < 8; v++) {
		LL x = pos.first + vect[v][0];
		LL y = pos.second + vect[v][1];
		while (MAP[x][y] != 0) {
			if (MAP[x][y] == 1) {
				while (x != pos.first || y != pos.second) {
					MAP[x][y] = 1;
					x -= vect[v][0];
					y -= vect[v][1];
				}
				break;
			}
			x += vect[v][0];
			y += vect[v][1];
		}
	}
	return 1;
}

LL bebe() {
	PLL pos(0, 0);
	LL num = 0;
	for (LL Y = 1; Y <= 8; Y++) {
		for (LL X = 8; X >= 1; X--) {
			if (MAP[X][Y] != 0)continue;
			LL temp = 0;
			for (LL v = 0; v < 8; v++) {
				LL x = X + vect[v][0], y = Y + vect[v][1];
				while (MAP[x][y] != 0) {
					if (MAP[x][y] == -1) {
						temp += max(abs(X - x), abs(Y - y)) - 1;
						break;
					}
					x += vect[v][0];
					y += vect[v][1];
				}
			}
			if (temp > num) {
				num = temp;
				pos = PLL(X, Y);
			}
		}
	}
	if (num == 0)return 0;
	MAP[pos.first][pos.second] = -1;
	for (LL v = 0; v < 8; v++) {
		LL x = pos.first + vect[v][0];
		LL y = pos.second + vect[v][1];
		while (MAP[x][y] != 0) {
			if (MAP[x][y] == -1) {
				while (x != pos.first || y != pos.second) {
					MAP[x][y] = -1;
					x -= vect[v][0];
					y -= vect[v][1];
				}
				break;
			}
			x += vect[v][0];
			y += vect[v][1];
		}
	}
	return 1;
}

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	MAP.resize(10, VLL(10, 0));
	for (LL y = 8; y >= 1; y--) {
		string S;
		cin >> S;
		for (LL x = 1; x <= 8; x++) {
			if (S[x-1] == 'o')MAP[x][y] = 1;
			else if (S[x-1] == 'x')MAP[x][y] = -1;
		}
	}
	while (1) {
		LL t = 0;
		t += mami();
		t += bebe();
		if (t == 0)break;
	}
	for (LL y = 8; y >= 1; y--) {
		for (LL x = 1; x <= 8; x++) {
			if (MAP[x][y] == 1)cout << "o";
			else if (MAP[x][y] == -1)cout << "x";
			else cout << ".";
		}
		cout << "\n";
	}
	return 0;
}