#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>
#include <bitset>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long long LL;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
typedef unsigned long long ULL;
//typedef boost::multiprecision::cpp_int bigint;

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	LL N;
	cin >> N;
	VLL P(N);
	for (LL n = 0; n < N; n++) {
		cin >> P[n];
		P[n]--;
	}
	VLL pos(N);
	for (LL n = 0; n < N; n++) {
		pos[P[n]] = n;
	}
	LL ans = 0;
	LL p = N-1;
	for (LL n = 0; n < N; n++) {
		if (p == -1)break;
		if (pos[n] <= p) {
			ans++;
			p = pos[n] - 1;
		}
	}
	cout << ans << "\n";
	return 0;
}
