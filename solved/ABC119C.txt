#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
using namespace std;
const long long MOD = 1e9+7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
//typedef boost::multiprecision::cpp_int bigint;

ll N, A, B, C;

vector<ll> L;

ll check(vector<ll> mark) {
	ll a = 0, b = 0, c = 0;
	ll ac = 0, bc = 0, cc = 0;
	ll sum = 0;
	for (ll n = 0; n < N; n++) {
		if (mark[n] == 0) {
			a += L[n];
			ac++;
		}
		else if (mark[n] == 1) {
			b += L[n];
			bc++;
		}
		else if(mark[n] == 2){
			c += L[n];
			cc++;
		}
	}
	if (ac == 0 || bc == 0 || cc == 0)return LLONG_MAX;
	sum += (ac+bc+cc-3)*10;
	sum += abs(a - A);
	sum += abs(b - B);
	sum += abs(c - C);
	return sum;
}

int main() {
	cin >> N >> A >> B >> C;
	L.resize(N);
	for (ll n = 0; n < N; n++)cin >> L[n];
	ll code = 4;
	for (ll n = 2; n <= N; n++)code *= 4;
	ll ans = LLONG_MAX;
	for (ll oldc = 0; oldc < code; oldc++) {
		vector<ll> ch(N, 0);
		ll c = oldc;
		for (ll n = 0; n < N; n++) {
			ch[n] = c % 4;
			c /= 4;
		}
		ans = min(ans, check(ch));
	}
	cout << ans << endl;
	return 0;
}
