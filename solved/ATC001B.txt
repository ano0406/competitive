#include <iostream>
#include <math.h>
#include <algorithm>
#include <vector>
#include <iomanip>
using namespace std;

void solve();

int main() {
	solve();
	return 0;
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////

class unionFind {
private:
	int* p;   //親配列のポインタ
	int N;   //要素数
public:
	unionFind(int);   //コンストラクタ
	int parent(int);   //親要素を返す
	void unit(int, int);   //2要素をつなぐ
	int operator[](int);   //parentの省略形
	~unionFind();
	int size();   //要素数を返す
};

unionFind::unionFind(int n){
	N = n;
	p = new int[N];
	for (int i = 0; i < N; i++)p[i] = i;
	return;
}

int unionFind::parent(int n) {
	if (n < 0 || n >= N)return -1;
	if (p[n] == n)return n;   //自分が一番上の親
	return p[n] = parent(p[n]);   //つなぎ直しと上にたどる操作
}

int unionFind::operator[](int n){
	return parent(n);
}

void unionFind::unit(int x,int y) {
	int X = parent(x), Y = parent(y);
	if (X == Y)return;   //根が同じだから何もせずに帰る
	p[X] = Y;
	return;
}

unionFind::~unionFind() {
	delete(p);
	return;
}

int unionFind::size() {
	return N;
}

void solve() {
	int N, Q;
	cin >> N >> Q;
	unionFind U(N);
	for (int q = 0; q < Q; q++) {
		int p, a, b;
		cin >> p >> a >> b;
		if (p == 0)U.unit(a,b);
		else {
			cout << ((U[a] == U[b]) ? "Yes" : "No") << endl;
		}
	}
	return;
}