#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
using namespace std;
const long long MOD = 1e9+7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
//typedef boost::multiprecision::cpp_int bigint;

vector<vector<ll>> DP;
vector<ll> DP2;
ll N;

ll dp(ll x0, ll y0, ll x1, ll y1) {
	return DP[x1][y1] - DP[x0 - 1][y1] - DP[x1][y0 - 1] + DP[x0 - 1][y0 - 1];
}

int main() {
	cin >> N;
	DP.resize(N + 1, vector<ll>(N + 1, 0));
	for (ll y = 1; y <= N; y++) {
		for (ll x = 1; x <= N; x++) {
			cin >> DP[x][y];
		}
	}
	for (ll y = 1; y <= N; y++) {
		for (ll x = 1; x <= N; x++) {
			DP[x][y] += DP[x - 1][y] + DP[x][y - 1] - DP[x - 1][y - 1];
		}
	}
	DP2.resize(N*N + 1,0);
	for (ll X = 1; X <= N * N; X++) {
		ll ans = 0;
		for (ll x = 1; x * x <= X; x++) {
			if (X % x != 0)continue;
			for (ll p = 1; p <= N; p++) {
				for (ll q = 1; q <= N; q++) {
					if (p + x - 1 <= N && q + X / x - 1 <= N)
						ans = max(ans, dp(p, q, p + x - 1, q + X / x - 1));
					if (p + X / x - 1 <= N && q + x - 1 <= N)
						ans = max(ans, dp(p, q, p + X / x - 1, q + x - 1));
				}
			}
		}
		DP2[X] = max(DP2[X-1], ans);
	}
	ll Q;
	cin >> Q;
	for (ll q = 0; q < Q; q++) {
		ll X;
		cin >> X;
		cout << DP2[X] << endl;
	}
	return 0;
}
