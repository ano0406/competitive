void solve();

int main() {
	solve();
	return 0;
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
#include <iostream>
#include <algorithm>
#include <vector>
#include <set>
#include <queue>
#include <functional>
#include <map>
#include <string>
#include <boost/multiprecision/cpp_int.hpp>
#include <limits.h>
#include <iomanip>
#include <stack>

using namespace std;
using namespace boost::multiprecision;

vector<int> v;

void solve() {
	int N;
	cin >> N;
	bool prev;
	cin >> prev;
	int counter = 1;   //‰½˜A‘±‚ÅŒðŒÝ‚ª‘±‚¢‚Ä‚¢‚é‚©
	for (int n = 1; n < N; n++) {
		bool cur;
		cin >> cur;
		if (n % 2 == 1)cur = !cur;
		if (prev == cur)counter++;
		else {
			v.push_back(counter);
			counter = 1;
		}
		prev = cur;
	}
	v.push_back(counter);
	int m = 0;
	for (int n = 0; n < v.size(); n++) {
		m = max(m,v[n]);
	}
	if (v.size() == 2) {
		m = max(m, v[0] + v[1]);
	}
	else if (v.size() >= 3) {
		for (int n = 1; n < v.size() - 1; n++) {
			m = max(v[n - 1] + v[n] + v[n + 1],m);
		}
	}
	cout << m << endl;
	return;
}