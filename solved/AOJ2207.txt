#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
using namespace std;
long long MOD = 1e9 + 7;

//WeightedUnionFind
template<class T>
class WeightedUnionFind {
public:
	int* p;   //親配列のポインタ
	int* rank;
	int N;   //要素数
	int* check;   //同値な要素の数
	T* diff_weight;   //差分
	//diff用
	T weight(int n) {
		parent(n);
		return diff_weight[n];
	}
public:
	WeightedUnionFind(int _N){
		N = _N;
		p = new int[N];
		rank = new int[N];
		check = new int[N];
		diff_weight = new T[N];
		for (int n = 0; n < N; n++) {
			p[n] = n;
			rank[n] = 0;
			check[n] = 1;
			diff_weight[n] = 0;
		}
	};
	~WeightedUnionFind() {
		delete p;
		delete rank;
		delete check;
		delete diff_weight;
	}
	//親要素を返す
	int parent(int n) {
		if (p[n] == n)return n;
		int par = parent(p[n]);
		diff_weight[n] += diff_weight[p[n]];
		return p[n] = par;
	}
	//差分(weight(y)-weight(x))を返す xとyが同じグループであるように!
	T diff(int x, int y) {
		return weight(y) - weight(x);
	}
	//weight(y)-weight(x)=wとなるようにマージ すでに同チームならばfalse
	bool merge(int x, int y, T w) {
		w += weight(x);
		w -= weight(y);
		x = parent(x);
		y = parent(y);
		if (x == y)return false;
		if (rank[x] < rank[y]) {
			swap(x, y);
			w = -w;
		}
		int groupsum = check[x] + check[y];
		if (rank[x] == rank[y]) {
			rank[x]++;
		}
		p[y] = x;
		diff_weight[y] = w;
		check[x] = groupsum;
		return true;
	}
	//同じグループか判定する
	bool issame(int x, int y) {
		return parent(x) == parent(y);
	}
	//自分のグループの要素数を返す
	int size(int n) {
		return check[parent(n)];
	}
};

int main() {
	while (true) {
		int N;
		cin >> N;
		if (N == 0)return 0;
		WeightedUnionFind<long long> UF(2*N);
		vector<string> unit;
		bool ans = true;
		for (int q = 0; q < N; q++) {
			string a, b, c, d, e;
			cin >> a >> b >> c >> d >> e;
			if (!ans)continue;
			int left = -1;
			for (int n = 0; n < unit.size(); n++) {
				if (unit[n] == b)left = n;
			}
			if (left == -1) {
				left = unit.size();
				unit.push_back(b);
			}
			int right = -1;
			for (int n = 0; n < unit.size(); n++) {
				if (unit[n] == e)right = n;
			}
			if (right == -1) {
				right = unit.size();
				unit.push_back(e);
			}
			d = d.substr(3);
			int n = stoi(d);
			if (!UF.issame(left, right))UF.merge(left, right, -n);
			else {
				if (UF.diff(left, right) != -n) {
					ans = false;
				}
			}
		}
		if (ans)cout << "Yes" << endl;
		else cout << "No" << endl;
	}
}