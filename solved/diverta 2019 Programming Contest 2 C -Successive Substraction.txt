void 
solve();

int main() {
	solve();
	return 0;
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
using namespace std;

typedef pair<int, int> pii;
int N;
vector<int> X, Y;
map<pii, int> m;

void solve() {
	cin >> N;
	X.resize(N); Y.resize(N);
	for (int n = 0; n < N; n++)cin >> X[n] >> Y[n];
	for (int i = 0; i < N; i++) {
		for (int j = i + 1; j < N; j++) {
			int dx = X[i] - X[j], dy = Y[i] - Y[j];
			if (m.find(pii(dx, dy)) != m.end()) {
				(*(m.find(pii(dx, dy)))).second++;
			}
			else if (m.find(pii(-dx, -dy)) != m.end()) {
				(*(m.find(pii(-dx, -dy)))).second++;
			}
			else m.insert(pair<pii,int>(pii(dx, dy), 1));
		}
	}
	int countmax = 0;
	for (auto itr = m.begin(); itr != m.end(); itr++) {
		countmax = max(countmax, (*itr).second);
	}
	cout << N - countmax << endl;
	return;
}
