void solve();

int main() {
	solve();
	return 0;
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
using namespace std;

int N, M;
vector<long long> A, B;
vector<long long> DD;
int MOD = 1e9 + 7;
vector<long long> D, E;

void solve() {
	cin >> N >> M;
	A.resize(N); B.resize(M);
	for (int n = 0; n < N; n++)cin >> A[n];
	for (int m = 0; m < M; m++)cin >> B[m];
	sort(A.begin(), A.end());
	sort(B.begin(), B.end());
	D.resize(N);
	E.resize(N);
	for (int j = 0; j < N; j++) {
		int s = -1, e = M;
		while (e - s > 1) {
			int m = (e + s) / 2;
			if (B[m] < A[j])s = m;
			else e = m;
		}
		D[j] = s + 1;
		s = -1, e = M;
		while (e - s > 1) {
			int m = (e + s) / 2;
			if (B[m] <= A[j])s = m;
			else e = m;
		}
		E[j] = M - e;
	}
	DD.resize(N);
	DD[0] = D[0];
	for (int n = 1; n < N; n++)DD[n] = DD[n - 1] + D[n];
	long long ans = 0;
	for (int n = 1; n < N; n++) {
		ans += DD[n - 1] * E[n];
		ans %= MOD;
	}
	cout << ans << endl;
	return;
}
