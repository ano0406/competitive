void solve();

int main() {
	solve();
	return 0;
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <queue>
#include <math.h>
#include <iomanip>
using namespace std;
typedef pair<int, int> pii;

//unionFind
class unionFind {
private:
	int* p;   //親配列のポインタ
	int* rank;
	int N;   //要素数
public:
	unionFind(int);   //コンストラクタ
	int parent(int);   //親要素を返す
	void unit(int, int);   //2要素をつなぐ
	int operator[](int);   //parentの省略形
	~unionFind();
	int size();   //要素数を返す
};

unionFind::unionFind(int n) {
	N = n;
	p = new int[N];
	rank = new int[N];
	for (int i = 0; i < N; i++) {
		p[i] = i;
		rank[i] = 0;
	}
	return;
}

int unionFind::parent(int n) {
	if (n < 0 || n >= N)return -1;
	if (p[n] == n)return n;   //自分が一番上の親
	return p[n] = parent(p[n]);   //つなぎ直しと上にたどる操作
}

int unionFind::operator[](int n) {
	return parent(n);
}

void unionFind::unit(int x, int y) {
	x = parent(x), y = parent(y);
	if (x == y)return;   //根が同じだから何もせずに帰る
	if (rank[x] < rank[y])p[x] = y;
	else {
		p[y] = x;
		if (rank[x] == rank[y])rank[x]++;
	}
	return;
}

unionFind::~unionFind() {
	delete(p);
	delete(rank);
	return;
}

int unionFind::size() {
	return N;
}


int N, M;
struct edge {
	int u, v, c, t;
	long double w;
};
vector<edge> Edges;   //辺集合

void solve() {
	cin >> N >> M;
	Edges.resize(M);
	for (int m = 0; m < M; m++) {
		cin >> Edges[m].u >> Edges[m].v >> Edges[m].c >> Edges[m].t;
	}
	long double s = 0, e = 1e10;
	int counter = 0;
	for (int counter = 0; counter < 100; counter++) {
		long double m = (s + e) / 2;
		for (int e = 0; e < M; e++)Edges[e].w = Edges[e].c - m * Edges[e].t;
		sort(Edges.begin(), Edges.end(), [](edge a, edge b) {return a.w < b.w; });
		unionFind UF(N);
		long double sum = 0;
		int i = 0;
		for (; i < M; i++) {
			if (Edges[i].w >= 0)break;
			sum += Edges[i].w;
			UF.unit(Edges[i].u, Edges[i].v);
		}
		for (; i < M; i++) {
			if (UF[Edges[i].u] == UF[Edges[i].v])continue;
			sum += Edges[i].w;
			UF.unit(Edges[i].u, Edges[i].v);
		}
		if (sum <= 0)e = m;
		else s = m;
	}
	cout << fixed << setprecision(6) << e << endl;
	return;
}
