void solve();

int main() {
	solve();
	return 0;
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
using namespace std;
typedef pair<int, int> pii;

template<class T>
class BIT {
public:
	vector<T>* array;
	int N, RN = 1;   //実データ数、ごみデータ含めたデータ数
	BIT(int n) {
		construct(n);
	}
	BIT(){}
	void construct(int n) {
		n++;
		while (RN < n)RN *= 2;
		array = new vector<T>;
		array->resize(RN + 1, 0);
	}
	~BIT() {
		delete array;
		return;
	}
	//a0(=0)a1+...+anを求める
	T get(long long n) {
		n++;
		T s = 0;
		while (n > 0) {
			s = s + array->at(n);
			n -= n & (-n);
		}
		return s;
	}
	//anに+x(1-index)
	void add(int n, T x) {
		n++;
		while (n <= RN) {
			array->at(n) += x;
			n += n & (-n);
		}
	}
};

vector<int> ans;

void solve() {
	int Q;
	cin >> Q;
	BIT<int> bit(200000);
	for (int q = 0; q < Q; q++) {
		int T, X;
		cin >> T >> X;
		if (T == 1) {
			bit.add(X, 1);
		}
		else {
			int s = 0, e = 200000;
			while (e - s > 1) {
				int m = (e + s) / 2;
				if (bit.get(m) < X)s = m;
				else e = m;
			}
			ans.push_back(e);
			bit.add(e, -1);
		}
	}
	for (int i = 0; i < ans.size(); i++) {
		cout << ans[i] << endl;
	}
	return;
}
