#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
using namespace std;
const long long MOD = 1e9+7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
//typedef boost::multiprecision::cpp_int bigint;

vector<ll> tenpow;

ll conv(vector<ll> V) {
	ll ans = 0;
	for (ll n = 0; n < V.size(); n++)ans += tenpow[n] * V[n];
	return ans;
}

ll calc(vector<ll> V) {
	ll n = V.size();
	n--;
	if (n == 0) {
		if (V.back() == 0)return 0;
		else return 1;
	}
	else if (V[n] == 0) {
		V.erase(V.begin() + n);
		return calc(V);
	}
	else {
		vector<ll> temp(n, 9);
		ll ans = calc(temp) * V[n];
		ll vn = V[n];
		V.erase(V.begin() + n);
		if (vn == 1)ans += conv(V) + 1;
		else ans += tenpow[n];
		ans += calc(V);
		return ans;
	}
}

int main() {
	tenpow.resize(12,1);
	for (ll n = 1; n < 12; n++) {
		tenpow[n] = tenpow[n - 1] * 10;
	}
	ll N;
	cin >> N;
	vector<ll> V(12);
	for (ll n = 0; n < 12; n++) {
		V[n] = N % 10;
		N /= 10;
	}
	cout << calc(V) << endl;
	return 0;
}