#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long long LL;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

LL N, M;
vector<pll> querys;

LL get(LL a, LL b, VLL& seg, LL k= 0, LL l = 0, LL r = 0) {
	if (k == 0)return get(a, b, seg, 1, 0, seg.size() / 2 - 1);
	if (b < l || r < a)return 1e15;
	if (a <= l && r <= b)return seg[k];
	else return min(
		get(a, b, seg, 2 * k, l, (l + r) / 2),
		get(a,b,seg,2*k+1,(l+r)/2+1,r)
	);
}

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	cin >> N >> M;
	querys.resize(M);
	for (LL m = 0; m < M; m++) {
		pll& q = querys[m];
		cin >> q.first >> q.second;
	}
	LL RN = 1;
	while (RN < N + 2) {
		RN *= 2;
	}
	VLL vec(2 * RN, 0);
	for (LL m = 0; m < M; m++) {
		pll& q = querys[m];
		vec[RN + q.first]++;
		vec[RN + q.second + 1]--;
	}
	for (LL n = 1; n <= N; n++) {
		vec[RN+n] += vec[RN+n - 1];
	}
	for (LL n = RN - 1; n >= 1; n--) {
		vec[n] = min(vec[2 * n], vec[2 * n + 1]);
	}
	VLL ans;
	for (LL m = 0; m < M; m++) {
		pll& q = querys[m];
		LL a = q.first,b = q.second;
		LL res = get(a, b, vec);
		if (res > 1)ans.push_back(m + 1);
	}
	cout << ans.size() << "\n";
	for (LL a : ans) {
		cout << a << "\n";
	}
	return 0;
}
