#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	ll N, M;
	cin >> N >> M;
	VLL ans(N, 0);
	VLL target(M, 0);
	for (ll m = 0; m < M; m++) {
		cin >> target[m];
		target[m]--;
	}
	for (ll m = 0; m < M; m++) {
		ll X = 0;
		for (ll n = 0; n < N; n++) {
			ll a;
			cin >> a;
			a--;
			if (a == target[m])ans[n]++;
			else X++;
		}
		ans[target[m]] += X;
	}
	for (ll n = 0; n < N; n++) {
		cout << ans[n] << "\n";
	}
	return 0;
}
