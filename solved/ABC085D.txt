#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	ll N, H;
	cin >> N >> H;
	vector<pll> at;
	at.reserve(2 * N);
	for (ll n = 0; n < N; n++) {
		ll a, b;
		cin >> a >> b;
		at.push_back(pll(a, 0));
		at.push_back(pll(b, 1));
	}
	sort(at.begin(), at.end(), [](pll a,pll b) {
		if (a.first != b.first)return a.first > b.first;
		else return a.second > b.second;
	});
	ll ans = 0;
	for (ll n = 0; n < 2 * N; n++) {
		if (at[n].second == 1) {
			H -= at[n].first;
			ans++;
		}
		else {
			ll time = ceil((ld)H / at[n].first);
			H -= time * at[n].first;
			ans += time;
		}
		if (H <= 0)break;
	}
	cout << ans << "\n";
	return 0;
}