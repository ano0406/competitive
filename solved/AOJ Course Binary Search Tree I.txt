#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>

using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

struct node {
	ll val;
	node* l;
	node* r;
	node(ll v) {
		val = v;
		l = NULL;
		r = NULL;
	}
};

void insert(node* T, ll x) {
	node* p = NULL;
	node* cur = T;
	while (cur != NULL) {
		p = cur;
		if (x < cur->val)cur = cur->l;
		else cur = cur->r;
	}
	if (x < p->val)p->l = new node(x);
	else p->r = new node(x);
	return;
}

void inoprint(node* t) {
	if (t == NULL)return;
	inoprint(t->l);
	cout << " " << t->val;
	inoprint(t->r);
	return;
}

void preoprint(node* t) {
	if (t == NULL)return;
	cout << " " << t->val;
	preoprint(t->l);
	preoprint(t->r);
	return;
}

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	ll N;
	cin >> N;
	string ins;
	ll x;
	cin >> ins >> x;
	node* root = new node(x);
	for (ll n = 1; n < N; n++) {
		cin >> ins;
		if (ins[0] == 'i') {
			cin >> x;
			insert(root, x);
		}
		else {
			inoprint(root);
			cout << "\n";
			preoprint(root);
			cout << "\n";
		}
	}
	return 0;
}