#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>
#include <bitset>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

ll N,B;
VLL A, L, D;

VVLL modpow(VVLL V, ll p) {
	if (p == 0) {
		VVLL res(2, VLL(2, 0));
		res[0][0] = 1;
		res[1][1] = 1;
		return res;
	}
	if (p == 1)return V;
	VVLL res = modpow(V, p / 2);
	VVLL res2;
	res2.resize(2, VLL(2, 0));
	for (ll y = 0; y < 2; y++) {
		for (ll x = 0; x < 2; x++) {
			for (ll k = 0; k < 2; k++) {
				res2[y][x] += res[y][k] * res[k][x];
			}
			res2[y][x] %= B;
		}
	}
	if (p % 2 == 0)return res2;
	VVLL res3;
	res3.resize(2, VLL(2, 0));
	for (ll y = 0; y < 2; y++) {
		for (ll x = 0; x < 2; x++) {
			for (ll k = 0; k < 2; k++) {
				res3[y][x] += res2[y][k] * V[k][x];
			}
			res3[y][x] %= B;
		}
	}
	return res3;
}

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	cin >> N;
	A.resize(N);
	L.resize(N);
	D.resize(N);
	for (ll n = 0; n < N; n++) {
		cin >> A[n];
		cin >> L[n];
		ll d = 9;
		for (ll t = 1;; t++) {
			if (A[n] <= d) {
				D[n] = t;
				break;
			}
			d = d * 10 + 9;
		}
	}
	cin >> B;
	ll ans = 0;
	for (ll n = 0; n < N; n++) {
		ll d = 1;
		for (ll t = 0; t < D[n]; t++) {
			d = (d * 10) % B;
		}
		VVLL base;
		base.resize(2, VLL(2, 0));
		base[0][0] = d;
		base[0][1] = A[n]%B;
		base[1][1] = 1;
		VVLL res = modpow(base, L[n]);
		ans = (ans * res[0][0] + res[0][1]) % B;
	}
	cout << ans << "\n";
	return 0;
}