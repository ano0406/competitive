#include <iostream>
#include <algorithm>
#include <map>
#include <set>
#include <vector>
#include <queue>
#include <math.h>

using namespace std;
typedef pair<int, int> pii;
typedef pair<int, long double> pild;
typedef pair<long double, int> pldi;

void solve();

int main() {
	solve();
	return 0;
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
//素数判定
//O(√n)
bool isPrime(int n) {
	for (int i = 2; i <= floor(sqrt(n)); i++) {
		if (n%i == 0)return false;
	}
	return true;
}

//n未満の自然数のでのエラトステネスの篩
//arr[n]=true -> 素数
//O(nlog(logn)) , 実質O(n)
bool* eratosthenes(int n) {
	bool* array = new bool[n];
	for (int i = 0; i < n; i++)array[i] = true;
	for (int i = 2; i < n; i++) {
		if (!array[i])continue;
		int t = 2*i;
		while (t < n) {
			array[t] = false;
			t += i;
		}
	}
	return array;
}

long int M = 1000000007;

void solve() {
	int N;
	cin >> N;
	bool* arr = eratosthenes(N+1);
	long int ans = 1;
	for (int p = N; p >= 2; p--) {   //各素数p
		if (!arr[p])continue;
		long int c = 0;   //pで何回割れる?
		long int t = p;
		while (t <= N) {
			c += floor((double)N/t);
			t *= p;
		}
		c++;
		t = ans;
		for (int cc = 1; cc < c; cc++) {
			ans = (ans + t) % M;
		}
	}
	cout << ans << endl;
	cin >> N;
	delete arr;
	return;
}