#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
using namespace std;

int N, K;
vector<int> A;
vector<vector<int>> DP;

int main() {
	cin >> N >> K;
	A.resize(N + 1);
	DP.resize(N + 1, vector<int>(K, 0));
	for (int n = 1; n <= N; n++)cin >> A[n];
	DP[0][0] = 1;
	for (int n = 1; n <= N; n++) {
		DP[n][0] = 1;
		for (int k = 1; k < K; k++) {
			DP[n][k] = DP[n - 1][k];
			if (k - A[n] >= 0)DP[n][k] += DP[n-1][k - A[n]];
		}
	}
	int counter = 0;
	for (int n = 1; n <= N; n++) {
		if (A[n] >= K) {
			counter++;
			continue;
		}
		vector<int> DPDP;
		DPDP.resize(K);
		DPDP[0] = 1;
		for (int k = 1; k < K; k++) {
			DPDP[k] = DP[N][k];
			if (k - A[n] >= 0)DPDP[k] -= DPDP[k - A[n]];
		}
		bool flag = false;
		for (int k = K-1; k >= K - A[n]; k--) {
			if (DPDP[k] > 0) {
				flag = true;
				break;
			}
		}
		if (flag)counter++;
	}
	cout << N - counter << endl;
	return 0;
}