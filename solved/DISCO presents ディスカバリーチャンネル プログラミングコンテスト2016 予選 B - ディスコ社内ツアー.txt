#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 998244353;//1e9 + 7;
typedef long long LL;
typedef long double LD;
typedef pair<LL, LL> PLL;
typedef pair<LD, LL> PDL;
typedef pair<LD, LD> PDD;
typedef vector<LL> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

template<class Rng>
void in(Rng& x) {
	cin >> x;
}

template<class T1, class T2>
void in(pair<T1, T2>& p) {
	in(p.first);
	in(p.second);
}

template<class Rng>
void in(vector<Rng>& v, LL st = -1, LL en = -1) {
	if (st == -1) {
		st = 0;
		en = v.size() - 1;
	}
	for (LL n = st; n <= en; n++) {
		in(v[n]);
	}
}

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	LL N;
	cin >> N;
	VVLL rooms(1e5 + 1);
	for (LL n = 0; n < N; n++) {
		LL a;
		cin >> a;
		rooms[a].push_back(n);
	}
	LL ans = 0;
	LL prev = -1;
	for (LL f = 1; f <= 1e5; f++) {
		if (rooms[f].size() == 0)continue;
		else if (rooms[f].size() == 1) {
			if (prev >= rooms[f][0]) {
				ans++;
			}
			prev = rooms[f][0];
		}
		else {
			VLL& v = rooms[f];
			LL s = -1, e = v.size();
			while (e - s > 1) {
				LL m = (e + s) / 2;
				if (v[m] < prev)s = m;
				else e = m;
			}
			if (s == -1) {
				prev = v.back();
			}
			else{
				ans++;
				prev = v[s];
			}
		}
	}
	cout << (prev == 0?ans:ans+1) << "\n";
	return 0;
}
