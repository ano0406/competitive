void solve();

int main() {
	solve();
	return 0;
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>

using namespace std;

template<class T>
class BIT {
public:
	vector<T>* array;
	long long N, RN = 1;   //実データ数、ごみデータ含めたデータ数
	BIT(long long n) {
		while (RN < n)RN *= 2;
		array = new vector<T>;
		array->resize(RN + 1, 0);
	}
	//a0+a1+...+anを求める
	T get(long long n) {
		n++;
		T s = 0;
		while (n > 0) {
			s = s + array->at(n);
			n -= n & (-n);
		}
		return s;
	}
	//anに+x
	void add(int n, T x) {
		n++;
		while (n <= RN) {
			array->at(n) += x;
			n += n & (-n);
		}
	}
};

int N;
vector<int> V;
typedef pair<int, int> pii;
vector<pii> A;

void solve() {
	cin >> N;
	V.resize(N);
	A.resize(N);
	for (int n = 0; n < N; n++) {
		cin >> V[n];
		A[n] = pii(V[n], n);
	}
	sort(A.begin(), A.end());
	for (int n = 0; n < N; n++) {
		V[A[n].second] = n;
	}
	BIT<long long> bit(N);
	long long ans = 0;
	for (int n = 0; n < N; n++) {
		ans += n - bit.get(V[n]);
		bit.add(V[n], 1);
	}
	cout << ans << endl;
	return;
}