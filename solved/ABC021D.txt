void solve();

int main() {
	solve();
	return 0;
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
#include <iostream>
#include <vector>
#include <algorithm>
#include <math.h>
using namespace std;
typedef pair<int, int> pii;
typedef long double ld;
typedef long long ll;

void solve() {
	int NN, K;
	cin >> NN >> K;
	int N = max(NN-1+K,NN-1),M = 1e9+7;
	vector<long long> inv, sinv;   //inv[i]*i%M = 1,sinv[i]*(i!)%M = 1(0<=i<=N)
	inv.resize(N + 1);
	sinv.resize(N + 1);
	inv[1] = 1;
	sinv[0] = 1;
	sinv[1] = 1;
	for (int n = 2; n <= N; n++) {
		inv[n] = M - (inv[M%n]*(M/n)) % M;
		sinv[n] = (sinv[n - 1] * inv[n]) % M;
	}
	vector<long long> s;
	s.resize(N + 1);
	s[0] = 1;
	s[1] = 1;
	for (int n = 2; n <= N; n++)s[n] = (s[n - 1] * n) % M;
	long long ans = (s[NN-1+K] * sinv[NN-1]) % M;
	ans = (ans * sinv[K]) % M;
	cout << ans << endl;
	return;
}