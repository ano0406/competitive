#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
using namespace std;
long long MOD = 1e9 + 7;

long long DP[1 << 16];
long long N;
vector<vector<long long>> A;

long long dp(long long code) {
	if (DP[code] != LLONG_MIN)return DP[code];
	//分割
	long long ans = LLONG_MIN;
	//立っている1の数を数える
	long long sub = code;
	sub = ((sub & 0xAAAA) >> 1) + (sub & 0x5555);
	sub = ((sub & 0xCCCC) >> 2) + (sub & 0x3333);
	sub = ((sub & 0xF0F0) >> 4) + (sub & 0x0F0F);
	sub = ((sub & 0xFF00) >> 8) + (sub & 0x00FF);
	if (sub <= 1) {
		DP[code] = 0;
		return 0;
	}
	else if (sub == 2) {
		DP[code] = 0;
		vector<long long > c;
		for (long long s = 0; s < N; s++) {
			if ((code >> s) & 1)c.push_back(s);
		}
		DP[code] = max((long long)0, A[c[0]][c[1]]);
		return DP[code];
	}
	//ある自然数集合Sの部分集合を降順に列挙
	sub = code;
	ans = LLONG_MIN;
	do {
		if(sub != code && sub != 0)ans = max(ans, dp(sub)+dp(code-sub));
		sub = (sub - 1) & code;
	} while (sub != code);
	//全員で1グループの時
	long long sum = 0;
	for (long long s = 0; s < N; s++) {
		if((code>>s)&1){
			for (long long t = 0; t < N; t++) {
				if (!((code >> t) & 1))continue;
				sum += A[s][t];
			}
		}
	}
	ans = max(ans, sum >> 1);
	DP[code] = ans;
	return DP[code];
}

int main() {
	cin >> N;
	A.resize(N, vector<long long>(N, 0));
	for (long long t = 0; t < N; t++) {
		for (long long s = 0; s < N; s++) {
			cin >> A[s][t];
		}
	}
	for (long long code = 0; code < (1 << N); code++) {
		DP[code] = LLONG_MIN;
	}
	cout << dp((1 << N) - 1) << endl;
	return 0;
}