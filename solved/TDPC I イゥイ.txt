void solve();

int main() {
	solve();
	return 0;
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
#include <iostream>
#include <algorithm>
#include <vector>
#include <set>
#include <queue>
#include <functional>
using namespace std;

string S;
typedef pair<int, string> pis;
pis dp[300][300];
int N;

void solve() {
	cin >> S;
	N = S.size();
	for (int i = 0; i < N; i++) {
		dp[i][i] = pis(0,S.substr(i,1));
	}
	for (int d = 1; d < N; d++) {
		for (int i = 0; i + d < N; i++) {
			string sm;
			int im = 0;
			for (int m = 0; m < d; m++) {
				string stemp = dp[i][i + m].second + dp[i + m+1][i + d].second;
				int l = dp[i][i + m].second.size();
				int itemp = dp[i][i + m].first + dp[i + m+1][i + d].first;
				if (stemp.size() >= 3) {
					if(l >= 1){
						if (stemp[l - 1] == 'i' && stemp[l] == 'w' && stemp[l + 1] == 'i') {
							auto point = stemp.find("iwi");
							stemp.erase(stemp.begin() + point, stemp.begin() + point + 3);
							itemp++;
						}
					}
					else if (l >= 2) {
						if (stemp[l - 2] == 'i' && stemp[l - 1] == 'w' && stemp[l] == 'i') {
							auto point = stemp.find("iwi");
							stemp.erase(stemp.begin() + point, stemp.begin() + point + 3);
							itemp++;
						}
					}
				}
				if (im <= itemp) {
					sm = stemp;
					im = itemp;
				}
			}
			dp[i][i + d] = pis(im,sm);
		}
	}
	cout << dp[0][N - 1].first << endl;
	return;
}