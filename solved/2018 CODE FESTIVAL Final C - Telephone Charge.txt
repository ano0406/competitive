void 
solve();

int main() {
	solve();
	return 0;
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

typedef pair<int, int> pii;
int N;
vector<pii> AB;
int M;
vector<int> ans;

vector<int> D, E;

void solve() {
	cin >> N;
	AB.resize(N+2);
	AB[0] = pii(0, 1e9 + 1);
	for (int n = 1; n <= N; n++) {
		cin >> AB[n].first >> AB[n].second;
	}
	AB[N + 1] = pii(1e9 + 2, 2e9+1);
	sort(AB.begin(), AB.end());
	D.resize(N+2); E.resize(N+2);
	D[0] = AB[0].second - AB[0].first;
	for (int n = 1; n <= N + 1; n++) {
		D[n] = min(D[n-1],AB[n].second-AB[n].first);
	}
	E[N + 1] = AB[N + 1].second;
	for (int n = N; n >= 0; n--) {
		E[n] = min(E[n + 1], AB[n].second);
	}
	cin >> M;
	ans.resize(M);
	for (int m = 0; m < M; m++) {
		int T;
		cin >> T;
		int s = 0, e = N + 1;
		while (e - s > 1) {
			int m = (s + e) / 2;
			if (AB[m].first <= T)s = m;
			else e = m;
		}
		ans[m] = min(D[e - 1] + T, E[e]);
	}
	for (int m = 0; m < M; m++)cout << ans[m] << endl;
	return;
}