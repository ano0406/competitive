#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
using namespace std;
int MOD = 1e9 + 7;

template< typename flow_t >
struct Dinic {
	const flow_t INF;

	struct edge {
		int to;
		flow_t cap;
		int rev;
		bool isrev;
		int idx;
	};

	vector< vector< edge > > graph;
	vector< int > min_cost, iter;

	Dinic(int V) : INF(numeric_limits< flow_t >::max()), graph(V) {}

	void add_edge(int from, int to, flow_t cap, int idx = -1) {
		edge a = { to, cap, (int)graph[to].size(), false, idx };
		graph[from].emplace_back(a);
		a = { from, 0, (int)graph[from].size() - 1, true, idx };
		graph[to].emplace_back(a);
	}

	bool bfs(int s, int t) {
		min_cost.assign(graph.size(), -1);
		queue< int > que;
		min_cost[s] = 0;
		que.push(s);
		while (!que.empty() && min_cost[t] == -1) {
			int p = que.front();
			que.pop();
			for (auto& e : graph[p]) {
				if (e.cap > 0 && min_cost[e.to] == -1) {
					min_cost[e.to] = min_cost[p] + 1;
					que.push(e.to);
				}
			}
		}
		return min_cost[t] != -1;
	}

	flow_t dfs(int idx, const int t, flow_t flow) {
		if (idx == t) return flow;
		for (int& i = iter[idx]; i < graph[idx].size(); i++) {
			edge& e = graph[idx][i];
			if (e.cap > 0 && min_cost[idx] < min_cost[e.to]) {
				flow_t d = dfs(e.to, t, min(flow, e.cap));
				if (d > 0) {
					e.cap -= d;
					graph[e.to][e.rev].cap += d;
					return d;
				}
			}
		}
		return 0;
	}

	flow_t max_flow(int s, int t) {
		flow_t flow = 0;
		while (bfs(s, t)) {
			iter.assign(graph.size(), 0);
			flow_t f = 0;
			while ((f = dfs(s, t, INF)) > 0) flow += f;
		}
		return flow;
	}

	void output() {
		for (int i = 0; i < graph.size(); i++) {
			for (auto& e : graph[i]) {
				if (e.isrev) continue;
				auto& rev_e = graph[e.to][e.rev];
				cout << i << "->" << e.to << " (flow: " << rev_e.cap << "/" << e.cap + rev_e.cap << ")" << endl;
			}
		}
	}
};

long long N,M,X;
typedef pair<long long, long long> pll;
vector<vector<pll>> G;

bool check(long double x) {
	Dinic<long long> D(N);
	for (long long s = 0; s < N; s++) {
		for (pll edge : G[s]) {
			D.add_edge(s, edge.first, floorl((long double)edge.second / x));
		}
	}
	long long maxflow = D.max_flow(0,N-1);
	if (maxflow < X)return false;
	else return true;
}

int main() {
	cin >> N >> M >> X;
	G.resize(N);
	for (long long m = 0; m < M; m++) {
		long long s, t, w;
		cin >> s >> t >> w;
		s--; t--;
		G[s].push_back(pll(t, w));
	}
	long double s = 0, e = LLONG_MAX;
	for (long long t = 0; t < 100; t++) {
		long double m = (e + s) / 2;
		if (check(m))s = m;
		else e = m;
	}
	cout << setprecision(12) << (e + s) / 2 * X << endl;
	return 0;
}