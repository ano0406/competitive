#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
using namespace std;
const long long MOD = 1e9+7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
//typedef boost::multiprecision::cpp_int bigint;

ll N;
set<string> words;

int main() {
	cin >> N;
	string S;
	cin >> S;
	words.insert(S);
	for (ll n = 1; n < N; n++) {
		string news;
		cin >> news;
		if (words.find(news) != words.end()) {
			cout << "No" << endl;
			return 0;
		}
		words.insert(news);
		if(S.back() != news[0]) {
			cout << "No" << endl;
			return 0;
		}
		S = news;
	}
	cout << "Yes" << endl;
	return 0;
}
