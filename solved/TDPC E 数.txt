#include <iostream>
#include <math.h>
#include <algorithm>
#include <vector>
#include <iomanip>
using namespace std;

void solve();

int main() {
	solve();
	return 0;
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////

int D,l;
int N[10001];
long long dp[10001][2][100];

int mod(int n, int m) {   //n%m
	while (n < m) {
		n += m;
	}
	return n % m;
}

void solve() {
	cin >> D;
	string NN;
	cin >> NN;
	for (int n = 0; n < NN.size(); n++)N[n] = NN[n] - '0';
	l = NN.size();
	for (int n = 0; n < l; n++) {
		for (int f = 0; f < 2; f++){
			for(int d = 0;d < D;d++)dp[n][f][d] = 0;
		}
	}
	for (int m = 0; m < N[0]; m++)
		dp[0][1][mod(m,D)] += 1;
	dp[0][0][mod(N[0],D)] += 1;
	for (int n = 1; n < l; n++) {
		for (int m = 0; m < D; m++) {
			for (int d = 0; d < 10; d++)dp[n][1][m] += dp[n - 1][1][mod(m - d , D)];
			for (int d = 0; d < N[n]; d++)dp[n][1][m] += dp[n - 1][0][mod(m - d, D)];
			dp[n][0][m] += dp[n - 1][0][mod(m - N[n], D)];
			dp[n][1][m] %= 1000000007;
			dp[n][0][m] %= 1000000007;
		}
	}
	cout << (dp[l - 1][0][0] + dp[l - 1][1][0] - 1) % 1000000007 << endl;
	return;
}