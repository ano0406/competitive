void solve();

int main() {
	solve();
	return 0;
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
#include <iostream>
#include <algorithm>
#include <vector>
#include <set>
#include <queue>
#include <functional>
#include <map>
#include <string>
#include <boost/multiprecision/cpp_int.hpp>
#include <limits.h>

using namespace std;
using namespace boost::multiprecision;

//重み付きグラフ
//距離の部分をテンプレートに
template<class T>
class wGraph {
public:
	int N;
	vector<multimap<int, T> >* E;
	wGraph(int n,T i) {
		N = n;
		E = new vector<multimap<int, T> >;
		E->resize(N);
		INF = i;
	}
	wGraph() {
	}
	void constructor(int n, T i) {
		N = n;
		E = new vector<multimap<int, T> >;
		E->resize(N);
		INF = i;
	}
	~wGraph() {
		delete E;
	}
	void addEdge(int a, int b, T c) {
		E->at(a).emplace(b, c);
	}
	bool isConnected(int a, int b) {
		return (E->at(a).find(b) != E->at(a).end());
	}
	T INF;
};

//ダイクストラする
//グラフ本体、始点、保存用vector
//到達不可能はg.INF
//O(ElogV)
template<class T>
void  dijkstra(wGraph<T>& g, int s,vector<T>& v) {
	v.resize(g.N);
	for (int i = 0; i < g.N; i++) {
		v[i] = g.INF;
	}
	typedef pair<T, int> t;
	priority_queue<t, vector<t>, greater<t>> q;
	q.push(t(0, s));
	while (!q.empty()) {
		t e = q.top();
		q.pop();
		if (v[e.second] != g.INF && v[e.second] <= e.first)continue;
		v[e.second] = e.first;
		for (auto itr = g.E->at(e.second).begin(); itr != g.E->at(e.second).end(); itr++) {
			q.push(t(e.first + (*itr).second, (*itr).first));
		}
	}
	return;
}

int N, M, T;
wGraph<long long> G;
wGraph<long long> GG;
vector<long long> V;
vector<long long> VV;
vector<int> A;

void solve() {
	cin >> N >> M >> T;
	A.resize(N);
	for (int n = 0; n < N; n++)cin >> A[n];
	G.constructor(N,LLONG_MAX);
	GG.constructor(N, LLONG_MAX);
	for(int m = 0;m < M;m++){
		int s, e, c;
		cin >> s >> e >> c;
		s--; e--;
		G.addEdge(s, e, c);
		GG.addEdge(e,s,c);
	}
	long long ans = 0;
	dijkstra(G, 0, V);
	dijkstra(GG, 0, VV);
	for (int n = 0; n < N; n++) {
		if (V[n] == G.INF)continue;
		if (VV[n] == G.INF)continue;
		if (T - V[n] - VV[n] < 0)continue;
		ans = max(ans, (T - V[n]-VV[n])*A[n]);
	}
	cout << ans << endl;
	return;
}