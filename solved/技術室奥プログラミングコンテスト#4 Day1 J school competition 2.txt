void solve();

int main() {
	solve();
	return 0;
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
using namespace std;

int N, M;
long long AA = 0, BB = 0;
vector<long long> A, B;
vector<long long> As, Bs;


void solve() {
	cin >> N >> M;
	A.resize(N); B.resize(M);
	for (int n = 0; n < N; n++) {
		cin >> A[n];
		AA += A[n];
	}
	for (int m = 0; m < M; m++) {
		cin >> B[m];
		BB += B[m];
	}
	if (AA <= BB) {
		cout << 0 << endl;
		return;
	}
	for (int code = 1; code < (1 << N)-1; code++) {
		long long temp = 0;
		for (int i = 0; i < N; i++) {
			if ((code & 1 << i) != 0)temp += A[i];
		}
		if (2 * temp - AA > 0)As.push_back(temp);
	}
	for (int code = 1; code < (1 << M) - 1; code++) {
		long long temp = 0;
		for (int i = 0; i < M; i++) {
			if ((code & 1 << i) != 0)temp += B[i];
		}
		if (2 * temp - BB > 0)Bs.push_back(temp);
	}
	sort(Bs.begin(), Bs.end());
	long double ans = 0;
	for (int a = 0; a < As.size(); a++) {
		long long temp = 0;
		long long s = -1, e = Bs.size();
		while (e - s > 1) {
			int m = (e + s) / 2;
			if (As[a] > Bs[m])s = m;
			else e = m;
		}
		temp = e;
		s = -1, e = Bs.size();
		while (e - s > 1) {
			int m = (e + s) / 2;
			if (As[a] - AA + BB >= Bs[m])s = m;
			else e = m;
		}
		temp -= e;
		ans = max(ans, (long double)temp / (long double)Bs.size());
	}
	cout << setprecision(8) << ans << endl;
	return;
}
