#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
using namespace std;
long long MOD = 1e9 + 7;

vector<vector<long long>> childs;
typedef pair<long long, long long> pll;
long long N;
vector<long long> X;
vector<long long> DP;

int main() {
	cin >> N;
	childs.resize(N);
	X.resize(N);
	for (long long n = 1; n < N; n++) {
		long long p;
		cin >> p;
		p--;
		childs[p].push_back(n);
	}
	for (long long n = 0; n < N; n++)cin >> X[n];
	DP.resize(N);
	for (long long n = N - 1; n >= 0; n--) {
		if (childs[n].size() == 0) {
			DP[n] = 0;
			continue;
		}
		long long sum = 0;
		vector<vector<bool>> DP2;
		DP2.resize(childs[n].size() + 1, vector<bool>(5000 + 1, false));
		DP2[0][0] = true;
		for (long long c = 1; c <= childs[n].size();c++) {
			for (long long w = 5000; w >= 0; w--) {
				if (w >= DP[childs[n][c-1]]) {
					DP2[c][w] = DP2[c][w] | DP2[c - 1][w - DP[childs[n][c - 1]]];
				}
				if (w >= X[childs[n][c-1]]) {
					DP2[c][w] = DP2[c][w] | DP2[c - 1][w - X[childs[n][c - 1]]];

				}
			}
			sum += X[childs[n][c-1]] + DP[childs[n][c-1]];
		}
		long long w = X[n];
		bool flag = false;
		for (; w >= 0; w--) {
			if (DP2.back()[w]) {
				DP[n] = sum - w;
				flag = true;
				break;
			}
		}
		if (!flag) {
			cout << "IMPOSSIBLE" << endl;
			return 0;
		}
	}
	cout << "POSSIBLE" << endl;
	return 0;
}