#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
using namespace std;

template<class T>
void in(vector<T>& V) {
	for (auto itr = V.begin(); itr != V.end(); itr++)cin >> *itr;
	return;
}

template<class T>
void out(vector<T>& V) {
	for (T& itr : V)cout << itr << endl;
	return;
}

void goup(vector<pair<long double, int>>& V, int n) {
	if (n != 0) {
		if (V[2 * n].first < V[2 * n + 1].first)V[n] = V[2 * n + 1];
		else V[n] = V[2 * n];
		goup(V, n / 2);
	}
	return;
}

int main() {
	int N, M;
	vector<pair<long double, int>> A;
	cin >> N >> M;
	int RN = 1;
	while (RN < N)RN *= 2;
	A.resize(RN * 2);
	for (int n = 0; n < N; n++) {
		int a;
		cin >> a;
		A[RN + n] = pair<long double, int>(a, n);
	}
	for (int n = RN - 1; n >= 1; n--) {
		if (A[2 * n].first < A[2 * n + 1].first)A[n] = A[2 * n + 1];
		else A[n] = A[2 * n];
	}
	for (int m = 0; m < M; m++) {
		int minimum = A[1].second;
		A[RN + minimum].first /= 2;
		goup(A,(RN + minimum) / 2);
	}
	long long ans = 0;
	for (int i = RN; i < RN + N; i++) {
		ans += A[i].first;
	}
	cout << ans << endl;
	return 0;
}
