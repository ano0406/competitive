#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
using namespace std;

template<class T>
void in(vector<T>& V) {
	for (auto itr = V.begin(); itr != V.end(); itr++)cin >> *itr;
	return;
}

template<class T>
void out(vector<T>& V) {
	for (T& itr : V)cout << itr << endl;
	return;
}

//ãÛvectorÇóvëfêîNÇÃsegTreeÇ∆ÇµÇƒzÇ≈èâä˙âª
template<class T>
void segTree_init(vector<T>& vec, int N, T z) {
	int RN = 1;
	while (RN < N)RN *= 2;
	vec.resize(2 * RN, z);
}

//vecÇsegTreeÇ∆ÇµÇƒnî‘ñ⁄ÇxÇ…
template<class T>
void segTree_set(vector<T>& vec, int n, T x, function<T(T, T)> f, int k = -1) {
	int RN = (vec.size() + 1) / 2;
	if (k == -1) {
		k = n + RN;
		vec[k] = x;
		segTree_set(vec, n, x, f, k / 2);
	}
	else if (k != 0) {
		vec[k] = f(vec[2 * k], vec[2 * k + 1]);
		segTree_set(vec, n, x, f, k / 2);
	}
}

//vecÇ™segTreeÇÃéûÇÃÅAnî‘ñ⁄ÇÃóvëf
template<class T>
T segTree_at(vector<T>& vec, int n) {
	int RN = (vec.size()) / 2;
	return vec[RN + n];
}

//get [a,b]
template<class T>
T segTree_get(vector<T>& vec, int a, int b, function<T(T, T)> f, T e, int k = 1, int l = 0, int r = -1) {
	if (r == -1)r = vec.size() / 2 - 1;
	if (b < l || r < a)return e;
	else if (a <= l && r <= b)return vec[k];
	else return f(
		segTree_get(vec, a, b, f, e, 2 * k, l, (l + r) / 2),
		segTree_get(vec, a, b, f, e, 2 * k + 1, (l + r) / 2 + 1, r)
	);
}

int N;
vector<int> pos;   //nÇ™Ç«Ç±Ç…Ç†ÇÈÇ©(1-index)
vector<int> seg;
function<int(int, int)> lambda = [](int a, int b) {
	return max(a, b);
};
int RN = 1;

void sett(int k) {
	seg[k] = max(seg[2 * k], seg[2 * k + 1]);
	if (k != 1)sett(k / 2);
}

void set(int n, int x) {
	seg[RN + n] = x;
	sett((RN + n) / 2);
}

int get(int a, int b, int k = 1, int l = 0, int r = RN - 1) {
	if (b < l || r < a)return 0;
	if (a <= l && r <= b)return seg[k];
	return max(get(a, b, 2 * k, l, (l + r) / 2), get(a, b, 2 * k + 1, (l + r) / 2 + 1, r));
}

int main() {
	cin >> N;
	pos.resize(N + 1);
	for (int n = 1; n <= N; n++) {
		int a;
		cin >> a;
		pos[a] = n;
	}
	while (RN < N + 2)RN *= 2;
	seg.resize(RN * 2, 0);
	long long ans = 0;
	::set(0, 1);
	::set(N + 1, 1);
	for (int n = 1; n <= N; n++) {
		//ç∂
		int s = 0, e = pos[n];
		while (e - s > 1) {
			int m = (e + s) / 2;
			if (get(m, pos[n]) == 1) {
				s = m;
			}
			else e = m;
		}
		long long left = pos[n] - s;
		s = pos[n], e = N + 1;
		while (e - s > 1) {
			int m = (e + s) / 2;
			if (get(pos[n], m) == 1) {
				e = m;
			}
			else s = m;
		}
		long long right = e - pos[n];
		ans += n * left * right;
		::set(pos[n], 1);
	}
	std::cout << ans << endl;
	return 0;
}
