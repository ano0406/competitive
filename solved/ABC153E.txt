#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long LL;
typedef long double LD;
typedef pair<LL, LL> PLL;
typedef pair<LD, LL> PDL;
typedef pair<LD, LD> PDD;
typedef vector<LL> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

template<class T>
void in(T& x) {
	cin >> x;
}

template<class T1,class T2>
void in(pair<T1, T2>& p) {
	in(p.first);
	in(p.second);
}

template<class T>
void in(vector<T>& v,LL st=-1,LL en=-1) {
	if (st == -1) {
		st = 0;
		en = v.size() - 1;
	}
	for (LL n = st; n <= en; n++) {
		in(v[n]);
	}
}

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	LL H, N;
	cin >> H >> N;
	VLL at(N);
	VLL da(N);
	for (LL n = 0; n < N; n++) {
		cin >> at[n] >> da[n];
	}
	VLL DP(H + 1, 1e15);
	DP[0] = 0;
	for (LL n = 0; n < N; n++) {
		for (LL h = 1; h <= H; h++) {
			if (h >= at[n]) {
				if (DP[h - at[n]] != 1e15) {
					DP[h] = min(DP[h], DP[h - at[n]] + da[n]);
				}
			}
			else DP[h] = min(DP[h], da[n]);
		}
	}
	cout << DP[H] << "\n";
	return 0;
}
