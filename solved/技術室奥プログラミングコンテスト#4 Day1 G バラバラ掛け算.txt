void solve();

int main() {
	solve();
	return 0;
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
using namespace std;

template<class T>
T pow(T base, long long p, T mod = -1) {
	if (p == 0)return 1;
	if (p == 1)return mod == -1 ? base % mod : base;
	int b = 1, c = 0;
	while (b <= p) {
		b *= 2;
		c++;
	}
	T* arr2 = new T[c];   //T[n] = T^(2^n)
	arr2[0] = mod == -1 ? base % mod : base;
	for (int n = 1; n < c; n++) {
		if (mod != -1)arr2[n] = (arr2[n - 1] * arr2[n - 1]) % mod;
		else arr2[n] = arr2[n - 1] * arr2[n - 1];
	}
	c--;
	T ans = arr2[c];
	b /= 2;
	p -= b;
	while (p > 0) {
		c--;
		b /= 2;
		if (p >= b) {
			if (mod != -1)ans = (ans * arr2[c]) % mod;
			else ans = ans * arr2[c];
			p -= b;
		}
	}
	return ans;
}

long long MOD = 1e9 + 7;

void solve() {
	int Q;
	cin >> Q;
	for (int q = 0; q < Q; q++) {
		long long N;
		cin >> N;
		if (N <= 4) {
			cout << N << " ";
			continue;
		}
		long long n = N / 3;
		long long ans;
		if (N % 3 == 0) {
			ans = pow((long long)3, n % (MOD - 1), MOD);
		}
		else if (N % 3 == 1) {
			ans = 4 * pow((long long)3, (n - 1) % (MOD - 1), MOD);
			ans %= MOD;
		}
		else {
			ans = 2 * pow((long long)3, n % (MOD - 1), MOD);
			ans %= MOD;
		}
		cout << ans << " ";
	}
	return;
}
