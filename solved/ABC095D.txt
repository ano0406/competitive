#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
using namespace std;
long long MOD = 1e9 + 7;

int N;
long long C;
struct sushi {
	long long x, v;
};
vector<sushi> sushis;
vector<long long> cwisev, uncwisev;
vector<long long> VV;

long long cwise() {
	cwisev.resize(N + 1);
	cwisev[0] = 0;
	VV.resize(N + 1,0);
	long long vsum = 0;
	long long ans = 0;
	for (int n = 1; n <= N; n++) {
		vsum += sushis[n].v;
		cwisev[n] = vsum - sushis[n].x;
		ans = max(ans, cwisev[n]);
		VV[n] = vsum;
	}
	return ans;
}

long long uncwise() {
	uncwisev.resize(N + 1);
	long long vsum = 0;
	long long ans = 0;
	for (int n = N; n >= 1; n--) {
		vsum += sushis[n].v;
		uncwisev[n] = vsum - (C - sushis[n].x);
		ans = max(ans, uncwisev[n]);
	}
	return ans;
}

long long cwiseuncwise() {
	long long ans = 0;
	long long mun = 0;
	for (int t = N-1; t > 0; t--) {
		long long tempans = VV[t] - 2 * sushis[t].x;
		mun = max(mun, uncwisev[t + 1]);
		tempans += mun;
		ans = max(ans, tempans);
	}
	return ans;
}

long long uncwisecwise() {
	long long ans = 0;
	long long mun = 0;
	for (int t = 2; t <= N; t++) {
		long long tempans = VV[N] - VV[t - 1] - 2 * (C - sushis[t].x);
		mun = max(mun, cwisev[t - 1]);
		tempans += mun;
		ans = max(ans, tempans);
	}
	return ans;
}

int main() {
	cin >> N >> C;
	sushis.resize(N+1);
	for (int n = 1; n <= N; n++) {
		cin >> sushis[n].x >> sushis[n].v;
	}
	long long ans = cwise();
	ans = max(ans, uncwise());
	ans = max(ans, cwiseuncwise());
	ans = max(ans, uncwisecwise());
	cout << ans << endl;
	return 0;
}
