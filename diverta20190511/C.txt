void solve();

int main() {
	solve();
	return 0;
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
#include <iostream>
#include <algorithm>
#include <vector>
#include <set>
#include <queue>
#include <functional>
#include <map>
#include <string>
#include <boost/multiprecision/cpp_int.hpp>
#include <limits.h>

using namespace std;
using namespace boost::multiprecision;

vector<string> S;
vector<int> num;
int a, b, c;
int N;
int sum = 0;

void solve() {
	cin >> N;
	for (int n = 0; n < N; n++) {
		string s;
		cin >> s;
		S.push_back(s);
		num.push_back(0);
		for (int p = 0; p < s.size() - 1; p++) {
			if (s[p] == 'A' && s[p + 1] == 'B')num[n]++;
		}
		sum += num[n];
		if (s[s.size() - 1] == 'A' && s[0] == 'B') {
			a++;
			b++;
		}
		else if (s[0] == 'B')a++;
		else if (s[s.size() - 1] == 'A')b++;
	}
	if (a == b)cout << min(a, b) + c + sum << endl;
	else cout << min(a, b) + c  + sum << endl;
	return;
}