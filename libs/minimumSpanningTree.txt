//重み付きグラフGを受け取り、最小全域木の重みを返す
//E:最小全域木に含まれる辺
//need:UnionFind
template<class T>
T minimumSpanningTree(WeightedGraph<T>& G, vector<Gedge<T>>& E)
{
	int N = G.size();
	vector<Gedge<T>> edges;
	for (int n = 0; n < N; n++)
	{
		for (auto& e : G[n])
		{
			edges.push_back(e);
		}
	}
	sort(edges.begin(), edges.end(), [](Gedge<T>& a, Gedge<T>& b) {
		return a.cost < b.cost;
	});
	unionFind UF(N);
	T ans = 0;
	for (Gedge<T>& e : edges)
	{
		int s = e.src;
		int t = e.to;
		if (UF.parent(s) != UF.parent(t))
		{
			ans += e.cost;
			UF.unit(s, t);
			E.push_back(e);
		}
	}
	return ans;
}
