//到達不可能->INF
template<class T>
void dijkstra(WeightedGraph<T>& G, LL start,vector<T>& res) {
	res.resize(G.size(),INF);
	res[start] = 0;
	typedef pair<T, LL> P;
	priority_queue<P, vector<P>, greater<P>> q;
	q.push(P(0, start));
	while (!q.empty()) {
		LL cur = q.top().second;
		T cost = q.top().first;
		q.pop();
		if (res[cur] < cost)continue;
		for (Gedge<T> e : G[cur]) {
			if (res[e.to] > cost + e.cost) {
				res[e.to] = cost + e.cost;
				q.push(P(res[e.to], e.to));
			}
		}
	}
	return;
}
########################################
########################################
//ダイクストラする
//条件:重み>0
//グラフ本体、始点、保存用vector
//到達不可能はg.INF
//O(ElogV)
template<class T>
void  dijkstra(wGraph<T>& g, int s,vector<T>& v) {
	v.resize(g.N);
	for (int i = 0; i < g.N; i++) {
		v[i] = g.INF;
	}
	typedef pair<T, int> t;
	priority_queue<t, vector<t>, greater<t>> q;
	q.push(t(0, s));
	while (!q.empty()) {
		t e = q.top();
		q.pop();
		if (v[e.second] != g.INF && v[e.second] <= e.first)continue;
		v[e.second] = e.first;
		for (auto itr = g.E->at(e.second).begin(); itr != g.E->at(e.second).end(); itr++) {
			q.push(t(e.first + (*itr).second, (*itr).first));
		}
	}
	return;
}
