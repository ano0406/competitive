template<class T>
class HLD {
public:
	Tree<T>& tree;
	int V;
	VI depth;   //各頂点が属するHeavy集合の深さ
	VI top;   //各頂点が属するHeavy集合の一番上の頂点
	VI in;   //各頂点がEuler-Tourでどこにいるか
	VI out;   //各頂点の部分木の終わり
	HLD(Tree<T>& t, int root = 0) :tree(t) {
		V = t.size();
		VI subtrees(V, -1);
		//各部分木のサイズを求める
		{
			stack<int> order;
			stack<int> hold;
			hold.push(root);
			while (!hold.empty()) {
				int cur = hold.top();
				hold.pop();
				order.push(cur);
				for (int ch : tree[cur].childs) {
					hold.push(ch);
				}
			}
			while (!order.empty()) {
				int cur = order.top();
				order.pop();
				subtrees[cur] = 1;
				for (int& ch : tree[cur].childs) {
					subtrees[cur] += subtrees[ch];
					if (subtrees[ch] > subtrees[tree[cur].childs[0]]) {
						swap(ch, tree[cur].childs[0]);
					}
				}
			}
		}
		//HL分解 with eulertour
		{
			in.resize(V);
			out.resize(V);
			depth.resize(V);
			top.resize(V);
			int cur = root;
			int nextid = 0;
			dfs(cur, nextid);
		}
	}
	void dfs(int cur, int& nextind) {
		in[cur] = nextind++;
		for (auto ch : tree[cur].childs) {
			//0番目の子は同じHeavy集合
			if (ch == tree[cur].childs[0]) {
				top[ch] = top[cur];
				depth[ch] = depth[cur];
			}
			//それ以外は新しいHeavy集合
			else {
				top[ch] = ch;
				depth[ch] = depth[cur] + 1;
			}
			dfs(ch, nextind);
		}
		out[cur] = nextind - 1;
	}
	int LCA(int u, int v) {
		//uの属するnode.depth >= vの属するnode.depthにする
		if (depth[u] < depth[v]) {
			swap(u, v);
		}
		while (depth[u] > depth[v]) {
			u = tree[top[u]].parent;
		}
		while (top[u] != top[v]) {
			u = tree[top[u]].parent;
			v = tree[top[v]].parent;
		}
		if (in[u] > in[v])return v;
		else return u;
	}
};




https://beet-aizu.hatenablog.com/entry/2017/12/12/235950
https://codeforces.com/blog/entry/53170
https://qiita.com/ageprocpp/items/8dfe768218da83314989