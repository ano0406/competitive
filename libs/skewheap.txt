template<class T>
struct SkewHeap {
public:
	struct Node {
		T key;
		Node* l;
		Node* r;
	};
	Node* merge(Node* x, Node* y) {
		if (!x || !y) {
			return x ? x : y;
		}
		if (x->key > y->key) {
			swap(x, y);
		}
		x->r = merge(y, x->r);
		swap(x->l, x->r);
		return x;
	}
	void push(Node*& root, const T& key) {
		root = merge(root, new Node({ key,nullptr,nullptr }));
	}
	T top(Node* root) {
		return root->key;
	}
	T pop(Node*& root) {
		T top = root->key;
		auto* temp = root;
		root = merge(root->l, root->r);
		delete temp;
		return top;
	}
	bool empty(Node* root) const {
		return !root;
	}
	Node* makeheap() {
		return nullptr;
	}
};

//ref:https://ei1333.github.io/luzhiled/snippets/dp/hu-tucker.html
//遅延評価を除いた