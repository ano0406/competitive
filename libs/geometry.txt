const ld eps = 1e-8;
const ld pi = acos(-1.0);

//イコール
bool equal(Point a, Point b) {
	return (abs(a-b)<eps);
}

//内積
ld dot(Point a, Point b) {
	return real(conj(a)*b);
}

//外積
ld cross(Point a, Point b) {
	return imag(conj(a)*b);
}

//直線(2点保持)
struct Line {
	Point s,e;
};

//円(中心と半径)
struct Circle {
	Point p;
	ld r;
};

//三点の位置関係
//1 -> a,b,cが反時計回りの順に並ぶ
//-1 -> a,b,cが時計回りの順に並ぶ
//2 -> c,a,bの順に直線に並ぶ
//-2 -> a,b,cの順に直線に並ぶ
//0 -> a,c,bの順に直線に並ぶ
int threePointsPosition(Point a, Point b, Point c) {
	b -= a; c -= a;
	if (cross(b, c) > eps)return -1;
	if (cross(b, c) < -eps)return -1;
	if (dot(b, c) < 0)return 2;
	if (norm(b) < norm(c))return -2;
	return 0;
}

//二直線の交差判定(2直線のなす角!=0)
bool isis_ll(Line l, Line m) {
	return !equal(cross(l.e - l.s, m.e - m.s), 0);
}

//直線lと線分sの交差判定
//(線分の一端ともう一端が、直線を挟んで逆側にあればよい)
bool isis_ls(Line l, Line s) {
	return (cross(l.e-l.s,s.s-l.s)*cross(l.e-l.s,s.e-l.s) < eps);
}

//点が直線状に存在するかの判定
//(直線状2点にそれぞれ線を結び、なす角=0orπ)
bool isis_lp(Line l, Point p) {
	return(abs(cross(l.e - p, l.s - p)) < eps);
}

//点が線分上に存在するかの判定
//(線分の2点までの距離の和が線分の長さに等しければよい)
bool isis_sp(Line s, Point p) {
	return (abs(s.e-p)+abs(s.s-p)-abs(s.e-s.s) < eps);
}

//線分と線分の交差判定
bool isis_ss(Line s1, Line s2) {
	if (isis_ls(s1,s2)&&isis_ls(s2,s1))return true;
	else false;
}

//点から直線に下ろす垂線の足
Point proj(Line l, Point p) {
	Point a = p - l.s, b = l.e - l.s;
	return l.s + (dot(a,b)/norm(b)) * b;
}

//直線と直線の交点
Point is_ll(Line s, Line t) {
	Point sv = s.e - s.s, tv = t.e - t.s;
	assert(cross(sv,tv)!=0);
	return s.s + sv * cross(tv, t.s - s.s) / cross(tv,sv);
}

ld dist_lp(Line l, Point p) {
	return abs(p-proj(l,p));
}

ld dist_ll(Line l, Line m) {
	return isis_ll(l, m) ? 0 : dist_lp(l,m.s);
}

ld dist_ls(Line l, Line s) {
	return isis_ls(l, s) ? 0 : min(dist_lp(l, s.s), dist_lp(l, s.e));
}

ld dist_sp(Line s, Point p) {
	Point r = proj(s, p);
	return isis_sp(s, r) ? abs(r - p) : min(abs(s.e - p), abs(s.s - p));
}

ld dist_ss(Line s, Line t) {
	if (isis_ss(s, t))return;
	return min({dist_sp(s,t.s),dist_sp(s,t.e),dist_sp(t,s.s),dist_sp(t,s.e)});
}

