//素数判定
//O(√n)
bool isPrime(int n) {
	for (int i = 2; i <= floor(sqrt(n)); i++) {
		if (n%i == 0)return false;
	}
	return true;
}

//n未満の自然数のでのエラトステネスの篩
//O(nlog(logn)) , 実質O(n)
bool* eratosthenes(int n) {
	bool* array = new bool[n];
	for (int i = 0; i < n; i++)array[i] = true;
	for (int i = 2; i < n; i++) {
		if (!array[i])continue;
		int t = i;
		while (t < n) {
			array[t] = false;
			t += i;
		}
	}
	return array;
}

//Osa_k法
//arr[n] := nの最小の素因数を0からn-1まで
//素因数分解がO(ln(N))でできるっぽい
int* Osa_k(int N) {
	bool* parr = eratosthenes(N);
	int* array = new int[N];
	for (int n = 0; n < N; n++)array[n] = -1;
	for (int n = 2; n < N; n++) {
		if (!parr[n])continue;   //素数じゃない場合
		array[n] = n;
		int t = 2 * n;
		while (t < N) {
			if (array[t] == -1)array[t] = n;
			t += n;
		}
	}
	delete parr;
	return array;
}
