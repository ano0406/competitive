//負経路が存在->return false
template<class T>
bool BellmanFord(WeightedGraph<T>& G, LL start, vector<T>& res) {
	res.resize(G.size(),INF);
	res[start] = 0;
	for (LL t = 0; t < G.size() - 1; t++) {
		for (LL n = 0; n < G.size(); n++) {
			if (res[n] == INF)continue;
			for (Gedge<T>& e : G[n]) {
				res[e.to] = min(res[e.to], res[n] + e.cost);
			}
		}
	}
	//negative loop check
	for (LL n = 0; n < G.size(); n++) {
		if (res[n] == INF)continue;
		for (Gedge<T>& e : G[n]) {
			if (res[e.to] > res[n] + e.cost)return false;
		}
	}
	return true;
}
########################################
########################################
//ベルマンフォード　O(|V|*|E|)
//グラフ、始点、保存用ベクトル(空)
template<class T>
void bellmanFord(wGraph<T>& G, int s, vector<T>& vect) {
	vect.resize(G.N);
	int E = 0;
	for (int i = 0; i < G.N; i++) {
		vect[i] = G.INF;
		E += G.E->at(i).size();
	}
	vect[s] = 0;
	while (true) {
		bool update = false;
		for (int i = 0; i < G.N; i++) {
			for (auto itr = G.E->at(i).begin(); itr != G.E->at(i).end(); itr++) {
				if (vect[i] != G.INF && vect[(*itr).first] > vect[i] + (*itr).second) {
					vect[(*itr).first] = vect[i] + (*itr).second;
					update = true;
				}
			}
		}
		if (!update)return;
	}
}

//負閉路検出(ベルマンフォード)
//O(E*V)
template<class T>
bool hasNegativeLoop(wGraph<T>& G) {
	vector<T>* d = new vector<T>;
	d->resize(G.N, G.INF);
	d->at(0) = 0;
	for (int i = 0; i < G.N; i++) {
		bool isRenewed = false;
		for (int from = 0; from < G.N; from++) {
			if (d->at(from) == G.INF)continue;
			for (auto itr = G.E->at(from).begin(); itr != G.E->at(from).end(); itr++) {
				if (d->at(itr->first) > d->at(from) + itr->second) {
					d->at(itr->first) = d->at(from) + itr->second;
					isRenewed = true;
					if (i == G.N - 1)return true;
				}
			}
		}
		if (!isRenewed) {
			delete d;
			return false;
		}
	}
	delete d;
	return false;
}
