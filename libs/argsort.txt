LL cross(PLL a,PLL b) {
	return a.first * b.second - a.second * b.first;
}

LL dot(PLL a, PLL b) {
	return a.first * b.first + a.second * b.second;
}

int deg(PLL a) {
	if (a.first == 0 && a.second == 0)return 1;
	LL e1acr = cross(PLL(1, 0), a);
	LL e1adot = dot(PLL(1, 0), a);
	if (e1adot > 0 && e1acr >= 0)return 1;
	else if (e1adot <= 0 && e1acr > 0)return 2;
	else if (e1adot < 0 && e1acr <= 0)return 3;
	else return 4;
}

//arg(a) < arg(b)?
bool argcomp(PLL a, PLL b) {
	int anum = deg(a);
	int bnum = deg(b);
	if (anum != bnum)return (anum < bnum);
	while (anum != 1) {
		swap(a.first, a.second);
		a.first *= -1;
		swap(b.first, b.second);
		b.first *= -1;
		anum = deg(a);
		bnum = deg(b);
	}
	return cross(a, b) > 0;
}

void argsort(vector<PLL>& points) {
	vector<pair<PLL, int>> P(points.size());
	for (int n = 0; n < points.size(); n++)
	{
		P[n] = pair<PLL, int>(points[n], n);
	}
	auto comp = [&](pair<PLL, int> ap, pair<PLL, int> bp) {
		PLL a = ap.first;
		PLL b = bp.first;
		if (a.first == 0 && a.second == 0) {
			if (b.first == 0 && b.second == 0)return ap.second < bp.second;
			else return true;
		}
		if (b.first == 0 && b.second == 0) {
			return false;
		}
		if (cross(a, b) == 0 && dot(a, b) >= 0)return ap.second < bp.second;
		int anum = deg(a);
		int bnum = deg(b);
		if (anum != bnum)return (anum < bnum);
		while (anum != 1) {
			swap(a.first, a.second);
			a.first *= -1;
			swap(b.first, b.second);
			b.first *= -1;
			anum = deg(a);
			bnum = deg(b);
		}
		bool res = (cross(a,b) > 0);
		return res;
	};
	sort(P.begin(), P.end(), [&](pair<PLL, int> a, pair<PLL, int> b) {
		return comp(a, b);
	});
	for (int n = 0; n < P.size(); n++)
	{
		points[n] = P[n].first;
	}
}
