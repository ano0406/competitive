//完全永続Union-Find
//(need CPSegmentTree)
class CPUnionFind
{
public:
	CPUnionFind() {};
	void build(int N)
	{
		vector<node> root0(N);
		for (int n = 0; n < N; n++)
		{
			root0[n].p = n;
			root0[n].size = 1;
			root0[n].rank = 1;
		}
		root.build(root0, [](node a, node b)
		{
			if (a.p != -1)
			{
				return a;
			}
			return b;
		}, node());
	}
	//時間tのunionfindのコピーを作る 新しいコピーを表す時間を返す
	//(コピー元のunionfindをこれ以降いじると壊れる)
	int copy(int t)
	{
		return root.copy(t);
	}
	//時間tにおける、頂点uの含まれる木の要素数を返す
	int getsize(int t, int u)
	{
		return getroot(t, u).size;
	}
	//時間tのunionfindにおいて、頂点uとvをunite
	void unite(int t, int u, int v)
	{
		auto nodeu = getroot(t, u);
		auto nodev = getroot(t, v);
		//高さが低い方を、高い方にくっつける
		if (nodeu.rank > nodev.rank)
		{
			swap(nodeu, nodev);
		}
		//uをvにくっつける
		int oldu = nodeu.p;
		nodeu.p = nodev.p;
		nodev.rank++;
		nodev.size += nodeu.size;
		root.set(t, oldu, nodeu);
		root.set(t, nodev.p, nodev);
	}
	//時間tにおいて、頂点uとvは連結(true)か非連結(false)か
	bool isconnected(int t, int u, int v)
	{
		auto nodeu = getroot(t, u);
		auto nodev = getroot(t, v);
		return (nodeu.p == nodev.p);
	}
private:
	//UnionFind木の一頂点
	struct node {
	public:
		//親
		int p;
		//部分木のサイズ
		int size;
		//自分が含まれる木における、底からの高さ
		int rank;
		node()
		:p(-1),size(0),rank(0){}
	};
	//一つ上の親を管理する
	CPSegmentTree<node> root;
	//時間tにおける、頂点uの含まれる木の根を返す(根なのでpが自分の頂点と等しい)
	node getroot(int t, int u)
	{
		auto node = root.get(t, u);
		if (node.p == u)
		{
			return node;
		}
		return getroot(t, node.p);
	}
};
