void solve();

int main() {
	solve();
	return 0;
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
#include <iostream>
#include <algorithm>
#include <vector>
#include <set>
#include <queue>
#include <functional>
#include <map>
#include <string>
#include <boost/multiprecision/cpp_int.hpp>
#include <limits.h>
#include <iomanip>
#include <stack>

using namespace std;
using namespace boost::multiprecision;

//重み付きグラフ
//距離の部分をテンプレートに
template<class T>
class wGraph {
public:
	int N;
	vector<vector<pair<int,T>>>* E;
	wGraph(int n, T i) {
		N = n;
		E = new vector<vector<pair<int,T>>>;
		E->resize(N);
		INF = i;
	}
	wGraph() {
	}
	void constructor(int n, T i) {
		N = n;
		E = new vector<vector<pair<int, T>>>;
		E->resize(N);
		INF = i;
	}
	~wGraph() {
		delete E;
	}
	void addEdge(int a, int b, T c) {
		E->at(a).push_back(pair<int,T>(b,c));
	}
	T INF;
};

//ワーシャルフロイド、全点対最短路
//グラフと結果保存用
//到達不可能はg.INF
//O(|V|^3)
template<class T>
void warshallFloyd(wGraph<T>& g, vector<vector<T>>& array) {
	array.resize(g.N);
	for (auto itr = array.begin(); itr != array.end(); itr++) {
		(*itr).resize(g.N);
		fill((*itr).begin(), (*itr).end(), g.INF);
	}
	for (int n = 0; n < g.N; n++)array[n][n] = 0;
	for (int n = 0; n < g.N; n++) {
		for (auto itr = g.E->at(n).begin(); itr != g.E->at(n).end(); itr++) {
			array[n][(*itr).first] = min(array[n][(*itr).first], (*itr).second);
		}
	}
	for (int k = 0; k < g.N; k++) {
		for (int i = 0; i < g.N; i++) {
			for (int j = 0; j < g.N; j++) {
				if (array[i][k] != g.INF && array[k][j] != g.INF) {
					array[i][j] = min(array[i][j], array[i][k] + array[k][j]);
				}
			}
		}
	}
	return;
}

vector<vector<int>> result;
void solve() {
	int N, M;
	wGraph<int> G;
	cin >> N >> M;
	G.constructor(N, INT_MAX);
	for (int m = 0; m < M; m++) {
		int a, b,t;
		cin >> a >> b >> t;
		a--; b--;
		G.addEdge(a, b, t);
		G.addEdge(b, a, t);
	}
	warshallFloyd(G, result);
	int ans = INT_MAX;
	for (int n = 0; n < N; n++) {
		int temp = 0;
		for (int m = 0; m < N; m++)temp = max(temp,result[n][m]);
		ans = min(ans, temp);
	}
	cout << ans << endl;
}