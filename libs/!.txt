//拡張拡張Euclidの互除法による(階乗)逆元の求め方
//O(N)
int N = ,M = 1e9+7;
vector<long long> inv, sinv;   //inv[i]*i%M = 1,sinv[i]*(i!)%M = 1(0<=i<=N)
inv.resize(N + 1);
sinv.resize(N + 1);
inv[1] = 1;
sinv[0] = 1;
sinv[1] = 1;
for (int n = 2; n <= N; n++) {
	inv[n] = M - (inv[M%n]*(M/n)) % M;
	sinv[n] = (sinv[n - 1] * inv[n]) % M;
}

//フェルマーの三角形を用いた、n,kが小さい場合のdp的解法(mod Mが素数じゃなくても使える)
//O(N*N)
int  N = ,M = 1e9 + 7;
vector<vector<long long>> dp;
dp.resize(N + 1);
dp[1].resize(3);
dp[1][0] = 1;
dp[1][1] = 1;
dp[1][2] = 0;
for (int n = 2; n <= N; n++) {
	dp[n].resize(n + 2);
	dp[n][0] = 1;
	for (int r = 1; r <= n; r++) {
		dp[n][r] = (dp[n - 1][r - 1] + dp[n - 1][r])%M;
	}
	dp[n][n + 1] = 0;
}
