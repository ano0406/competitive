//拡張拡張Euclidの互除法による(階乗)逆元の求め方
//O(N)
void stairs(long long N, vector<long long>& st, long long mod = 1e9 + 7) {
	st.resize(N + 1, 1);
	for (long long n = 2; n <= N; n++) {
		st[n] = (st[n - 1] * n) % mod;
	}
}

ll stair(ll N, ll mod = 1e9 + 7) {
	ll ans = 1;
	for (ll n = 2; n <= N; n++)ans = (ans * n) % mod;
	return ans;
}

void modinvs(long long N, vector<long long>& inv, vector<long long>& sinv, long long mod = 1e9 + 7) {
	inv.resize(N + 1);
	sinv.resize(N + 1);
	inv[1] = 1;
	sinv[0] = 1;
	sinv[1] = 1;
	for (int n = 2; n <= N; n++) {
		inv[n] = mod - (inv[mod % n] * (mod / n)) % mod;
		sinv[n] = (sinv[n - 1] * inv[n]) % mod;
	}
}

//(n^(-1),(n!)^(-1))
pll modinvs(ll N, ll mod = 1e9 + 7) {
	vector<ll> inv(N + 1);
	inv[1] = 1;
	ll sinv = 1;
	for (int n = 2; n <= N; n++) {
		inv[n] = mod - (inv[mod % n] * (mod / n)) % mod;
		sinv = (sinv * inv[n]) % mod;
	}
	return pll(inv[N], sinv);
}

long long Comb(long long n, long long k, vector<long long>& st, vector<long long>& sinv, long long mod = 1e9 + 7) {
	if (n < 0)return 0;
	if (k > n || k < 0)return 0;
	long long ans = st[n];
	ans = (ans * sinv[n - k]) % mod;
	ans = (ans * sinv[k]) % mod;
	return ans;
}

ll Comb(ll N, ll K, ll mod = 1e9 + 7) {
	if (n < 0)return 0;
	if (k > n || k < 0)return 0;
	if (K == 0 || K == N)return 1;
	ll ans = stair(N, mod);
	ans = (ans * modinvs(N - K).second) % mod;
	ans = (ans * modinvs(K).second) % mod;
	return ans;
}




//フェルマーの三角形を用いた、n,kが小さい場合のdp的解法(mod Mが素数じゃなくても使える)
//O(N*N)
int  N = ,M = 1e9 + 7;
vector<vector<long long>> dp;
dp.resize(N + 1);
dp[1].resize(3);
dp[1][0] = 1;
dp[1][1] = 1;
dp[1][2] = 0;
for (int n = 2; n <= N; n++) {
	dp[n].resize(n + 2);
	dp[n][0] = 1;
	for (int r = 1; r <= n; r++) {
		dp[n][r] = (dp[n - 1][r - 1] + dp[n - 1][r])%M;
	}
	dp[n][n + 1] = 0;
}
