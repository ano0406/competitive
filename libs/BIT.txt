template<class T>
class BIT {
public:
	vector<T>* array;
	int N, RN = 1;   //実データ数、ごみデータ含めたデータ数
	BIT(int n) {
		construct(n);
	}
	BIT(){}
	void construct(int n) {
		n++;
		while (RN < n)RN *= 2;
		array = new vector<T>;
		array->resize(RN + 1, 0);
	}
	~BIT() {
		delete array;
		return;
	}
	//a0(=0)a1+...+anを求める
	T get(long long n) {
		n++;
		T s = 0;
		while (n > 0) {
			s = s + array->at(n);
			n -= n & (-n);
		}
		return s;
	}
	//anに+x(1-index)
	void add(int n, T x) {
		n++;
		while (n <= RN) {
			array->at(n) += x;
			n += n & (-n);
		}
	}
};

//1-indexed
template<class T>
class RangeAdditionBIT {
public:
	BIT<T> bit0, bit1;
	RangeAdditionBIT(int N) {
		bit0.construct(N);
		bit1.construct(N);
	}
	//a0+a1+...+an
	T get(int n) {
		return bit1.get(n) * n + bit0.get(n);
	}
	//[l,r)のそれぞれにxを加える
	void add(int l, int r, T x) {
		bit0.add(l, -x * (l - 1));
		bit1.add(l, x);
		bit0.add(r, x * (r-1));
		bit1.add(r, -x);
	}
	//anに+x(1-index)
	void add(int n,T x){
		bit0.add(n, x);
	}
};
