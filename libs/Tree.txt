template<class T>
void doublingConstruct(Tree<T>& tree, VVI& doubling) {
	int N = tree.size();
	doubling.push_back(VI(N, -1));
	for (int n = 0; n < N; n++) {
		doubling[0][n] = tree[n].parent;
	}
	VI res(N, -1);
	while (true) {
		bool flag = false;
		VI& d = doubling.back();
		for (int n = 0; n < N; n++)
		{
			if (d[n] != -1) {
				res[n] = d[d[n]];
				flag = true;
			}
			else res[n] = -1;
		}
		if (!flag)return;
		doubling.push_back(res);
	}
}

//木の各要素の深さ(各辺重さ1としたときの根からの距離)
template<class T>
void setDepth(int root,Tree<T>& tree, VI& depth) {
	int N = tree.size();
	depth.resize(N,0);
	queue<int> q;
	q.push(root);
	while(!q.empty()){
		int cur = q.front();
		q.pop();
		int d = depth[cur];
		for (int ch : tree[cur].childs) {
			depth[ch] = d + 1;
			q.push(ch);
		}
	}
}

//木の頂点から指定した回数だけ根の側に進む
template<class T>
int goRoot(Tree<T>& tree, VVI& doubling, int v,int time) {
	int N = tree.size();
	for (int t = 0; t < doubling.size() && v != -1; t++) {
		if ((time & (1 << t))) {
			v = doubling[t][v];
		}
	}
	return v;
}

//LCA
template<class T>
int LCA(Tree<T>& tree, VVI& doubling,VI& depth, int u, int v) {
	if (u == v)return u;
	if (depth[u] > depth[v])swap(u, v);
	v = goRoot(tree, doubling, v, depth[v] - depth[u]);
	//goRoot(u,s) != goRoot(v,s),goRoot(u,e) == goRoot(v,e)
	int s = -1, e = tree.size();
	while (e - s > 1) {
		int m = (e + s) / 2;
		if (goRoot(tree, doubling, u, m) != goRoot(tree, doubling, v, m))s = m;
		else e = m;
	}
	return goRoot(tree, doubling, u, e);
}