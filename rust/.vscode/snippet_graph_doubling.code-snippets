{
    "graph_doubling": {
        "prefix": "graph_doubling",
        "body": [
            "struct GraphDoubling {",
            "    doubling: Vec<Vec<usize>>,",
            "}",
            "impl GraphDoubling {",
            "    pub fn new<T>(graph: &Graph<T>) -> GraphDoubling",
            "    where",
            "        T: Copy,",
            "    {",
            "        let mut doubling = Vec::<Vec<usize>>::new();",
            "        doubling.push(vec![0; graph.len()]);",
            "        let doubling0 = doubling.get_mut(0).unwrap();",
            "        for n in 0..graph.len() {",
            "            doubling0[n] = if graph.edges[n].len() != 0 {",
            "                graph.edges[n][0].dst",
            "            } else {",
            "                n",
            "            };",
            "        }",
            "        for n in 1..64 {",
            "            let prev = doubling.get(n - 1).unwrap();",
            "            let mut next = vec![0; graph.len()];",
            "            for i in 0..graph.len() {",
            "                next[i] = prev[prev[i]];",
            "            }",
            "            doubling.push(next);",
            "        }",
            "        return GraphDoubling { doubling };",
            "    }",
            "    pub fn step(self: &GraphDoubling, from: usize, time: UnsignedLongLong) -> usize {",
            "        let mut cur = from;",
            "        for digit in 0..64 {",
            "            if (time & (1 << digit)) != 0 {",
            "                cur = self.doubling[digit][cur];",
            "            }",
            "        }",
            "        return cur;",
            "    }",
            "}"
        ]
    }
}
