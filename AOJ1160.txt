#include <iostream>
#include <string>
#include <stack>
#include <vector>

using namespace std;

void solve();

int main() {
	solve();
	return 0;
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////

int W, H;
int map[50][50];

int dfs();

void solve() {
	vector<int> v;
	while (true) {
		cin >> W >> H;
		if (W == 0 && H == 0)return;
		for (int y = 0; y < H; y++) {
			for (int x = 0; x < W; x++) {
				int a;
				cin >> a;
				if (a == 0)map[x][y] = -1;   //海
				else map[x][y] = 0;   //未マークの陸
			}
		}
		v.push_back(dfs());
	}
	for (int i = 0; i < v.size(); i++) {
		cout << v[i];
		if (i != v.size() - 1)cout << endl;
	}
	return;
}

class pos {
public:
	int x, y;
	pos(int _x,int _y):x(_x),y(_y){}
};

pos operator+(pos a,pos b) {
	return pos(a.x+b.x,a.y+b.y);
}

bool isIn(pos a) {
	return (a.x>=0 && a.x < W && a.y >= 0 && a.y < H);
}

int dfs() {
	int num = 0;   //マークしてく数
	for (int x = 0; x < W; x++) {
		for (int y = 0; y < H; y++) {
			if (map[x][y] == -1)continue;   //海
			if (map[x][y] != 0)continue;   //マーク済みの陸
			num++;
			stack<pos> st;
			st.push(pos(x, y));
			while (!st.empty()) {
				pos p = st.top();
				st.pop();
				if (map[p.x][p.y] != 0)continue;
				map[p.x][p.y] = num;
				pos vector[8] = 
				{pos(1,0),pos(1,1),pos(0,1),pos(-1,1),pos(-1,0),pos(-1,-1),pos(0,-1),pos(1,-1)};
				for (int v = 0; v < 8; v++) {
					pos n = p + vector[v];
					if (!isIn(n))continue;
					if (map[n.x][n.y] == 0)st.push(n);
				}
			}
		}
	}
	return num;
}