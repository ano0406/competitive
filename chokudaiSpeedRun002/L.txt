void solve();

int main() {
	solve();
	return 0;
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
#include <iostream>
#include <algorithm>
#include <vector>
#include <set>
#include <queue>
#include <functional>
#include <map>
#include <string>
#include <boost/multiprecision/cpp_int.hpp>
#include <limits.h>
#include <iomanip>
#include <stack>

using namespace std;
using namespace boost::multiprecision;
typedef pair<int, int> pii;
vector<pii> INPUT;
bool func(pii a, pii b) {
	if (a.first != b.first)return a.first > b.first;
	return a.second < b.second;
}
vector<int> dp;

void solve() {
	int N;
	cin >> N;
	int a, b;
	for (int n = 0; n < N; n++) {
		cin >> a >> b;
		INPUT.push_back(pii(a, b));
		if (a != b)INPUT.push_back(pii(b, a));
	}
	sort(INPUT.begin(), INPUT.end(), func);
	dp.resize(N + 1, 0);
	dp[0] = INT_MAX;
	for (int n = 0; n < INPUT.size(); n++) {
		int s = 0, e = N;
		while (e - s > 1) {
			int m = (e + s) / 2;
			if (dp[m] > INPUT[n].second)s = m;
			else e = m;
		}
		dp[e] = INPUT[n].second;
	}
	for (int n = N; n >= 0; n--) {
		if (dp[n] != 0) {
			cout << n << endl;
			return;
		}
	}
}
