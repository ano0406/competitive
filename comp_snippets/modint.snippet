<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>modint</Title>
      <Author>
      </Author>
      <Description>
      </Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>
      </Shortcut>
    </Header>
    <Snippet>
      <Code Language="cpp" Delimiter="$"><![CDATA[template<int mod, bool isprime = false>
class Modint {
public:
	LL v;
	Modint(LL v = 0) :v(v%mod) {};
	Modint<mod, isprime> operator-() const {
		return Modint<mod, isprime>(-v);
	}
	Modint<mod, isprime> operator+() const {
		return *this;
	}
	Modint<mod, isprime>& operator*=(const Modint<mod, isprime>& t) {
		t.v %= mod;
		v = (t.v * (v % mod)) % mod;
		return *this;
	}
	Modint<mod, isprime>& operator+=(const Modint<mod, isprime>& t) {
		v += t.v;
		return *this;
	}
	Modint<mod, isprime>& operator-=(const Modint<mod, isprime>& t) {
		v -= t.v;
		return *this;
	}
	template<int m,bool p>
	friend ostream& operator<<(ostream& st, const Modint<m, p>& mi) {
		mi.v = mod(mi.v, m);
		cout << mi.v;
		return st;
	}
	template<int m,bool p>
	friend istream& operator>>(istream& st, Modint<m, p>& mi) {
		cin >> mi.v;
		return st;
	}
};

template<int mod,bool isprime>
Modint<mod, isprime> operator*(const Modint<mod, isprime>& t1, const Modint<mod, isprime>& t2) {
	return Modint<mod,isprime>(t1) *= t2;
}

template<int mod, bool isprime>
Modint<mod, isprime> operator+(const Modint<mod, isprime>& t1, const Modint<mod, isprime>& t2) {
	return Modint<mod,isprime>(t1) += t2;
}

template<int mod, bool isprime>
Modint<mod, isprime> operator-(const Modint<mod, isprime>& t1, const Modint<mod, isprime>& t2) {
	return Modint<mod,isprime>(t1) -= t2;
}

template<int mod,bool isprime>
bool operator==(const Modint<mod, isprime>& t1, const Modint<mod, isprime>& t2) {
	return (t1.v - t2.v) % mod == 0;
}

template<int mod, bool isprime>
bool operator!=(const Modint<mod, isprime>& t1, const Modint<mod, isprime>& t2) {
	return !(t1 == t2);
}

template<int mod,bool isprime>
Modint<mod, isprime> modpow(Modint<mod, isprime> base, LL p) {
	if (p == 0) {
		return Modint<mod, isprime>(1);
	}
	base.v %= mod;
	if (p == 1) {
		return base;
	}
	auto ret = modpow(base, p/2);
	ret *= ret;
	if (p & 1) {
		ret *= base;
	}
	return ret;
}

template<int mod>
class Modint<mod, false> {
public:
	LL v;
	Modint(LL v = 0) :v(v% mod) {};
	Modint<mod, false> operator-() const {
		return Modint<mod, false>(-v);
	}
	Modint<mod, false> operator+() const {
		return *this;
	}
	Modint<mod, false>& operator*=(const Modint<mod, false>& t) {
		v = ((t.v%mod) * (v % mod)) % mod;
		return *this;
	}
	Modint<mod, false>& operator+=(const Modint<mod, false>& t) {
		v += t.v;
		v %= mod;
		return *this;
	}
	Modint<mod, false>& operator-=(const Modint<mod, false>& t) {
		v -= t.v;
		v %= mod;
		return *this;
	}
	Modint<mod, false>& operator/=(const Modint<mod, false>& t) {
		return (*this *= modpow(t, mod - 2));
	}
	template<int m, bool p>
	friend ostream& operator<<(ostream& st, const Modint<m, p>& mi) {
		cout << ::mod(mi.v, (LL)m);
		return st;
	}
	template<int m, bool p>
	friend istream& operator>>(istream& st, Modint<m, p>& mi) {
		cin >> mi.v;
		return st;
	}
};

template<int mod>
Modint<mod, false> operator/(const Modint<mod, false>& t1, const Modint<mod, false>& t2) {
	return Modint<mod, false>(t1) /= t2;
}
]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>