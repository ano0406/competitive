<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>coord_comp</Title>
      <Author>
      </Author>
      <Description>
      </Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>
      </Shortcut>
    </Header>
    <Snippet>
      <Code Language="cpp" Delimiter="$"><![CDATA[//座圧
class CoordComp
{
public:
	int N;
	VI new2old;
	map<LL, int> old2new;
	CoordComp() :N(0) {};
	CoordComp(VLL& v) {
		build(v);
	}
	//vに含まれる数に昇順で添え字(0-index)を設定する(vは変更しない)
	void build(VLL& v)
	{
		set<LL> all;
		for (LL t : v)
		{
			all.insert(t);
		}
		N = all.size();
		new2old.reserve(N);
		int i = 0;
		for (LL t : all)
		{
			old2new.insert(pair<LL, int>(t, i++));
			new2old.push_back(t);
		}
	}
	//tを圧縮した座標を返す
	LL conv(int t)
	{
		return old2new[t];
	}
	//[l,r)が含む登録点の集合を変換後の座標の区間[s,e)で返す(登録点が存在しなければ[-1,-1)を返す)
	PI conv(LL l, LL r)
	{
		int s = lower_bound(l);
		int e = lower_bound(r);
		return PI(s, e);
	}
	//revconv(e-1) <= x < revconv(e)なるeを返す
	int upper_bound(LL x) {
		int s = -1, e = N;
		while (e - s > 1) {
			int m = (e + s) / 2;
			if (new2old[m] <= x) {
				s = m;
			}
			else {
				e = m;
			}
		}
		return e;
	}
	//revconv(e-1) < x <= revconv(e)なるeを返す
	int lower_bound(LL x) {
		int s = -1, e = N;
		while (e - s > 1) {
			int m = (e + s) / 2;
			if (new2old[m] < x) {
				s = m;
			}
			else {
				e = m;
			}
		}
		return e;
	}
	//圧縮済みの座標から、元の数を返す
	LL revconv(int i)
	{
		return new2old[i];
	}
	//登録点の個数
	int size()
	{
		return N;
	}
};
]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>