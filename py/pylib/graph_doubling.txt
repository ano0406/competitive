# need WeightedGraph

# グラフのダブリングを行う
# 各頂点から(辺edge[-][0]を通って)1<<p回移動したときどの頂点にいるかを求める
# 1<<0回、1<<1回、...、1<<p回まで
# 辺が存在しない場合その場にとどまるとする
# 返り値res[p][n] := 頂点nから1<<p回移動したときの頂点
def graph_doubling(G: WeightedGraph, p: int) -> []:
    N = G.N
    res = [[-1] * N for _ in range(p + 1)]
    for n in range(N):
        if len(G.edge[n]) > 0:
            res[0][n] = G.edge[n][0].t
        else:
            res[0][n] = n
    for p in range(1, p + 1):
        for n in range(N):
            res[p][n] = res[p - 1][res[p - 1][n]]
    return res


# グラフGの頂点nからk回(辺edge[-][0]を通って)移動したときどの頂点にいるかを求める
# graph_doublingの返り値を要する
# ダブリングの範囲が足りないとエラるので注意
def graph_doubling_step(G: WeightedGraph, doubling, n: int, k: int) -> int:
    # (1<<p) > kとなる最小のpを求める
    p = 0
    while (1 << p) <= k:
        p += 1
    p -= 1
    while p >= 0:
        # kのp桁目に1が立っているか
        if (k >> p) != 0:
            n = doubling[p][n]
            k -= (1 << p)
        p -= 1
    return n


