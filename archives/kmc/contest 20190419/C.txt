void solve();

int main() {
	solve();
	return 0;
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
#include <iostream>
#include <algorithm>
#include <vector>
#include <set>
#include <queue>
using namespace std;

int N;
vector<set<int>> P;
vector<int> col;
set<int> temp;
queue<int> q;

void solve() {
	cin >> N;
	P.resize(N);
	col.resize(N);
	for (int n = 0; n < N - 1; n++) {
		int x, y;
		cin >> x >> y;
		x--;
		y--;
		P[x].insert(y);
		P[y].insert(x);
	}
	int m = 1;   //今使っている最大の色
	for (int n = 0; n < N; n++)col[n] = -1;   //未決定
	q.push(0);   //頂点０を未決定でpush
	m = 1;
	while (!q.empty()) {
		int n = q.front();
		q.pop();
		if (col[n] != -1)continue;
		temp.clear();
		for (auto itr = P[n].begin(); itr != P[n].end(); itr++) {
			if (col[*itr] != -1)temp.insert(col[*itr]);
			for (auto itr2 = P[*itr].begin(); itr2 != P[*itr].end(); itr2++) {
				if (col[*itr2] != -1)temp.insert(col[*itr2]);
			}
		}
		bool flag = false;   //mまでで色塗りで来たか
		for (int c = 1; c <= m; c++) {
			if (temp.find(c) == temp.end()) {
				flag = true;
				col[n] = c;
				break;
			}
		}
		if (!flag) {
			m++;
			col[n] = m;
		}
		for (auto itr = P[n].begin(); itr != P[n].end(); itr++) {
			if (col[*itr] == -1)q.push(*itr);
		}
	}
	cout << m << endl;
	for (int n = 0; n < N; n++)cout << col[n] << endl;
	return;
}