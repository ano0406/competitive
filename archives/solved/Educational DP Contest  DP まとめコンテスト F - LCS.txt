#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
using namespace std;

template<class T>
void in(vector<T>& V) {
	for (auto itr = V.begin(); itr != V.end(); itr++)cin >> *itr;
	return;
}

template<class T>
void out(vector<T>& V) {
	for (T& itr : V)cout << itr << endl;
	return;
}

string S, T;
vector<vector<int>> DP;

string recover(int s,int t) {
	if (s == 0 || t == 0)return string("");
	if (S[s - 1] == T[t - 1])return recover(s - 1, t - 1) + S.substr(s - 1, 1);
	else if (DP[s - 1][t] < DP[s][t - 1])return recover(s, t - 1);
	else return recover(s - 1, t);
}

int main() {
	cin >> S >> T;
	DP.resize(S.size() + 1, vector<int>(T.size() + 1, 0));
	for (int t = 1; t <= T.size(); t++) {
		for (int s = 1; s <= S.size(); s++) {
			if (S[s - 1] == T[t - 1]) DP[s][t] = DP[s - 1][t - 1]+1;
			else {
				if (DP[s - 1][t] < DP[s][t - 1])DP[s][t] = DP[s][t - 1];
				else DP[s][t] = DP[s - 1][t];
			}
		}
	}
	cout << recover(S.size(), T.size()) << endl;
	return 0;
}
