#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

ll H, W;
VVLL A;

void dijkstra(pll st, VVLL& res) {
	res.resize(W, VLL(H, LLONG_MAX));
	typedef pair<ll, pll> P;
	priority_queue<P, vector<P>, greater<>> que;
	que.push(P(0, st));
	ll vect[4][2] = {
		{0,1},{0,-1},{1,0},{-1,0}
	};
	while (!que.empty()) {
		ll cost = que.top().first;
		ll cx = que.top().second.first;
		ll cy = que.top().second.second;
		que.pop();
		if (res[cx][cy] != LLONG_MAX)continue;
		res[cx][cy] = cost;
		for (ll v = 0; v < 4; v++) {
			ll nx = cx + vect[v][0];
			ll ny = cy + vect[v][1];
			if (nx < 0 || nx >= W || ny < 0 || ny >= H)continue;
			if (res[nx][ny] != LLONG_MAX)continue;
			que.push(P(cost + A[nx][ny], pll(nx, ny)));
		}
	}
	return;
}

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	cin >> H >> W;
	A.resize(W, VLL(H, 0));
	for (ll y = 0; y < H; y++) {
		for (ll x = 0; x < W; x++)cin >> A[x][y];
	}
	VVLL res1, res2, res3;
	dijkstra(pll(0, H - 1), res1);
	dijkstra(pll(W - 1, H - 1), res2);
	dijkstra(pll(W - 1, 0), res3);
	ll ans = LLONG_MAX;
	for (ll y = 0; y < H; y++) {
		for (ll x = 0; x < W; x++) {
			ll temp = res1[x][y];
			temp += res2[x][y];
			temp += res3[x][y];
			temp -= 2 * A[x][y];
			ans = min(ans, temp);
		}
	}
	cout << ans << "\n";
	return 0;
}
