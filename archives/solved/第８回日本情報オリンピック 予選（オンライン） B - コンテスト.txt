#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>

using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	VLL W(10);
	VLL K(10);
	for (ll n = 0; n < 10; n++)cin >> W[n];
	for (ll n = 0; n < 10; n++)cin >> K[n];
	sort(W.begin(), W.end(), [](ll a, ll b) {
		return a > b;
	});
	sort(K.begin(), K.end(), [](ll a, ll b) {
		return a > b;
	});
	cout << W[0] + W[1] + W[2] << " " << K[0] + K[1] + K[2] << "\n";
	return 0;
}
