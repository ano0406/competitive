void solve();

int main() {
	solve();
	return 0;
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <iomanip>
#include <string>
#include <math.h>

using namespace std;

long double eps = 1e-12;
vector<vector<long double>> POINTS;
int D, N;

void solve() {
	cin >> N >> D;
	POINTS.resize(N);
	for (int n = 0; n < N; n++) {
		POINTS[n].resize(D);
		for (int d = 0; d < D; d++) {
			cin >> POINTS[n][d];
		}
	}
	int counter = 0;
	for (int i = 0; i < N; i++) {
		for (int j = i + 1; j < N; j++) {
			long double dist = 0;
			for (int d = 0; d < D; d++) {
				dist += (POINTS[i][d] - POINTS[j][d]) * (POINTS[i][d] - POINTS[j][d]);
			}
			dist = sqrt(dist);
			if (dist - floor(dist) < eps && dist-floor(dist) > -eps)counter++;
		}
	}
	cout << counter << endl;
	return;
}
