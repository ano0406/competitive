#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

ll N;
ll ga, sa, ba, gb, sb, bb;

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	cin >> N >> ga >> sa >> ba >> gb >> sb >> bb;
	VLL DP1(N+1,0);
	for (ll n = 0; n <= N; n++) {
		DP1[n] = n;
		if (n >= ga)DP1[n] = max(DP1[n], DP1[n - ga] + gb);
		if (n >= sa)DP1[n] = max(DP1[n], DP1[n - sa] + sb);
		if (n >= ba)DP1[n] = max(DP1[n], DP1[n - ba] + bb);
	}
	ll max1 = 0;
	for (ll n = 0; n <= N; n++) {
		max1 = max(max1, DP1[n]);
	}
	VLL DP2(max1+1, 0);
	for (ll n = 0; n <= max1; n++) {
		DP2[n] = n;
		if (n >= gb)DP2[n] = max(DP2[n], DP2[n - gb] + ga);
		if (n >= sb)DP2[n] = max(DP2[n], DP2[n - sb] + sa);
		if (n >= bb)DP2[n] = max(DP2[n], DP2[n - bb] + ba);
	}
	ll max2 = 0;
	for (ll n = 0; n <= max1; n++) {
		max2 = max(max2, DP2[n]);
	}
	cout << max2 << "\n";
	return 0;
}