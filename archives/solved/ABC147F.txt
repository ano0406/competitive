#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>
#include <bitset>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	ll N, X, D;
	cin >> N >> X >> D;
	if (N == 1) {
		if (X == 0)cout << 1 << "\n";
		else cout << 2 << "\n";
		return 0;
	}
	if (D == 0) {
		if (X == 0)cout << 1 << "\n";
		else cout << N + 1 << "\n";
		return 0;
	}
	if (D == 1) {
		vector<pll> V(N + 1);
		V[0] = pll(0, 0);
		ll bottom = 0;
		ll top = 0;
		for (ll n = 1; n <= N; n++) {
			bottom += X + (n - 1);
			top += X + (N - n);
			V[n] = pll(bottom, top);
		}
		sort(V.begin(), V.end(), [](pll a, pll b) {
			if (a.first == b.first)return a.second < b.second;
			return a.first < b.first;
		});
		ll ans = 0;
		pll cur = V[0];
		for (ll n = 1; n <= N; n++) {
			if (V[n].first > cur.second) {
				ans += cur.second - cur.first + 1;
				cur = V[n];
			}
			else {
				cur.second = max(cur.second,V[n].second);
			}
		}
		ans += (cur.second - cur.first + 1);
		cout << ans << "\n";
		return 0;
	}
	if (D < 0) {
		D *= -1;
		X *= -1;
	}
	vector<pll> V(N+1);
	V[0] = pll(0, 0);
	for (ll n = 1; n <= N; n++) {
		ll bottom = n * (n - 1) / 2 *D+ n * X;
		ll top = (n * N - n * (n + 1) / 2) * D + n * X;
		V[n] = pll(bottom, top);
	}
	sort(V.begin(), V.end(), [=](pll a, pll b) {
		ll ma = a.first % D;
		ma = (ma + D) % D;
		ll mb = b.first % D;
		mb = (mb + D) % D;
		if (ma != mb)return ma < mb;
		if (a.first == b.first)return a.second < b.second;
		else return a.first < b.first;
	});
	pll cur = V[0];
	ll ans = 0;
	for (ll n = 1; n <= N; n++) {
		ll ma = cur.first % D;
		ma = (ma + D) % D;
		ll mb = V[n].first % D;
		mb = (mb + D) % D;
		if (ma != mb) {
			ans += (cur.second - cur.first) / D + 1;
			cur = V[n];
		}
		else if (cur.second < V[n].first) {
			ans += (cur.second - cur.first) / D + 1;
			cur = V[n];
		}
		else {
			cur.second = max(cur.second,V[n].second);
		}
	}
	ans += (cur.second - cur.first) / D + 1;
	cout << ans << "\n";
	return 0;
}
