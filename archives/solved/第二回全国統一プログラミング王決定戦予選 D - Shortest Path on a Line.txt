#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
using namespace std;
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
//typedef boost::multiprecision::cpp_int bigint;

vector<ll> seg,lazy;
ll RN;

void segeval(ll k) {
	if (k >= 2 * RN)return;
	if (lazy[k] == 1e18)return;
	if (seg[k] > lazy[k]) {
		seg[k] = lazy[k];
		if (k < RN) {
			lazy[2 * k] = min(lazy[2 * k], lazy[k]);
			lazy[2 * k + 1] = min(lazy[2 * k + 1], lazy[k]);
		}
		lazy[k] = 1e18;
	}
	else {
		if (k < RN) {
			lazy[2 * k] = min(lazy[2 * k], lazy[k]);
			lazy[2 * k + 1] = min(lazy[2 * k + 1], lazy[k]);
		}
		lazy[k] = 1e18;
	}
}

void segset(ll a, ll b, ll x, ll k = 1, ll l = 0, ll r = RN-1) {
	if (b < l || r < a)return;
	segeval(k);
	if (a <= l && r <= b) {
		lazy[k] = min(lazy[k], x);
		segeval(k);
		return;
	}
	else {
		segset(a, b, x, 2 * k, l, (l + r) / 2);
		segset(a, b, x, 2 * k + 1, (l + r) / 2 + 1, r);
		seg[k] = min(seg[2 * k], seg[2 * k + 1]);
		return;
	}
}

ll segget(ll a, ll b, ll k = 1, ll l = 0, ll r = RN - 1) {
	segeval(k);
	if (b < l || r < a)return 1e18;
	else if (a <= l && r <= b)return seg[k];
	else {
		return min(
			segget(a, b, 2 * k, l, (l + r) / 2),
			segget(a, b, 2 * k + 1, (l + r) / 2 + 1, r)
		);
	}
}

struct edge {
	ll a, b;
	ll c;
};
vector<edge> edges;

int main() {
	ll N, M;
	cin >> N >> M;
	RN = 1;
	while (RN < N)RN *= 2;
	seg.resize(RN*2,1e18);
	lazy.resize(RN * 2, 1e18);
	segset(0, 0, 0);
	edges.resize(M);
	for (ll m = 0; m < M; m++) {
		cin >> edges[m].a >> edges[m].b >> edges[m].c;
		edges[m].a--;
		edges[m].b--;
	}
	sort(edges.begin(), edges.end(), [](edge a, edge b) {
		if (a.b != b.b)return a.b < b.b;
		if (a.c != b.c)return a.c > b.c;
		return a.a < b.a;
	});
	ll top = 0;
	for (ll m = 0; m < M; m++) {
		ll cur = segget(edges[m].a, top);
		segset(edges[m].a, edges[m].b, cur + edges[m].c);
		top = edges[m].b;
	}
	ll ans = segget(N - 1, N - 1);
	if (ans == 1e18)cout << -1 << endl;
	else cout << ans << endl;
	return 0;
}
