#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
using namespace std;

//空vectorを要素数NのsegTreeとしてzで初期化
template<class T>
void segTree_init(vector<T>& vec, int N, T z) {
	int RN = 1;
	while (RN < N)RN *= 2;
	vec.resize(2 * RN - 1, z);
}

//vecをsegTreeとしてn番目をxに
template<class T>
void segTree_set(vector<T>& vec, int n, T x, function<T(T, T)> f) {
	int RN = (vec.size() + 1) / 2;
	n = RN + n - 1;
	vec[n] = x;
	while (n > 0) {
		n = (n - 1) / 2;
		vec[n] = f(vec[2 * n + 1], vec[2 * n + 2]);
	}
	return;
}

//vecがsegTreeの時の、n番目の要素
template<class T>
T segTree_at(vector<T>& vec, int n) {
	int RN = (vec.size() + 1) / 2;
	return vec[RN + n - 1];
}

template<class T>
T segTree_get(vector<T>& vec, int a, int b, function<T(T, T)> f, T e) {
	T vl = e, vr = e;
	int RN = (vec.size() + 1) / 2;
	for (int l = a + RN, r = b + RN; l < r; l >>= 1, r >>= 1) {
		if (l & 1)vl = f(vl, vec[(l++) - 1]);
		if (r & 1)vr = f(vr, vec[(--r) - 1]);
	}
	return f(vl, vr);
}

function<long long(long long,long long)> func = [](long long a, long long b) {return max(a, b); };

int N;
vector<int> A, C;
long long asum = 0;
vector<long long> segTree;

void solve() {
	A.clear(); C.clear();
	cin >> N;
	A.resize(N + 1);
	C.resize(N + 1);
	for (int n = 1; n <= N; n++) {
		cin >> C[n];
		asum += C[n];
	}
	for (int n = 1; n <= N; n++)cin >> A[n];
	segTree_init(segTree, N + 1,(long long)0);
	for (int n = 1; n <= N; n++) {
		long long m = segTree_get(segTree, 1, A[n], func, (long long)0);
		segTree_set(segTree, A[n], m + C[A[n]], func);
	}
	cout << 2 * (asum - segTree_get(segTree, 1, N + 1, func, (long long)0)) << endl;
	return;
}

//////////////////////////////
//////////////////////////////

int main() {
#ifdef DEBUGTIME
	for (int time = 0; time < DEBUGTIME; time++) {
		solve();
		cout << "####################" << endl;
	}
#else
	solve();
#endif
	return 0;
}
