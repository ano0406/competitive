#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>

using namespace std;
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
//typedef boost::multiprecision::cpp_int bigint;

ll N, C;
vector<vector<ll>> imos;

int main() {
	cin >> N >> C;
	imos.resize(C, vector<ll>(100000+2, 0));
	for (ll n = 0; n < N; n++) {
		ll s, t, c;
		cin >> s >> t >> c;
		c--;
		imos[c][s]++;
		imos[c][t+1]--;
	}
	for (ll c = 0; c < C; c++) {
		for (ll t = 1; t <= 100000; t++) {
			imos[c][t] += imos[c][t - 1];
		}
	}
	ll ans = 0;
	for (ll t = 0; t <= 100000; t++) {
		ll count = 0;
		for (ll c = 0; c < C; c++) {
			if (imos[c][t] > 0)count++;
		}
		ans = max(ans, count);
	}
	cout << ans << endl;
	return 0;
}
