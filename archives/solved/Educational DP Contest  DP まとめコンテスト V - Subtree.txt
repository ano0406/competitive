#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

VLL DP0, DP1;
VVLL childs;
VVLL G;
VLL parents;
ll N, M;

ll dp0(ll n) {
	if (DP0[n] != -1)return DP0[n];
	if (childs[n].size() == 0) {
		DP0[n] = 1;
		return 1;
	}
	DP0[n] = 1;
	for (ll c : childs[n]) {
		DP0[n] *= (dp0(c) + 1);
		DP0[n] %= M;
	}
	return DP0[n];
}

void dp1(ll n) {
	if (n == 0) {
		DP1[n] = 0;
	}
	if (childs[n].size() == 0) {
		return;
	}
	VLL sfront(childs[n].size());
	sfront[0] = DP0[childs[n][0]]+1;
	for (ll c = 1; c < childs[n].size(); c++) {
		sfront[c] = sfront[c-1]*(DP0[childs[n][c]]+1);
		sfront[c] %= M;
	}
 	VLL sback(childs[n].size());
	sback.back() = DP0[childs[n].back()]+1;
	for (ll c = (ll)childs[n].size() - 2; c >= 0; c--) {
		sback[c] = sback[c + 1] * (DP0[childs[n][c]]+1);
		sback[c] %= M;
	}
	for (ll c = 0; c < childs[n].size(); c++) {
		ll ans = 1;
		if (c > 0)ans *= sfront[c - 1];
		if (c < (ll)childs[n].size() - 1) {
			ans = (ans * sback[c + 1]) % M;
		}
		ans = (ans * (DP1[n] + 1)) % M;
		DP1[childs[n][c]] = ans;
		dp1(childs[n][c]);
	}
	return;
}

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	cin >> N >> M;
	childs.resize(N);
	G.resize(N);
	for (ll n = 0; n < N - 1; n++) {
		ll x, y;
		cin >> x >> y;
		x--; y--;
		G[x].push_back(y);
		G[y].push_back(x);
	}
	parents.resize(N);
	queue<pll> q;
	q.push(pll(0,-1));
	while (!q.empty()) {
		pll cur = q.front();
		q.pop();
		parents[cur.first] = cur.second;
		for (ll child : G[cur.first]) {
			if (child == cur.second)continue;
			childs[cur.first].push_back(child);
			q.push(pll(child, cur.first));
		}
	}
	DP0.resize(N,-1);
	for (ll n = 0; n < N; n++)dp0(n);
	DP1.resize(N,-1);
	dp1(0);
	for (ll n = 0; n < N; n++) {
		cout << (DP0[n] * (DP1[n]+1)) % M << "\n";
	}
	return 0;
}