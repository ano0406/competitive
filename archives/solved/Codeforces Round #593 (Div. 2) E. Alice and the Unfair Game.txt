#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
using namespace std;

int N, M;
vector<int> A, AP, AM;

//空vectorを要素数NのsegTreeとしてzで初期化
template<class T>
void segTree_init(vector<T>& vec, int N, T z) {
	int RN = 1;
	while (RN < N)RN *= 2;
	vec.resize(2 * RN, z);
}

//vecをsegTreeとしてn番目をxに
template<class T>
void segTree_set(vector<T>& vec, int n, T x, function<T(T, T)> f, int k = -1) {
	int RN = (vec.size() + 1) / 2;
	if (k == -1) {
		k = n + RN;
		vec[k] = x;
		segTree_set(vec, n, x, f, k / 2);
	}
	else if (k != 0) {
		vec[k] = f(vec[2 * k], vec[2 * k + 1]);
		segTree_set(vec, n, x, f, k / 2);
	}
}

//vecがsegTreeの時の、n番目の要素
template<class T>
T segTree_at(vector<T>& vec, int n) {
	int RN = (vec.size()) / 2;
	return vec[RN + n];
}

//get [a,b]
template<class T>
T segTree_get(vector<T>& vec, int a, int b, function<T(T, T)> f, T e, int k = 1, int l = 0, int r = -1) {
	if (r == -1)r = vec.size() / 2 - 1;
	if (b < l || r < a)return e;
	else if (a <= l && r <= b)return vec[k];
	else return f(
		segTree_get(vec, a, b, f, e, 2 * k, l, (l + r) / 2),
		segTree_get(vec, a, b, f, e, 2 * k + 1, (l + r) / 2 + 1, r)
	);
}

map<int,int> DPP, DPM;
typedef pair<int, int> pii;

void prepare() {
	//前準備
	//DPPから増加列
	for (int m = M; m >= 1; m--) {
		//自分より後ろからAP[m]を探す
		int self = AP[m];
		if (DPP.find(self+1) == DPP.end()) {
			DPP.insert(pii(self, 1));
		}
		else {
			int cons = DPP.find(self + 1)->second;
			if (DPP.find(self) == DPP.end()) {
				DPP.insert(pii(self, cons + 1));
			}
			else {
				DPP.find(self)->second = cons + 1;
			}
		}
	}
	for (int m = M; m >= 1; m--) {
		int self = AM[m];
		if (DPM.find(self - 1) == DPM.end()) {
			DPM.insert(pii(self, 1));
		}
		else {
			int cons = DPM.find(self - 1)->second;
			if (DPP.find(self) == DPP.end()) {
				DPM.insert(pii(self, cons + 1));
			}
			else {
				DPM.find(self)->second = cons + 1;
			}
		}
	}
}

int judge(int X) {
	//APからX,X+1,...を取り出す
	int fl = X-M - 1;
	if (DPP.find(X) != DPP.end()) {
		int i = DPP.find(X)->second - 1;
		fl = X - M + i;
	}
	int ce = X + M + 1;
	if (DPM.find(X) != DPM.end()) {
		int i = DPM.find(X)->second - 1;
		ce = X + M - i;
	}
	return min(N, ce) - max(1, fl) + 1;
}

function<int(int, int)> lambda = [](int a, int b) {
	return min(a, b);
};

int main() {
	cin >> N >> M;
	A.resize(M+1);
	AM.resize(M + 2);
	AP.resize(M + 2);
	for (int n = 1; n <= M; n++) {
		cin >> A[n];
		AP[n] = A[n] + n;
		AM[n] = A[n] - n;
	}
	prepare();
	long long ans = 0;
	for (int n = 1; n <= N; n++) {
		ans += judge(n);
	}
	cout << ans << endl;
	return 0;
}