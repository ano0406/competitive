#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
using namespace std;

template<class T>
void in(vector<T>& V) {
	for (auto itr = V.begin(); itr != V.end(); itr++)cin >> *itr;
	return;
}

template<class T>
void out(vector<T>& V) {
	for (T& itr : V)cout << itr << endl;
	return;
}

map<string, string> vars;
typedef pair<string, string> pss;
int N, M;
string X;
string init;
int XOR[4][4] = {
	{0,1,2,3},{1,0,3,2},{2,3,0,1},{3,2,1,0}
};
int AND[4][4] = {
	{0,0,0,0},{0,1,2,3},{0,2,2,0},{0,3,0,3}
};
int OR[4][4] = {
	{0,1,2,3},{1,1,1,1},{2,1,2,1},{3,1,1,3}
};

int main() {
	cin >> N >> M;
	for (int m = 0; m < M; m++) {
		X += string("2");
		init += string("0");
	}
	for (int n = 0; n <= N; n++) {
		string str;
		getline(cin, str);
		if (n == 0)continue;   //?
		vector<string> split;
		str += string(" ");
		int c = 0, s = 0;
		while (c < str.size()) {
			if (str[c] == ' ') {
				split.push_back(str.substr(s, c - s));
				s = c + 1;
			}
			c++;
		}
		if (split.size() == 3) {
			string varname = split[0];
			string cont;
			if (split[2] == string("?")) {
				for (int time = 0; time < M; time++)cont += string("2");
			}
			else if (vars.find(split[2]) != vars.end())cont = (vars.find(split[2]))->second;
			else cont = split[2];
			vars.insert(pss(varname, cont));
		}
		else {
			string varname = split[0];
			string cont1;
			if (split[2] == string("?")) cont1 = X;
			else if (vars.find(split[2]) != vars.end())cont1 = (vars.find(split[2]))->second;
			else cont1 = split[2];
			string cont2;
			if (split[4] == string("?")) cont2 = X;
			else if (vars.find(split[4]) != vars.end())cont2 = (vars.find(split[4]))->second;
			else cont2 = split[4];
			string cont = init;
			if (split[3] == string("XOR")) {
				for (int m = M - 1; m >= 0; m--) {
					cont[m] += XOR[cont1[m] - '0'][cont2[m] - '0'];
				}
			}
			else if (split[3] == string("AND")) {
				for (int m = M - 1; m >= 0; m--) {
					cont[m] += AND[cont1[m] - '0'][cont2[m] - '0'];
				}
			}
			else if (split[3] == string("OR")) {
				for (int m = M - 1; m >= 0; m--) {
					cont[m] += OR[cont1[m] - '0'][cont2[m] - '0'];
				}
			}
			vars.insert(pss(varname, cont));
		}
	}
	string mins = init;
	vector<int> count2(M,0),count3(M,0);
	for (pss var : vars) {
		string cont = var.second;
		for (int m = 0; m < M; m++) {
			if (cont[m] == '2')count2[m]++;
			else if (cont[m] == '3')count3[m]++;
		}
	}
	for (int m = 0; m < M; m++) {
		if (count2[m] < count3[m])mins[m]++;
	}
	cout << mins << endl;
	string maxs = init;
	for (int m = 0; m < M; m++) {
		if (count2[m] > count3[m])maxs[m]++;
	}
	cout << maxs << endl;
	return 0;
	return 0;
}