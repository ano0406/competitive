#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>
#include <bitset>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	ll N;
	cin >> N;
	VLL NG;
	for (ll n = 0; n < 3; n++) {
		ll a;
		cin >> a;
		if (a == N) {
			cout << "NO\n";
			return 0;
		}
		NG.push_back(a);
	}
	VLL DP(N + 3, 101);
	DP[N] = 0;
	for (ll n = N - 1; n >= 0; n--) {
		if (NG[0] == n || NG[1] == n || NG[2] == n)continue;
		DP[n] = min(DP[n+1],min(DP[n+2],DP[n+3]))+1;
	}
	if (DP[0]<=100)cout << "YES\n";
	else cout << "NO\n";
	return 0;
}
