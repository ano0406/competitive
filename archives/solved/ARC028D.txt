#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
using namespace std;
int MOD = 1e9 + 7;

int N, M, Q;
vector<int> A;
typedef pair<int, int> pii;
vector<vector<long long>> DP;   //í èÌDP
vector<vector<long long>> DP2;   //ñﬂÇ∑ÇŸÇ§
vector<vector<long long>> DPsum;
vector<vector<long long>> DP2sum;

int main() {
	cin >> N >> M >> Q;
	A.resize(N + 1);
	DP.resize(N + 1, vector<long long>(M + 1, 0));
	DP2.resize(N + 1, vector<long long>(M + 1, 0));
	DPsum.resize(N + 1, vector<long long>(M + 1, 0));
	DP2sum.resize(N + 1, vector<long long>(M + 1, 0));
	A.resize(N + 1);
	for (int n = 1; n <= N; n++)cin >> A[n];
	for(int m = 0;m <= M;m++)DPsum[0][m] = 1;
	for (int n = 1; n <= N; n++) {
		DP[n][0] = 1;
		DPsum[n][0] = 1;
		for (int m = 1; m <= M; m++) {
			DP[n][m] = DPsum[n - 1][m];
			if (m - A[n] - 1 >= 0) {
				DP[n][m] -= DPsum[n - 1][m - A[n] - 1];
				DP[n][m] += MOD;
			}
			DP[n][m] %= MOD;
			DPsum[n][m] = DPsum[n][m-1]+DP[n][m];
			DPsum[n][m] %= MOD;
		}
	}
	for (int m = 0; m <= M; m++)DP2sum[0][m] = 1;
	for (int n = 1; n <= N; n++) {
		DP2[n][0] = 1;
		DP2sum[n][0] = 1;
		for (int m = 1; m <= M; m++) {
			DP2[n][m] = DP[N][m] - DP2sum[n][m - 1]+MOD;
			if (m - A[n] - 1 >= 0)DP2[n][m] += DP2sum[n][m - A[n] - 1];
			DP2[n][m] %= MOD;
			DP2sum[n][m] = DP2sum[n][m-1]+DP2[n][m];
			DP2sum[n][m] %= MOD;
		}
	}
	for (int q = 0; q < Q; q++) {
		int k, x;
		cin >> k >> x;
		cout << DP2[k][M - x] << endl;
	}
	return 0;
}