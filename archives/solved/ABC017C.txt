#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>
#include <bitset>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	ll N, M;
	cin >> N >> M;
	struct query {
		ll first, second, v;
	};
	vector<query> querys(N);
	for (ll n = 0; n < N; n++) {
		auto& q = querys[n];
		cin >> q.first >> q.second >> q.v;
	}
	VLL left, right;
	left.resize(M + 2);
	left[0] = 0;
	sort(querys.begin(), querys.end(), [](query a, query b) {
		return a.second < b.second;
	});
	ll c = 0;
	for (ll m = 1; m <= M + 1; m++) {
		left[m] = left[m - 1];
		while (c < N) {
			if (querys[c].second <= m) {
				left[m] += querys[c].v;
				c++;
			}
			else break;
		}
	}
	right.resize(M + 2);
	right.back() = 0;
	sort(querys.begin(), querys.end(), [](query a, query b) {
		return a.first > b.first;
	});
	c = 0;
	for (ll m = M; m >= 0; m--) {
		right[m] = right[m + 1];
		while (c < N) {
			if (querys[c].first >= m) {
				right[m] += querys[c].v;
				c++;
			}
			else break;
		}
	}
	ll ans = 0;
	for (ll m = 1; m <= M; m++) {
		ans = max(ans, left[m - 1] + right[m + 1]);
	}
	cout << ans << "\n";
	return 0;
}
