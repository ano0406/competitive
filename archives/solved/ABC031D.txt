#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
using namespace std;
long long MOD = 1e9 + 7;

int K, N;
vector<pair<string, int>> words;

bool judge(vector<int>& length) {
	vector<string> res(K+1, string(""));
	for (pair<string,int> ele : words) {
		stack<int> V;
		int num = ele.second;
		string word = ele.first;
		while (num > 0) {
			V.push(num % 10);
			num /= 10;
		}
		while (!V.empty()) {
			int next = V.top();
			V.pop();
			if (word.size() < length[next])return false;
			string ext = word.substr(0, length[next]);
			word = word.substr(length[next]);
			if (res[next] == string(""))res[next] = ext;
			else {
				if (res[next] != ext)return false;
			}
		}
		if (word != string(""))return false;
	}
	for (int n = 1; n <= K; n++) {
		cout << res[n] << endl;
	}
	return true;
}

int main() {
	cin >> K >> N;
	words.resize(N);
	for (int n = 0; n < N; n++) {
		cin >> words[n].second >> words[n].first;
	}
	vector<int> length(K+1, 1);
	while (true) {
		if (judge(length))return 0;
		length[K]++;
		for (int k = K; k >= 1; k--) {
			if (length[k] == 4) {
				length[k] = 1;
				length[k - 1]++;
			}
		}
	}
	return 0;
}
