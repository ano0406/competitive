#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>
#include <bitset>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

void stairs(long long N, vector<long long>& st, long long mod = 1e9 + 7) {
	st.resize(N + 1, 1);
	for (long long n = 2; n <= N; n++) {
		st[n] = (st[n - 1] * n) % mod;
	}
}

void modinvs(long long N, vector<long long>& inv, vector<long long>& sinv, long long mod = 1e9 + 7) {
	inv.resize(N + 1);
	sinv.resize(N + 1);
	inv[1] = 1;
	sinv[0] = 1;
	sinv[1] = 1;
	for (int n = 2; n <= N; n++) {
		inv[n] = mod - (inv[mod % n] * (mod / n)) % mod;
		sinv[n] = (sinv[n - 1] * inv[n]) % mod;
	}
}

long long Comb(long long n, long long k, vector<long long>& st, vector<long long>& sinv, long long mod = 1e9 + 7) {
	long long ans = st[n];
	ans = (ans * sinv[n - k]) % mod;
	ans = (ans * sinv[k]) % mod;
	return ans;
}

VLL sts, invs, invss;

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	stairs(1e5, sts);
	modinvs(1e5, invs, invss);
	ll Q;
	cin >> Q;
	for (ll q = 0; q < Q; q++) {
		ll N, K;
		cin >> N >> K;
		ll ans = 0;
		if (N & 1) {
			N /= 2;
			ll DD = (2 * N + 1) * (2 * N + 1) - 8 * K;
			if (DD > 0) {
				ld D = round(sqrtl(DD));
				if (fabsl(D * D - DD) < 1e-3) {
					ll a = 2 * N + 1 + D;
					if (a % 4 == 0) {
						a /= 4;
						ans += Comb(N, a, sts, invss);
						ans %= MOD;
					}
					ll b = 2 * N + 1 - D;
					if (b >= 0 && b % 4 == 0) {
						b /= 4;
						ans += Comb(N, b, sts, invss);
						ans %= MOD;
					}
				}
			}
			DD = (2 * N - 1) * (2 * N - 1) - 8 * (K - N);
			if (DD > 0) {
				ll D = round(sqrtl(DD));
				if (fabsl(D * D - DD) < 1e-3) {
					ll a = 2 * N - 1 + D;
					if (a >= 0 && a % 4 == 0) {
						a /= 4;
						ans += Comb(N, a, sts, invss);
						ans %= MOD;
					}
					ll b = 2 * N - 1 - D;
					if (b >= 0 && b % 4 == 0) {
						b /= 4;
						ans += Comb(N, b, sts, invss);
						ans %= MOD;
					}
				}
			}
		}
		else {
			N /= 2;
			ll DD = N * N - 2 * K;
			if (DD == 0) {
				if (N % 2 == 0) {
					ans += Comb(N, N / 2, sts, invss);
				}
			}
			else {
				ll D = round(sqrtl(DD));
				if (fabsl(D * D - DD) < 1e-3) {
					ll Dl = round(D);
					ll a = N + D;
					if (a % 2 == 0) {
						a /= 2;
						ans += Comb(N, a, sts, invss);
					}
					ll b = N - D;
					if (b >= 0 && b % 2 == 0) {
						b /= 2;
						ans += Comb(N, b, sts, invss);
					}
					ans %= MOD;
				}
			}
		}
		cout << ans << "\n";
	}
	return 0;
}