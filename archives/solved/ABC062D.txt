void solve();

int main() {
	solve();
	return 0;
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
#include <iostream>
#include <queue>
#include <algorithm>
#include <vector>
using namespace std;
int N;
int A[300000];
long long sum1[100001];   //0 - N-1,0 - N,0 - N+1 ,...Ç©ÇÁNå¬éÊÇ¡ÇΩÇ∆Ç´ÇÃòaÇÃç≈ëÂíl
long long sum2[100001];   //2*N - 3*N-1,2*N-1 - 3*N-1,...,2*N-i - 3*N-1,...ÇÃòaÇÃç≈è¨íl
priority_queue<int, vector<int>, greater<int>> q1;
priority_queue<int> q2;

void solve() {
	cin >> N;
	for (int n = 0; n < 3 * N; n++)cin >> A[n];
	sum1[0] = 0;
	for (int n = 0; n < N; n++) {
		sum1[0] += A[n];
		q1.push(A[n]);
	}
	for (int n = N; n < 2 * N; n++) {
		if (q1.top() < A[n]) {
			sum1[n-N+1] = sum1[n-N]+A[n]-q1.top();
			q1.pop();
			q1.push(A[n]);
		}else sum1[n - N + 1] = sum1[n - N] ;
	}
	sum2[0] = 0;
	for (int n = 3 * N - 1; n >= 2 * N; n--) {
		sum2[0] += A[n];
		q2.push(A[n]);
	}
	for (int i = 1; i <= N; i++) {
		if (q2.top() > A[2*N-i]) {
			sum2[i] = sum2[i-1] + A[2 * N - i] - q2.top();
			q2.pop();
			q2.push(A[2 * N - i]);
		}
		else sum2[i] = sum2[i-1];
	}
	long long ans = -100000000000000;
	for (int n = 0; n <= N; n++) {
		if (ans < sum1[n] - sum2[N - n])ans = sum1[n] - sum2[N - n];
	}
	cout << ans << endl;
	return;
}