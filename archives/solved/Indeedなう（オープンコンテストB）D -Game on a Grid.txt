#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
using namespace std;
long long MOD = 1e9 + 7;

//unionFind
class unionFind {
private:
	int* p;   //親配列のポインタ
	int* rank;
	int N;   //要素数
	int* check;   //同値な要素の数
public:
	unionFind(int);   //コンストラクタ
	int parent(int);   //親要素を返す
	void unit(int, int);   //2要素をつなぐ
	int operator[](int);   //parentの省略形
	~unionFind();
	int size(int n);   //頂点nと同値な要素数を返す
};

unionFind::unionFind(int n) {
	N = n;
	p = new int[N];
	rank = new int[N];
	for (int i = 0; i < N; i++) {
		p[i] = i;
		rank[i] = 0;
	}
	check = new int[N];
	for (int n = 0; n < N; n++)check[n] = 1;
	return;
}

int unionFind::parent(int n) {
	if (n < 0 || n >= N)return -1;
	if (p[n] == n)return n;   //自分が一番上の親
	return p[n] = parent(p[n]);   //つなぎ直しと上にたどる操作
}

int unionFind::operator[](int n) {
	return parent(n);
}

void unionFind::unit(int x, int y) {
	x = parent(x), y = parent(y);
	if (x == y)return;   //根が同じだから何もせずに帰る
	int sum = check[x] + check[y];
	if (rank[x] < rank[y])p[x] = y;
	else {
		p[y] = x;
		if (rank[x] == rank[y])rank[x]++;
	}
	check[x] = sum;
	check[y] = sum;
	return;
}

unionFind::~unionFind() {
	delete(p);
	delete(rank);
	delete(check);
	return;
}

int unionFind::size(int n) {
	return check[parent(n)];
}

struct edge {
	int u, v;
	long long w;
};   //無向辺管理のクラス(u,v:頂点、w:重み) この場合、(u,v)と(v,u)両方を登録、みたいなことはない
vector<edge> Edges;   //辺集合
vector<vector<long long>> P;


int W, H,SX,SY,GX,GY;
long long S = 0;

int conv(int x, int y) {
	return W * y + x;
}

int main() {
	cin >> W >> H >> SX >> SY >> GX >> GY;
	P.resize(W, vector<long long>(H, 0));
	for (int y = 0; y < H; y++) {
		for (int x = 0; x < W; x++) {
			cin >> P[x][y];
			S += P[x][y];
		}
	}
	int vect[4][2] = {
		{1,0},{-1,0},{0,1},{0,-1}
	};
	for (int X = 0; X < W; X++) {
		for (int Y = 0; Y < H; Y++) {
			for (int v = 0; v < 4; v++) {
				int x = X + vect[v][0];
				int y = Y + vect[v][1];
				if (x == -1 || x == W || y == -1 || y == H)continue;
				if (X > x && (X != x || Y > y))continue;
				Edges.push_back({ conv(X, Y), conv(x, y), -P[X][Y] * P[x][y] });
			}
		}
	}
	std::sort(Edges.begin(), Edges.end(), [](edge a, edge b) {return a.w < b.w; });
	long long res = 0;   //結果
	unionFind uf(W*H);
	for (int e = 0; e < Edges.size(); e++) {
		if (uf[Edges[e].u] == uf[Edges[e].v])continue;
		uf.unit(Edges[e].u, Edges[e].v);
		res += Edges[e].w;
	}
	cout << -res + S << endl;
	return 0;
}