#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 998244353;//1e9 + 7;
typedef long long LL;
typedef long double LD;
typedef pair<LL, LL> PLL;
typedef pair<LD, LL> PDL;
typedef pair<LD, LD> PDD;
typedef vector<LL> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

template<class T>
void in(T& x) {
	cin >> x;
}

template<class T1, class T2>
void in(pair<T1, T2>& p) {
	in(p.first);
	in(p.second);
}

template<class T>
void in(vector<T>& v, LL st = -1, LL en = -1) {
	if (st == -1) {
		st = 0;
		en = v.size() - 1;
	}
	for (LL n = st; n <= en; n++) {
		in(v[n]);
	}
}

class Ab {
public:
	LL a,b;
	Ab(LL _a,LL _b) :a(_a),b(_b) {};
	PLL operator()() {
		return PLL(a,b);
	}
	static Ab E;
	Ab() :a(1),b(0) {};
};
Ab Ab::E = Ab(1,0);
Ab operator+(Ab a, Ab b) {
	return Ab((a.a*b.a)%MOD,(a.b*b.a+b.b)%MOD);
}

//数列タイプのtreap
//Xorshift
unsigned int Xorshift() {
	static unsigned int tx = 123456789, ty = 362436069, tz = 521288629, tw = 88675123;
	unsigned int tt = (tx ^ (tx << 11));
	tx = ty; ty = tz; tz = tw;
	return (tw = (tw ^ (tw >> 19)) ^ (tt ^ (tt >> 8)));
}

struct node_t {
	Ab val;   //値
	node_t* ch[2];   //子
	LL pri;   //優先度
	LL cnt;   //子の個数
	Ab sum;   //値の和
	static LL node_count;   //プール用の要素を数える変数
	static const LL MAX_N = 4000000 + 10;   //プールのサイズ
	void* operator new(std::size_t) {
		static node_t pool[MAX_N];   //プール
		return pool + node_count++;
	}
	static void delete_all() {
		node_count = 0;
	}
	node_t(Ab v) {
		val = v;
		ch[0] = ch[1] = NULL;
		cnt = 1;
		sum = v;
		pri = Xorshift();
	}
	node_t() {
		val = Ab();
		ch[0] = ch[1] = NULL;
		cnt = 1;
		sum = val;
		pri = Xorshift();
	}
	node_t* update() {
		node_t* t = this;
		t->cnt = (t->ch[0] ? t->ch[0]->cnt : 0) + (t->ch[1] ? t->ch[1]->cnt : 0) + 1;
		t->sum = (t->ch[0] ? t->ch[0]->sum : Ab::E) + t->val;
		t->sum = t->sum + (t->ch[1] ? t->ch[1]->sum : Ab::E);
		return t;
	}
};
LL node_t::node_count = 0;


//2つのtreapをマージ
node_t* merge(node_t* l, node_t* r) {
	if (!l || !r)return !l ? r : l;
	if (l->pri > r->pri) {
		l->ch[1] = merge(l->ch[1], r);
		return l->update();
	}
	else {
		r->ch[0] = merge(l, r->ch[0]);
		return r->update();
	}
}

//treapを[0,k)と[k,n)にsplit
pair<node_t*, node_t*> split(node_t* t, LL k) {
	typedef pair<node_t*, node_t*> P;
	if (!t)return P(NULL, NULL);
	LL count = t->ch[0] ? t->ch[0]->cnt : 0;
	if (k <= count) {
		P s = split(t->ch[0], k);
		t->ch[0] = s.second;
		return P(s.first, t->update());
	}
	else {
		P s = split(t->ch[1], k - count - 1);
		t->ch[1] = s.first;
		return P(t->update(), s.second);
	}
}

//treap trの場所kに要素tを追加
node_t* insert(node_t* tr, LL k, node_t* t) {
	auto sp = split(tr, k);
	sp.first = merge(sp.first, t);
	return merge(sp.first, sp.second);
}

//treap trの場所kの要素を消去
node_t* erase(node_t* tr, LL k) {
	auto sp = split(tr, k - 1);
	auto sp2 = split(sp.second, 1);
	delete sp2.first;
	return merge(sp.first, sp2.second);
}

//void print(node_t* root) {
//	if (root == NULL)return;
//	print(root->ch[0]);
//	cout << " " << root->val();
//	print(root->ch[1]);
//	return;
//}

node_t* index(node_t* root, LL n) {
	if (!root)return NULL;
	LL ln = (root->ch[0] ? root->ch[0]->cnt : 0);
	LL rn = (root->ch[1] ? root->ch[1]->cnt : 0);
	if (n >= ln + rn)return NULL;
	if (n < ln)return index(root->ch[0], n);
	else if (n == ln)return root;
	else return index(root->ch[1], n - (ln + 1));
}

node_t* change(node_t* root, LL n, Ab x) {
	if (!root)return NULL;
	LL ln = (root->ch[0] ? root->ch[0]->cnt : 0);
	LL rn = (root->ch[1] ? root->ch[1]->cnt : 0);
	if (n >= ln + rn + 1)return NULL;
	if (n < ln) {
		node_t* r = change(root->ch[0], n, x);
		root->update();
		return r;
	}
	else if (n == ln) {
		root->val = x;
		root->update();
		return root;
	}
	else {
		node_t* r = change(root->ch[1], n - (ln + 1), x);
		root->update();
		return r;
	}
}

//[l,r]
Ab rangesum(node_t* root, LL l, LL r) {
	if (root == NULL)return Ab();
	LL ln = (root->ch[0] ? root->ch[0]->cnt : 0);
	LL rn = (root->ch[1] ? root->ch[1]->cnt : 0);
	if (r < 0 || l > ln + rn)return Ab();
	l = max((LL)0, l);
	r = min(ln + rn, r);
	if (l == 0 && r == ln + rn)return root->sum;
	Ab ans = rangesum(root->ch[0], l, r);
	if (l <= ln && ln <= r)ans = ans + root->val;
	ans = ans + rangesum(root->ch[1], l - ln - 1, r - ln - 1);
	return ans;
}

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	LL N, Q;
	cin >> N >> Q;
	node_t* tree = nullptr;
	for (LL n = 0; n < N; n++) {
		LL a, b;
		cin >> a >> b;
		tree = merge(tree, new node_t(Ab(a,b)));
	}
	for (LL q = 0; q < Q; q++) {
		LL t;
		cin >> t;
		if (t == 0) {
			LL p, c, d;
			cin >> p >> c >> d;
			change(tree, p, Ab(c, d));
		}
		else {
			LL l, r, x;
			cin >> l >> r >> x;
			PLL temp = rangesum(tree, l, r - 1)();
			cout << (temp.first * x + temp.second) % MOD << "\n";
		}
	}
	return 0;
}
