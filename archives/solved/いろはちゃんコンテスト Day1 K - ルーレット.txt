#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>
#include <bitset>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

ll dig(ll X) {
	ll ans = 1;
	while (X > 0) {
		ans *= 10;
		X /= 10;
		ans %= MOD;
	}
	return ans;
}

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	ll N;
	cin >> N;
	ll S = 0;
	ll p = 1;
	for (ll n = 0; n < N; n++) {
		ll M;
		cin >> M;
		ll SS = 0;
		for (ll m = 0; m < M; m++) {
			ll A;
			cin >> A;
			ll temp = A * p;
			temp %= MOD;
			temp += S * dig(A);
			temp %= MOD;
			SS = (SS + temp) % MOD;
		}
		S = SS;
		p = (p * M) % MOD;
	}
	cout << S << "\n";
	return 0;
}