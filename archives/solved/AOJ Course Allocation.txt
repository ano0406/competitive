#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>

using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
//typedef boost::multiprecision::cpp_int bigint;

ll N, K;
vector<ll> W;

bool calc(ll P) {
	ll ans = 0;
	ll cur = 0;
	for (ll n = 0; n < N; n++) {
		if (W[n] > P)return false;
		if (cur + W[n] <= P)cur += W[n];
		else {
			ans++;
			cur = W[n];
		}
	}
	if (ans + 1 <= K)return true;
	else return false;
}

int main() {
	cin >> N >> K;
	W.resize(N);
	for (ll n = 0; n < N; n++)cin >> W[n];
	ll s = 0, e = 1e9;
	while (e - s > 1) {
		ll m = (e+s)/2;
		if (calc(m))e = m;
		else s = m;
	}
	cout << e << endl;
	return 0;
}