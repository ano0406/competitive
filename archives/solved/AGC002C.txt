#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>

using namespace std;
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
//typedef boost::multiprecision::cpp_int bigint;

ll N,L;
queue<ll> ans;

int main() {
	cin >> N >> L;
		ll prev;
		cin >> prev;
		for (ll n = 1; n <= N-1; n++) {
			ll a;
			cin >> a;
			if (prev + a >= L) {
				cout << "Possible" << endl;
				for (ll f = 1; f < n; f++)cout << f << endl;
				for (ll f = N - 1; f >= n; f--)cout << f << endl;
				return 0;
			}
			prev = a;
		}
		cout << "Impossible" << endl;
		return 0;
}
