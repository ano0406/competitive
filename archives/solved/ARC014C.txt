#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long long LL;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

vector<LL> stones;
LL maxerase = 0;
LL N;

LL calc(LL n, deque<LL> V, LL cur) {
	if (n == N) {
		maxerase = max(cur, maxerase);
		return cur;
	}
	if (V.size() == 0) {
		if (n == N - 1) {
			maxerase = max(cur, maxerase);
			return cur;
		}
		else if(stones[n] == stones[n+1]){
			return calc(n + 2, V, cur+2);
		}
		else {
			V.push_back(stones[n]);
			V.push_back(stones[n + 1]);
			return calc(n + 2, V, cur);
		}
	}
	if (n == N - 1) {
		LL l = stones.back();
		if (l == V[0] || l == V.back()) {
			maxerase = max(maxerase, cur + 2);
			return cur + 2;
		}
		else {
			maxerase = max(maxerase, cur);
			return cur;
		}
	}
	LL one = V[0];
	LL two = V.back();
	LL s1 = stones[n];
	LL s2 = stones[n + 1];
	if (one != two) {
		if (s1 == s2) {
			return calc(n + 2, V, cur + 2);
		}
		else if (one == s1 && two == s2) {
			V.pop_back();
			V.pop_front();
			return calc(n + 2, V, cur + 4);
		}
		else if (one == s2 && two == s1) {
			V.pop_back();
			V.pop_front();
			return calc(n + 2, V, cur + 4);
		}
		else if (s1 == one && s2 != two) {
			V[0] = s2;
			LL ans1 = calc(n + 2, V, cur + 2);
			V.pop_front();
			V.push_back(s2);
			LL ans2 = calc(n + 2, V, cur + 2);
			return max(ans1, ans2);
		}
		else if (s1 == two && s2 != one) {
			V.pop_back();
			V.push_front(s2);
			LL ans1 = calc(n + 2, V, cur + 2);
			V.pop_front();
			V.push_back(s2);
			LL ans2 = calc(n + 2, V, cur + 2);
			return max(ans1, ans2);
		}
		else if (s2 == one) {
			V.pop_front();
			V.push_back(s1);
			return calc(n + 2, V, cur + 2);
		}
		else {
			V.pop_back();
			V.push_front(s1);
			return calc(n + 2, V, cur + 2);
		}
	}
	else {
		if (s1 == s2) {
			return calc(n + 2, V, cur + 2);
		}
		else if (s1 == one) {
			V[0] = s2;
			LL ans1 = calc(n + 2, V, cur + 2);
			V.pop_front();
			V.push_back(s2);
			LL ans2 = calc(n + 2, V, cur + 2);
			return max(ans1, ans2);
		}
		else if (s1 != one && s2 != one) {
			V.push_back(s1);
			V.push_front(s2);
			LL ans1 = calc(n + 2, V, cur);
			V[0] = s1;
			V.back() = s2;
			LL ans2 = calc(n + 2, V, cur);
			return max(ans1, ans2);
		}
		else {
			V.pop_front();
			V.push_back(s1);
			LL ans1 = calc(n + 2, V, cur + 2);
			V.pop_back();
			V.pop_back();
			V.push_front(one);
			V.push_front(s1);
			LL ans2 = calc(n + 2, V, cur + 2);
			return max(ans1, ans2);
		}
	}
}

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	cin >> N;
	if (N == 1) {
		cout << 1 << "\n";
		return 0;
	}
	string S;
	cin >> S;
	if (N == 2) {
		if (S[0] == S[1])cout << 0 << "\n";
		else cout << 2 << "\n";
		return 0;
	}
	for (LL n = 0; n < N; n++) {
		if (S[n] == 'R')stones.push_back(0);
		else if (S[n] == 'G')stones.push_back(1);
		else stones.push_back(2);
	}
	calc(0, deque<LL>(), 0);
	cout << N - maxerase << "\n";
	return 0;
}
