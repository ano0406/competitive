#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
using namespace std;
const long long MOD = 1e9+7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
//typedef boost::multiprecision::cpp_int bigint;

ll H, W;
vector<vector<ll>> MAP;
struct query {
	ll x0, y0;
	ll x, y;
};
vector<query> ans;

int main() {
	cin >> H >> W;
	MAP.resize(W, vector<ll>(H, 0));
	for (ll y = 0; y < H; y++) {
		for (ll x = 0; x < W; x++)cin >> MAP[x][y];
	}
	for (ll y = 0; y < H; y++) {
		for (ll x = 0; x < W; x++) {
			if (MAP[x][y] % 2 == 0)continue;
			if (x + 1 < W) {
				MAP[x][y]--;
				MAP[x + 1][y]++;
				ans.push_back({ x,y,x + 1,y });
				continue;
			}
			if (y + 1 < H) {
				MAP[x][y]--;
				MAP[x][y + 1]++;
				ans.push_back({ x,y,x,y + 1 });
				continue;
			}
		}
	}
	cout << ans.size() << endl;
	for (auto q : ans) {
		cout << q.y0+1 << " " << q.x0+1 << " " << q.y+1 << " " << q.x+1 << endl;
	}
	return 0;
}
