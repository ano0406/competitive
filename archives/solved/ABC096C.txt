#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
using namespace std;
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
//typedef boost::multiprecision::cpp_int bigint;

vector<vector<ll>> MAP;
ll W, H;

int main() {
	cin >> H >> W;
	MAP.resize(W + 2, vector<ll>(H + 2, 0));
	for (ll y = 0; y < H; y++) {
		string S;
		cin >> S;
		for (ll x = 0; x < W; x++) {
			if (S[x] == '#')MAP[x+1][y+1] = 1;
		}
	}
	ll vect[4][2] = {
		{1,0},{0,-1},{-1,0},{0,1}
	};
	for (ll x = 1; x <= W; x++) {
		for (ll y = 1; y <= H; y++) {
			if (MAP[x][y] == 0)continue;
			ll flag = false;
			for (ll v = 0; v < 4 && !flag; v++) {
				if (MAP[x + vect[v][0]][y + vect[v][1]] == 1)flag = true;
			}
			if (!flag) {
				cout << "No" << endl;
				return 0;
			}
		}
	}
	cout << "Yes" << endl;
	return 0;
}
