#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>

using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	ll N;
	cin >> N;
	VLL ans(N);
	VVLL res;
	res.resize(3, VLL(N));
	for (ll n = 0; n < N; n++) {
		for (ll q = 0; q < 3; q++)cin >> res[q][n];
	}
	for (ll q = 0; q < 3; q++) {
		VLL count(100 + 1, 0);
		VLL num(N);
		for (ll n = 0; n < N; n++) {
			count[res[q][n]]++;
			num[n] = res[q][n];
		}
		for (ll n = 0; n < N; n++) {
			if (count[num[n]] == 1)ans[n] += num[n];
		}
	}
	for (ll n = 0; n < N; n++) {
		cout << ans[n] << "\n";
	}
	return 0;
}
