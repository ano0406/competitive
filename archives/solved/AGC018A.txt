#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>
#include <bitset>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

ll N, K, M;
VLL A;

//ç≈ëÂåˆñÒêî
//O(log max(a,b))
template<class T>
T GCD(T a, T b) {
	if (b == 0)return a;
	return GCD(b, (T)(a % b));
}

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	cin >> N >> K;
	A.resize(N);
	M = 0;
	for (ll n = 0; n < N; n++) {
		cin >> A[n];
		M = max(A[n], M);
	}
	if (K > M) {
		cout << "IMPOSSIBLE\n";
		return 0;
	}
	if (N == 1) {
		if (A[0] == K)cout << "POSSIBLE\n";
		else cout << "IMPOSSIBLE\n";
		return 0;
	}
	for (ll n = 0; n < N; n++) {
		if (A[n] == K) {
			cout << "POSSIBLE\n";
			return 0;
		}
	}
	ll G = GCD(A[0], A[1]);
	for (ll n = 2; n < N; n++) {
		G = GCD(G, A[n]);
	}
	if (K % G == 0)cout << "POSSIBLE\n";
	else cout << "IMPOSSIBLE\n";
	return 0;
}