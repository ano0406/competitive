#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>
#include <bitset>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

ll N, Q;
string S;
struct query {
	string s;
	ll d;
};
vector<query> querys;

bool judgel(ll X) {
	for (query q: querys) {
		if (S[X] != q.s[0])continue;
		X += q.d;
	}
	return (X == 0);
}

bool judger(ll X) {
	for (query q : querys) {
		if (S[X] != q.s[0])continue;
		X += q.d;
	}
	return (X == N+1);
}

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	cin >> N >> Q;
	cin >> S;
	S = string(" ") + S + string(" ");
	querys.resize(Q);
	for (ll n = 0; n < Q; n++) {
		cin >> querys[n].s;
		string d;
		cin >> d;
		if (d[0] == 'L')querys[n].d = -1;
		else querys[n].d = 1;
	}
	ll ls = 0, le = N+1;
	//ls以左の駒は<1に出て死ぬ le以右は死なない
	while (le - ls > 1) {
		ll m = (le + ls) / 2;
		if (judgel(m))ls = m;
		else le = m;
	}
	ll re = N + 1, rs = 0;
	//re以右の駒は>Nに出て死ぬ rs以左は死なない
	while (re - rs > 1) {
		ll m = (re + rs) / 2;
		if (judger(m))re = m;
		else rs = m;
	}
	cout << rs - le + 1 << "\n";
	return 0;
}
