#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
using namespace std;
const long long MOD = 1e9+7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
//typedef boost::multiprecision::cpp_int bigint;
ll N;
vector<ll> DP1, DP2,A;

int main() {
	cin >> N;
	A.resize(N + 2,0);
	for (ll n = 1; n <= N; n++)cin >> A[n];
	DP1.resize(N,0);
	for (ll n = 1; n < N; n++) {
		DP1[n] += abs(A[n] - A[n - 1]) + DP1[n - 1];
	}
	DP2.resize(N + 2, 0);
	for (ll n = N; n >= 1; n--) {
		DP2[n] += DP2[n + 1] + abs(A[n + 1] - A[n]);
	}
	for (ll n = 1; n <= N; n++) {
		cout << DP1[n - 1] + DP2[n + 1] + abs(A[n + 1] - A[n - 1]) << endl;
	}
	return 0;
}
