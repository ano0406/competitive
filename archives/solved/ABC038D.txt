void solve();

int main() {
	solve();
	return 0;
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
#include <iostream>
#include <algorithm>
#include <vector>
#include <set>
#include <queue>
#include <functional>
#include <map>
#include <string>
#include <boost/multiprecision/cpp_int.hpp>
#include <limits.h>
#include <iomanip>
#include <stack>

using namespace std;
using namespace boost::multiprecision;

typedef pair<int, int> pii;
vector<int> dp;
vector<pii> vec;
bool func(pii a, pii b) {
	if (a.first != b.first)return a.first < b.first;
	else return a.second > b.second;
}
int N;

void solve() {
	cin >> N;
	vec.resize(N);
	for (int n = 0; n < N; n++) {
		cin >> vec[n].first >> vec[n].second;
	}
	sort(vec.begin(), vec.end(), func);
	dp.resize(N + 1,100001);
	dp[0] = 0;
	for (int n = 0; n < N; n++) {
		int s = 0, e = N;
		while (e - s > 1) {
			int m = (e + s) / 2;
			if (dp[m] < vec[n].second)s = m;
			else e = m;
		}
		dp[e] = vec[n].second;
	}
	int l = 1;
	while (l < N) {
		if (dp[l+1] == 100001)break;
		l++;
	}
	cout << l << endl;
	return;
}