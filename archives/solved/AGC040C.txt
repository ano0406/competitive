#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
using namespace std;
const long long MOD = 1e9+7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
//typedef boost::multiprecision::cpp_int bigint;

//ägí£ägí£EuclidÇÃå›èúñ@Ç…ÇÊÇÈ(äKèÊ)ãtå≥ÇÃãÅÇﬂï˚
//O(N)
void stairs(long long N, vector<long long>& st, long long mod = 1e9 + 7) {
	st.resize(N + 1, 1);
	for (long long n = 2; n <= N; n++) {
		st[n] = (st[n - 1] * n) % mod;
	}
}

void modinvs(long long N, vector<long long>& inv, vector<long long>& sinv, long long mod = 1e9 + 7) {
	inv.resize(N + 1);
	sinv.resize(N + 1);
	inv[1] = 1;
	sinv[0] = 1;
	sinv[1] = 1;
	for (int n = 2; n <= N; n++) {
		inv[n] = mod - (inv[mod % n] * (mod / n)) % mod;
		sinv[n] = (sinv[n - 1] * inv[n]) % mod;
	}
}

long long Comb(long long n, long long k, vector<long long>& st, vector<long long>& sinv, long long mod = 1e9 + 7) {
	long long ans = st[n];
	ans = (ans * sinv[n - k]) % mod;
	ans = (ans * sinv[k]) % mod;
	return ans;
}

ll N;
vector<ll> stair, inv, sinv;
vector<ll> pows3,pows2;

int main() {
	cin >> N;
	stairs(N, stair, 998244353);
	modinvs(N, inv, sinv, 998244353);
	ll temp = 0;
	ll mod = 998244353;
	pows3.resize(N + 1);
	pows3[0] = 1;
	for (ll n = 1; n <= N; n++) {
		pows3[n] = (pows3[n - 1] * 3) % mod;
	}
	pows2.resize(N + 1);
	pows2[0] = 1;
	for (ll n = 1; n <= N; n++) {
		pows2[n] = (pows2[n - 1] * 2) % mod;
	}
	ll ans = pows3[N];
	for (ll k = N / 2+1; k <= N; k++) {
		ll comb = Comb(N, k, stair, sinv, mod);
		comb = (2 * comb * pows2[N - k]) % mod;
		temp = (temp + comb) % mod;
	}
	ans = (ans - temp) % mod;
	ans = (ans + mod) % mod;
	cout << ans << endl;
	return 0;
}
