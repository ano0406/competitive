#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
using namespace std;

template<class T>
void in(vector<T>& V) {
	for (auto itr = V.begin(); itr != V.end(); itr++)cin >> *itr;
	return;
}

template<class T>
void out(vector<T>& V) {
	for (T& itr : V)cout << itr << endl;
	return;
}

typedef pair<int, int> pii;
priority_queue < pii > q;
int N, M;
vector<vector<pii>> A;

int main() {
	cin >> N >> M;
	A.resize(M+1);
	for (int n = 0; n < N; n++) {
		int a, b;
		cin >> a >> b;
		if (a > M)continue;
		A[a].push_back(pii(b, a));
	}
	int ans = 0;
	for (int m = M - 1; m >= 0; m--) {
		for (pii a : A[M - m]) {
			q.push(a);
		}
		if (q.size() > 0) {
			ans += q.top().first;
			q.pop();
		}
	}
	cout << ans << endl;
	return 0;
}

//////////////////////////////

#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
using namespace std;

template<class T>
void in(vector<T>& V) {
	for (auto itr = V.begin(); itr != V.end(); itr++)cin >> *itr;
	return;
}

template<class T>
void out(vector<T>& V) {
	for (T& itr : V)cout << itr << endl;
	return;
}

//ãÛvectorÇóvëfêîNÇÃsegTreeÇ∆ÇµÇƒzÇ≈èâä˙âª
template<class T>
void segTree_init(vector<T>& vec, int N, T z) {
	int RN = 1;
	while (RN < N)RN *= 2;
	vec.resize(2 * RN, z);
}

//vecÇsegTreeÇ∆ÇµÇƒnî‘ñ⁄ÇxÇ…
template<class T>
void segTree_set(vector<T>& vec, int n, T x, function<T(T, T)> f, int k = -1) {
	int RN = (vec.size() + 1) / 2;
	if (k == -1) {
		k = n + RN;
		vec[k] = x;
		segTree_set(vec, n, x, f, k / 2);
	}
	else if (k != 0) {
		vec[k] = f(vec[2 * k], vec[2 * k + 1]);
		segTree_set(vec, n, x, f, k / 2);
	}
}

//vecÇ™segTreeÇÃéûÇÃÅAnî‘ñ⁄ÇÃóvëf
template<class T>
T segTree_at(vector<T>& vec, int n) {
	int RN = (vec.size()) / 2;
	return vec[RN + n];
}

//get [a,b]
template<class T>
T segTree_get(vector<T>& vec, int a, int b, function<T(T, T)> f, T e, int k = 1, int l = 0, int r = -1) {
	if (r == -1)r = vec.size() / 2 - 1;
	if (b < l || r < a)return e;
	else if (a <= l && r <= b)return vec[k];
	else return f(
		segTree_get(vec, a, b, f, e, 2 * k, l, (l + r) / 2),
		segTree_get(vec, a, b, f, e, 2 * k + 1, (l + r) / 2 + 1, r)
	);
}

int N, M;
typedef pair<int, int> pii;
vector<pii> A;
vector<int> seg;
function<int(int,int)> lambda = [](int a, int b) {
	return max(a, b);
};

int main() {
	cin >> N >> M;
	A.resize(N);
	for (int n = 0; n < N; n++) {
		int a, b;
		cin >> a >> b;
		A[n] = pii(a, b);
	}
	sort(A.begin(), A.end(), [](pii a,pii b) {
		return a.second > b.second;
	});
	segTree_init(seg, M, -1);
	for (int m = 0; m < M; m++) {
		segTree_set(seg, m, m, lambda);
	}
	int ans = 0;
	for (int n = 0; n < N; n++) {
		int latest = segTree_get(seg, 0, M - A[n].first, lambda, -1);
		if (latest == -1)continue;
		ans += A[n].second;
		segTree_set(seg, latest, -1, lambda);
	}
	cout << ans << endl;
	return 0;
}
