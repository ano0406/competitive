#include <iostream>
#include <algorithm>
#include <map>
#include <set>
#include <vector>
#include <queue>

using namespace std;
typedef pair<int, int> pii;
typedef pair<int, long double> pild;
typedef pair<long double, int> pldi;

void solve();

int main() {
	solve();
	return 0;
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
int W,H;
long int A[1000][1000];
long int S[1000][1000];
typedef pair<long int, pii> _p;
priority_queue<_p> q;
long int M = 1000000007;

bool isIn(int x, int y) {
	return (x >= 0 && x < W && y >= 0 && y < H);
}

void solve() {
	cin >> H >> W;
	for(int y = 0;y < H;y++){
		for (int x = 0; x < W; x++) {
			cin >> A[x][y];
			q.push(_p(A[x][y],pii(x,y)));
		}
	}
	long int ans = 0;
	while (!q.empty()) {
		_p e = q.top();
		q.pop();
		int vs[4][2] = { {1,0},{0,1},{-1,0},{0,-1} };
		int x = e.second.first;
		int y = e.second.second;
		S[x][y] = 1;
		ans++;
		for (int v = 0; v < 4; v++) {
			if (isIn(x + vs[v][0], y + vs[v][1])) {
				if (A[x + vs[v][0]][y + vs[v][1]] > A[x][y]) {
					S[x][y] = (S[x + vs[v][0]][y + vs[v][1]] + S[x][y]) % M;
					ans = (ans+ S[x + vs[v][0]][y + vs[v][1]]) % M;
				}
			}
		}
	}
	cout << ans << endl;
	return;
}