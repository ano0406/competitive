void solve();

int main() {
	solve();
	return 0;
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
#include <iostream>
#include <vector>
#include <algorithm>
#include <functional>
#include <limits.h>
#include <math.h>
#include <iomanip>
#include <string>
#include <queue>
using namespace std;
typedef pair<int, int> pii;
typedef long double ld;
typedef long long ll;

int N, M;
vector<vector<vector<int>>> dp;
vector<int> FB;
int MOD = 1e9 + 7;

void solve() {
	cin >> N >> M;
	FB.resize(M + 2);
	for (int m = 1; m <= M; m++) {
		string S;
		cin >> S;
		if (S == string("Fizz"))FB[m] = 1;
		else if (S == string("Buzz"))FB[m] = 2;
		else FB[m] = 3;
	}
	FB[M + 1] = 0;
	dp.resize(N + 1);
	for (int n = 1; n <= N; n++) {
		dp[n].resize(min(n, M)+1);
		for (int m = 0; m <= min(n, M); m++)dp[n][m].resize(15, 0);
	}
	for (int i = 1; i <= 9; i++) {
		if (i % 3 == 0 || i % 5 == 0)continue;
		dp[1][0][i] = 1;
	}
	if (FB[1] == 1) {
		dp[1][1][3] = 1;
		dp[1][1][6] = 1;
		dp[1][1][9] = 1;
	}
	else if (FB[1] == 2) {
		dp[1][1][5] = 1;
	}
	for (int n = 1; n < N; n++) {
		for (int m = 0; m <= min(n, M); m++) {
			for (int p = 0; p < 15; p++) {
				for (int i = 0; i < 10; i++) {
					int nextp = (10 * p + i) % 15;
					if (nextp % 3 != 0 && nextp % 5 != 0) {
						dp[n + 1][m][nextp] += dp[n][m][p];
						dp[n + 1][m][nextp] %= MOD;
					}
					else if (nextp % 3 == 0 && nextp % 5 != 0) {
						if (FB[m + 1] == 1) {
							dp[n + 1][m+1][nextp] += dp[n][m][p];
							dp[n + 1][m+1][nextp] %= MOD;
						}
					}
					else if(nextp % 3 != 0 && nextp % 5 == 0) {
						if (FB[m + 1] == 2) {
							dp[n + 1][m+1][nextp] += dp[n][m][p];
							dp[n + 1][m+1][nextp] %= MOD;
						}
					}
					else {
						if (FB[m + 1] == 3) {
							dp[n + 1][m+1][nextp] += dp[n][m][p];
							dp[n + 1][m+1][nextp] %= MOD;
						}
					}
				}
			}
		}
	}
	int sum = 0;
	for (int i = 0; i < 15; i++) {
		sum += dp[N][M][i];
		sum %= MOD;
	}
	cout << sum << endl;
	return;
}
