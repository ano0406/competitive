#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

ll N;
VLL H, S;

bool judge(ll M) {
	VLL v;
	v.reserve(N);
	for (ll n = 0; n < N; n++) {
		if (M < H[n])return false;
		v.push_back((M - H[n]) / S[n]);
	}
	sort(v.begin(), v.end(), [](ll a, ll b) {
		return a < b;
	});
	for (ll n = 0; n < N; n++) {
		if (v[n] < n)return false;
	}
	return true;
}

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	cin >> N;
	H.resize(N);
	S.resize(N);
	for (ll n = 0; n < N; n++) {
		cin >> H[n] >> S[n];
	}
	ll s = 0, e = 1e15;
	while (e - s > 1) {
		ll m = (e + s) / 2;
		if (judge(m))e = m;
		else s = m;
	}
	cout << e << "\n";
	return 0;
}