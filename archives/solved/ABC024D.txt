#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

ll modpow(ll base, ll p) {
	if (p == 0)return 1;
	if (p == 1)return base;
	ll ans = modpow(base, p / 2);
	ans = (ans * ans) % MOD;
	if (p & 1)ans = (ans * base) % MOD;
	return ans;
}

ll modinv(ll n) {
	return modpow(n, MOD - 2);
}

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	ll A, B, C;
	cin >> A >> B >> C;
	ll p = (B * modinv(A))%MOD;
	ll q = (C * modinv(A)) % MOD;
	ll k = 1 + modinv(p) * q - q;
	k = (k + MOD) % MOD;
	ll kk = q - modinv(p) * q;
	kk %= MOD;
	kk = (kk + MOD) % MOD;
	ll r = kk * modinv(k);
	r %= MOD;
	r = (r + MOD) % MOD;
	ll l = (r * q + q - p) % MOD;
	l = (l + MOD) % MOD;
	ll c = l * modinv(p);
	c %= MOD;
	c = (c + MOD) % MOD;
	cout << r << " " << c << "\n";
	return 0;
}
