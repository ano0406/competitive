#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
using namespace std;
long long MOD = 1e9 + 7;
typedef long long ll;
typedef pair<ll, ll> pll;
//typedef boost::multiprecision::cpp_int bigint;
 
int main() {
	ll Q;
	cin >> Q;
	for (ll queue = 0; queue < Q; queue++) {
		ll N;
		cin >> N;
		vector<ll> P;
		P.resize(N);
		for (ll n = 0; n < N; n++) {
			cin >> P[n];
			P[n]--;
		}
		deque<ll> q;
		vector<ll> ans;
		ans.resize(N,-1);
		for (ll n = 0; n < N; n++) {
			if (ans[n] != -1)cout << ans[n] << " ";
			else {
				q.push_back(P[n]);
				while (q.back() != n) {
					q.push_back(P[q.back()]);
				}
				ll s = q.size();
				while (q.size() != 0) {
					ans[q.back()] = s;
					q.pop_back();
				}
				q.clear();
				cout << ans[n] << " ";
			}
		}
		cout << endl;
	}
	return 0;
}