#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
using namespace std;

int N,K;
vector<int> A;

bool judge(int M) {
	vector<int> B;
	for (int n = 0; n < N; n++) {
		B.push_back(A[n] % M);
		if (B.back() == 0)B.back() += M;
	}
	if (B.size() == 0)return true;
	else if (B.size() == 1)return false;
	sort(B.begin(), B.end());
	vector<int> BB1,BB2;
	BB1.resize(B.size());
	BB1[0] = B[0];
	for (int n = 1; n < B.size(); n++)BB1[n] = BB1[n - 1] + B[n];
	BB2.resize(B.size());
	BB2.back() = M-B.back();
	int c = BB1.back() / M;
	int a = 0;
	for (int n = N - 1; n >= N - c; n--)a += (M - B[n]);
	if (a <= K)return true;
	else return false;
}

void solve() {
	cin >> N >> K;
	A.clear();
	A.resize(N);
	int s = 0;
	for (int n = 0; n < N; n++) {
		cin >> A[n];
		s += A[n];
	}
	int ans = 0;
	for (int n = 1; n * n <= s; n++) {
		if (s % n != 0)continue;
		if (judge(n))ans = max(ans, n);
		if (judge(s / n))ans = max(ans, s / n);
	}
	cout << ans << endl;
	return;
}

//////////////////////////////
//////////////////////////////

int main() {
#ifdef DEBUGTIME
	for (int time = 0; time < DEBUGTIME; time++) {
		solve();
		cout << "####################" << endl;
	}
#else
	solve();
#endif
	return 0;
}
