#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>

using namespace std;
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
//typedef boost::multiprecision::cpp_int bigint;

vector<string> OP;

int main() {
	string S;
	while (cin >> S)OP.push_back(S);
	stack<ll> st;
	for (auto str:OP) {
		if (str == string("+")) {
			ll ans = st.top();
			st.pop();
			ans += st.top();
			st.pop();
			st.push(ans);
		}
		else if (str == string("-")) {
			ll ans = -st.top();
			st.pop();
			ans += st.top();
			st.pop();
			st.push(ans);
		}
		else if (str == string("*")) {
			ll ans = st.top();
			st.pop();
			ans *= st.top();
			st.pop();
			st.push(ans);
		}
		else st.push(stoi(str));
	}
	cout << st.top() << endl;
	return 0;
}