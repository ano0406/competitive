#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long long LL;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

VLL X;
LL N;

void modinvs(long long N, vector<long long>& inv, vector<long long>& sinv, long long mod = 1e9 + 7) {
	inv.resize(N + 1);
	sinv.resize(N + 1);
	inv[1] = 1;
	sinv[0] = 1;
	sinv[1] = 1;
	for (int n = 2; n <= N; n++) {
		inv[n] = mod - (inv[mod % n] * (mod / n)) % mod;
		sinv[n] = (sinv[n - 1] * inv[n]) % mod;
	}
}

VLL inv, sinv,st;

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	cin >> N;
	X.resize(N+1);
	for (LL n = 1; n <= N; n++)cin >> X[n];
	modinvs(N, inv, sinv, MOD);
	LL ans = 0;
	st.resize(N + 1,1);
	for (LL n = 2; n <= N; n++) {
		st[n] = (st[n - 1] * n) % MOD;
	}
	LL Q = st[N-1];
	for (LL n = 1; n <= N - 1; n++) {
		LL temp = (Q * (X[n+1] - X[n])) % MOD;
		ans += temp;
		//Q(n)までの和
		if (n == N - 1)break;
		LL q = st[N - 2 - n];
		q = (q * inv[n + 1]) % MOD;
		q = (q * st[N - 1]) % MOD;
		q = (q * sinv[N - n - 2]) % MOD;
		Q = (Q + q) % MOD;
	}
	cout << ans%MOD << "\n";
	return 0;
}
