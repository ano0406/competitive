#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
using namespace std;
long long MOD = 1e9 + 7;
typedef long long ll;
typedef pair<ll, ll> pll;
//typedef boost::multiprecision::cpp_int bigint;
 
vector<ll> change(vector<ll> vec, ll n) {
	ll start2 = -1;
	while (n < vec.size()) {
		if (vec[n] == 2) {
			start2 = n;
			break;
		}
		n++;
	}
	if (start2 == -1)return vec;
	while (n < vec.size()) {
		if (vec[n] != 2) {
			break;
		}
		n++;
	}
	for (ll s = 0; s < n; s++) {
		vec[s] = 0;
	}
	vec[n]++;
	return change(vec, n);
}
 
int main() {
	ll Q;
	cin >> Q;
	for (ll query = 0; query < Q; query++) {
		ll N;
		cin >> N;
		vector<ll> vec;
		while (N > 0) {
			vec.push_back(N % 3);
			N /= 3;
		}
		vec.push_back(0);
		vec = change(vec,0);
		ll ans = 0;
		ll base = 1;
		for (ll n = 0; n < vec.size(); n++) {
			ans += base * vec[n];
			base *= 3;
		}
		cout << ans << endl;
	}
	return 0;
}