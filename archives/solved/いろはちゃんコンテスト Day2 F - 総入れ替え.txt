#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>
#include <bitset>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

pdd operator+(pdd a, pdd b) {
	return pdd(a.first + b.first, a.second + b.second);
}

pdd operator*(ld a, pdd b) {
	return pdd(a * b.first, a * b.second);
}

pdd DP[11][11][11][11][11][11];
ll A1, A2, B1, B2, C1, C2;

pdd dp(ll a1, ll a2, ll b1, ll b2, ll c1, ll c2) {
	if (DP[a1][a2][b1][b2][c1][c2] != pdd(-1,-1)) {
		return DP[a1][a2][b1][b2][c1][c2];
	}
	if (((A1 + A2 + B1 + B2 + C1 + C2) - (a1 + a2 + b1 + b2 + c1 + c2))&1) {
		pdd t1 = pdd(0,0);
		if (a1 > 0) {
			t1 =t1 +  (ld)a1 / (a1 + a2) * (pdd(0,100) + dp(a1 - 1,a2,b1,b2,c1,c2));
		}
		if (a2 > 0) {
			t1 =t1+ (ld)a2 / (a1 + a2) * (pdd(0, 50) + dp(a1,a2 - 1,b1,b2,c1,c2));
		}
		pdd t2 = pdd(0,0);
		if (b1 > 0) {
			t2 = t2+(ld)b1 / (b1 + b2) * (pdd(0, 100) + dp(a1,a2,b1-1,b2,c1,c2));
		}
		if (b2 > 0) {
			t2 = t2+(ld)b2 / (b1 + b2) * (pdd(0, 50) + dp(a1,a2,b1,b2-1,c1,c2));
		}
		pdd t3 = pdd(0, 0);
		if (c1 > 0) {
			t3 = t3+(ld)c1 / (c1 + c2) * (pdd(0, 100) + dp(a1,a2,b1,b2,c1-1,c2));
		}
		if (c2 > 0) {
			t3 = t3+(ld)c2 / (c1 + c2) * (pdd(0, 50) + dp(a1,a2,b1,b2,c1,c2-1));
		}
		vector<pdd> V;
		V.push_back(t1);
		V.push_back(t2);
		V.push_back(t3);
		sort(V.begin(), V.end(), [](pdd a, pdd b) {
			return a.second > b.second;
		});
		DP[a1][a2][b1][b2][c1][c2] = V[0];
		return V[0];
	}
	else {
		pdd t1 = pdd(0, 0);
		if (a1 > 0) {
			t1 = t1 + (ld)a1 / (a1 + a2) * (pdd(100, 0) + dp(a1 - 1,a2,b1,b2,c1,c2));
		}
		if (a2 > 0) {
			t1 = t1 + (ld)a2 / (a1 + a2) * (pdd(50, 0) + dp(a1,a2 - 1,b1,b2,c1,c2));
		}
		pdd t2 = pdd(0, 0);
		if (b1 > 0) {
			t2 = t2 + (ld)b1 / (b1 + b2) * (pdd(100, 0) + dp(a1,a2,b1-1,b2,c1,c2));
		}
		if (b2 > 0) {
			t2 = t2 + (ld)b2 / (b1 + b2) * (pdd(50, 0) + dp(a1,a2,b1,b2-1,c1,c2));
		}
		pdd t3 = pdd(0, 0);
		if (c1 > 0) {
			t3 = t3 + (ld)c1 / (c1 + c2) * (pdd(100, 0) + dp(a1,a2,b1,b2,c1-1,c2));
		}
		if (c2 > 0) {
			t3 = t3 + (ld)c2 / (c1 + c2) * (pdd(50, 0) + dp(a1,a2,b1,b2,c1,c2-1));
		}
		vector<pdd> V;
		V.push_back(t1);
		V.push_back(t2);
		V.push_back(t3);
		sort(V.begin(), V.end(), [](pdd a, pdd b) {
			return a.first > b.first;
		});
		DP[a1][a2][b1][b2][c1][c2] = V[0];
		return V[0];
	}
}

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	for (ll a1 = 0; a1 <= 10; a1++) {
		for (ll a2 = 0; a2 <= 10; a2++) {
			for (ll b1 = 0; b1 <= 10; b1++) {
				for (ll b2 = 0; b2 <= 10; b2++) {
					for (ll c1 = 0; c1 <= 10; c1++) {
						for (ll c2 = 0; c2 <= 10; c2++) {
							DP[a1][a2][b1][b2][c1][c2] = pdd(-1, -1);;
						}
					}
				}
			}
		}
	}
	cin >> A1 >> A2 >> B1 >> B2 >> C1 >> C2;
	DP[0][0][0][0][0][0] = pdd(0, 0);
	cout << setprecision(12) << dp(A1, A2, B1, B2, C1, C2).first << "\n";
	return 0;
}
