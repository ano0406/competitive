#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>
#include <bitset>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

string S, T;
ll N;
VVLL DP;

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	cin >> S >> T;
	N = S.size();
	S = string("!") + S;
	T = string("?") + T;
	DP.resize(N + 1, VLL(N + 1, 0));
	for (ll s = 1; s <= N; s++) {
		for (ll t = 1; t <= N; t++) {
			if (S[s] == T[t])DP[s][t] = DP[s - 1][t - 1] + 1;
			else DP[s][t] = max(DP[s - 1][t], DP[s][t - 1]);
		}
	}
	cout << DP[N][N] + 1 << "\n";
	return 0;
}
