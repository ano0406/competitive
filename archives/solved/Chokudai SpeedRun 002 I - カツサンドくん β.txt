#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>
#include <bitset>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	ll N;
	cin >> N;
	vector<pll> A(N);
	set<ll> P;
	for (ll n = 0; n < N; n++) {
		cin >> A[n].first >> A[n].second;
		ll p = 2;
		ll c = A[n].first;
		while (c > 1 && p*p <= c) {
			if (c % p == 0) {
				c /= p;
				P.insert(p);
			}else p++;
		}
		P.insert(c);
		p = 2;
		c = A[n].second;
		while (c > 1 && p * p <= c) {
			if (c % p == 0) {
				c /= p;
				P.insert(p);
			}
			else p++;
		}
		P.insert(c);
	}
	ll ans = 1;
	for (ll p : P) {
		ll T = LLONG_MAX;
		for (ll n = 0; n < N; n++) {
			ll a = 0;
			ll base = p;
			while (A[n].first % base == 0) {
				a++;
				base *= p;
			}
			ll b = 0;
			base = p;
			while (A[n].second % base == 0) {
				b++;
				base *= p;
			}
			T = min(T, max(a, b));
		}
		for (ll t = 1; t <= T; t++) {
			ans *= p;
		}
	}
	cout << ans << "\n";
	return 0;
}