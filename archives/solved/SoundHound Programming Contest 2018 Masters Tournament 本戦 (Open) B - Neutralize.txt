#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>

using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

ll N,K;
VLL B;
VLL Bsum;
VLL DP;
VLL DPsum;

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	cin >> N >> K;
	B.resize(N + 1,0);
	Bsum.resize(N+1, 0);
	for (ll n = 1; n <= N; n++) {
		cin >> B[n];
		Bsum[n] = Bsum[n - 1] + B[n];
	}
	DP.resize(N + 1,-2*1e14);
	DPsum.resize(N + 1, -2 * 1e14);
	DP[0] = 0;
	DPsum[0] = 0;
	for (ll n = 1; n <= K; n++) {
		DP[n] = Bsum[n];
		DPsum[n] = max(DPsum[n - 1], DP[n]);
	}
	for (ll n = K+1; n <= N; n++) {
		ll ans = DP[n - 1];
		ans = max(ans, DPsum[n - K - 1]);
		DP[n] = ans + B[n];
		DPsum[n] = max(DPsum[n - 1], DP[n]);
	}
	cout << max(DP[N],DPsum[N-K]) << "\n";
	return 0;
}
