void solve();

int main() {
	solve();
	return 0;
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
using namespace std;

int N, M, P;
class edge {
public:
	int a, b, c;
};
vector<edge> Edges;
vector<int> dp;

void solve() {
	cin >> N >> M >> P;
	Edges.resize(M);
	for (int m = 0; m < M; m++) {
		cin >> Edges[m].a >> Edges[m].b >> Edges[m].c;
		Edges[m].a--; Edges[m].b--;
		Edges[m].c = P - Edges[m].c;
	}
	dp.resize(N, INT_MAX);
	dp[0] = 0;
	for (int time = 0;time < N; time++) {
		for (auto itr = Edges.begin(); itr != Edges.end(); itr++) {
			if (dp[itr->a] == INT_MAX)continue;
			if (dp[itr->b] > dp[itr->a] + itr->c) {
				dp[itr->b] = dp[itr->a] + itr->c;
			}
		}
	}
	vector<bool> negcheck;
	negcheck.resize(N,false);
	for (int time = 0; time < N; time++) {
		for (auto itr = Edges.begin(); itr != Edges.end(); itr++) {
			if (dp[itr->a] == INT_MAX)continue;
			if (dp[itr->b] > dp[itr->a] + itr->c) {
				dp[itr->b] = dp[itr->a] + itr->c;
				negcheck[itr->b] = true;
			}
          if(negcheck[itr->a])negcheck[itr->b] = true;
		}
	}
	if (negcheck[N - 1])cout << -1 << endl;
	else if (dp[N - 1] >= 0)cout << 0 << endl;
	else cout << -dp[N - 1] << endl;
	return;
}
