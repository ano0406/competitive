#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
using namespace std;
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
//typedef boost::multiprecision::cpp_int bigint;

ld deg, dis;
const char* degv[17] = { "N","NNE","NE","ENE","E","ESE","SE","SSE","S","SSW","SW","WSW","W","WNW","NW","NNW" ,"C" };
ld power[14] = { 0.0,0.25,1.55,3.35,5.45,7.95,10.75,13.85,17.15,20.75,24.45,28.45,32.65,200 };

int main() {
	cin >> deg >> dis;
	for (ll n = 1; n <= 13; n++) {
		if (power[n - 1] * 60 <= dis && dis < power[n] * 60) {
			dis = n - 1;
			break;
		}
	}
	if (dis == 0)deg = 16;
	else if (deg < 112.5 || deg >= 3487.5)deg = 0;
	else {
		for (ll n = 1; n <= 15; n++) {
			if (deg >= (ld)225 * n - 112.5 && deg < (ld)225 * n + 112.5) {
				deg = n;
				break;
			}
		}
	}
	cout << degv[(int)deg] << " " << dis << endl;
	return 0;
}
