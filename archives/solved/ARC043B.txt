void solve();

int main() {
	solve();
	return 0;
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
#include <iostream>
#include <vector>
#include <algorithm>
#include <functional>
#include <limits.h>
#include <math.h>
#include <iomanip>
using namespace std;
typedef pair<int, int> pii;
typedef long double ld;
typedef long long ll;

int MOD = 1e9 + 7;
int N;
vector<int> D;
vector<ll> dp;

void solve() {
	cin >> N;
	D.resize(N + 1);
	for (int n = 1; n <= N; n++)cin >> D[n];
	sort(D.begin() + 1, D.end());
	dp.resize(N + 1,0);
	for (int n = N - 1; n >= 1; n--) {
		//Ds< 2Dn <= De
		int s = 0, e = N + 1;
		while (e - s > 1) {
			int m = (e + s) / 2;
			if (D[m] < 2 * D[n])s = m;
			else e = m;
		}
		dp[n] = (N + 1) - e + dp[n + 1];
		dp[n] %= MOD;
	}
	ll ans = 0;
	for (int n2 = 2; n2 <= N - 2; n2++) {
		//2D[s] <= D[n2] < 2D[e]
		int s = 0, e = N + 1;
		while (e - s > 1) {
			int m = (s + e) / 2;
			if (2 * D[m] <= D[n2])s = m;
			else e = m;
		}
		int n1 = s;
		s = 0, e = N + 1;
		//Ds< 2Dn2 <= De
		s = 0, e = N + 1;
		while (e - s > 1) {
			int m = (e + s) / 2;
			if (D[m] < 2 * D[n2])s = m;
			else e = m;
		}
		int n3 = e;
		if (n3 != N + 1) {
			ans += n1 * dp[n3];
			ans %= MOD;
		}
	}
	cout << ans << endl;
}