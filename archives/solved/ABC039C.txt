#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
using namespace std;
const long long MOD = 1e9+7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
//typedef boost::multiprecision::cpp_int bigint;

vector<ll> keys = {
	0,1,0,1,0,0,1,0,1,0,1,0,
	0,1,0,1,0,0,1,0,1,0,1,0
};
vector<string> keystr = {
	string("Do"),string(""),string("Re"),string(""),string("Mi"),string("Fa"),string(""),string("So"),string(""),string("La"),string(""),string("Si"),string("")
};

int main() {
	string S;
	cin >> S;
	vector<ll> V(12);
	for (ll n = 0; n < 12; n++) {
		if (S[n] == 'W')V[n] = 0;
		else V[n] = 1;
	}
	for (ll s = 0; s < 12; s++) {
		if (keys[s] == 1)continue;
		bool flag = false;
		for (ll n = s; n < s + 12; n++) {
			if (V[n - s] != keys[n]) {
				flag = true;
				break;
			}
		}
		if (!flag) {
			cout << keystr[s] << endl;
			return 0;
		}
	}
}
