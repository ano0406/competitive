#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>

using namespace std;
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
//typedef boost::multiprecision::cpp_int bigint;

ll N, A, B;
vector<ll> X;

int main() {
	cin >> N >> A >> B;
	X.resize(N + 1, 0);
	for (ll n = 1; n <= N; n++)cin >> X[n];
	ll ans = 0;
	for (ll n = 2; n <= N; n++) {
		if (A * (X[n] - X[n - 1]) <= B)ans += A * (X[n] - X[n - 1]);
		else ans += B;
	}
	cout << ans << endl;
	return 0;
}