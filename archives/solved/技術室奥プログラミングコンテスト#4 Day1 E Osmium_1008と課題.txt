void solve();

int main() {
	solve();
	return 0;
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
using namespace std;

long long N,M,K,E;
vector<long long> A,B;
long long Asum = 0;

void solve() {
	cin >> N >> M >> K >> E;
	A.resize(N);
	for (int n = 0; n < N; n++) {
		cin >> A[n];
		Asum += A[n];
	}
	Asum -= E;
	if (Asum <= 0) {
		cout << 0 << endl;
		return;
	}
	B.resize(M);
	for (int m = 0; m < M; m++)cin >> B[m];
	sort(B.begin(), B.end(), greater<long long>());
	for (int m = 1; m < M; m++)B[m] += B[m - 1];
	int s = -1, e = M;
	while (e - s > 1) {
		int m = (e + s) / 2;
		if (B[m] < Asum)s = m;
		else e = m;
	}
	if (e + 1 <= K) {
		cout << "Yes" << endl;
		cout << e + 1 << endl;
		return;
	}
	long long Bsum = B[K-1] + E;
	sort(A.begin(), A.end());
	for (int n = 1; n < N; n++)A[n] += A[n - 1];
	s = -1, e = N;
	while(e - s > 1) {
		int m = (e + s) / 2;
		if (A[m] <= Bsum)s = m;
		else e = m;
	}
	cout << "No" << endl;
	cout << s + 1 << endl;
	return;
}
