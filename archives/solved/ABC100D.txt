#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
using namespace std;
long long MOD = 1e9 + 7;

long long N, M;
vector<long long> X, Y, Z;

long long dp(long long xt, long long yt, long long zt) {
	vector<long long> V(N, 0);
	for (long long n = 0; n < N; n++) {
		V[n] = X[n] * xt + Y[n] * yt + Z[n] * zt;
	}
	sort(V.begin(), V.end(), [](long long a, long long b) {
		return a < b;
	});
	long long ans = 0;
	for (long long t = 0; t < M; t++) {
		ans += V[N - 1 - t];
	}
	return ans;
}

int main() {
	cin >> N >> M;
	X.resize(N);
	Y.resize(N);
	Z.resize(N);
	for (long long n = 0; n < N; n++) {
		cin >> X[n] >> Y[n] >> Z[n];
	}
	long long ans = LLONG_MIN;
	for (long long x = 1; x >= -1; x -= 2) {
		for (long long y = 1; y >= -1; y -= 2) {
			for (long long z = 1; z >= -1; z -= 2) {
				ans = max(ans, dp(x, y, z));
			}
		}
	}
	cout << ans << endl;
	return 0;
}
