#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
using namespace std;
long long MOD = 1e9 + 7;

vector<long long> A, F;
long long N, K;

bool judge(long long time) {
	long long k = K;
	for (int n = 0; n < N; n++) {
		if (A[n] * F[n] <= time)continue;
		long long needed = floor((long double)time / F[n]);
		k -= (A[n] - needed);
		if (k < 0)return false;
	}
	return true;
}

int main() {
	cin >> N >> K;
	A.resize(N);
	F.resize(N);
	for (int n = 0; n < N; n++)cin >> A[n];
	for (int n = 0; n < N; n++)cin >> F[n];
	sort(A.begin(), A.end(), [](long long a, long long b) {
		return a < b;
	});
	sort(F.begin(), F.end(), [](long long a, long long b) {
		return a > b;
	});
	long long s = -1, e = LLONG_MAX - 1;
	while (e - s > 1) {
		long long m = (e + s) / 2;
		if (judge(m))e = m;
		else s = m;
	}
	cout << e << endl;
	return 0;
}
