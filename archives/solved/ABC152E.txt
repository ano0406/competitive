#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>
#include <bitset>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long long LL;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
typedef unsigned long long ULL;
//typedef boost::multiprecision::cpp_int bigint;

LL primes[78498];
int osa_k[1000000+1];
int M[1000000+1];
LL temp[10000];

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	LL N;
	cin >> N;
	VLL A(N);
	VLL Aold(N);
	for (LL n = 0; n < N; n++) {
		cin >> A[n];
		Aold[n] = A[n];
	}
	for (LL n = 0; n < N; n++)temp[n] = 1;
	sort(A.begin(), A.end(), [](LL a, LL b) {
		return a > b;
	});
	for (LL n = 0; n <= 1000000; n++)osa_k[n] = n;
	for (LL n = 2; n <= 1000000; n++) {
		if (osa_k[n] != n)continue;
		LL t = 2 * n;
		while (t <= 1000000) {
			if(osa_k[t] == t)osa_k[t] = n;
			t += n;
		}
	}
	for (LL m = 0; m < 1000000; m++)M[m] = 0;
	for (LL n = 0; n < N; n++) {
		LL a = A[n];
		LL count = 1;
		LL prev = 1;
		while (a > 1) {
			if (prev != osa_k[a]) {
				count = 1;
				prev = osa_k[a];
				a /= osa_k[a];
				M[prev] = max(M[prev], (int)count);
			}
			else {
				count++;
				a /= osa_k[a];
				M[prev] = max(M[prev], (int)count);
			}
		}
	}
	LL ans = 0;
	M[1] = 1;
	for (LL p = 2; p <= 1000000; p++) {
		if (osa_k[p] != p)continue;
		if (M[p] == 0)continue;
		for (LL n = 0; n < N; n++) {
			LL count = 0;
			while (A[n] % p == 0) {
				A[n] /= p;
				count++;
			}
			for (LL t = 0; t < M[p] - count; t++) {
				temp[n] = (temp[n] * p) % MOD;
			}
		}
	}
	for (LL n = 0; n < N; n++)ans += temp[n];
	cout << ans % MOD << "\n";
	return 0;
}
