#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	ll N;
	cin >> N;
	VVLL A(N);
	for (ll n = 0; n < N - 1; n++) {
		A[n].resize(N);
		for (ll m = n + 1; m < N; m++)cin >> A[n][m];
	}
	ll ans = LLONG_MIN;
	VLL team(N,0);
	while (true) {
		vector<set<ll>> V(3);
		for (ll n = 0; n < N; n++) {
			V[team[n]].insert(n);
		}
			ll score = 0;
		for(ll t = 0;t < 3;t++){
			for (ll n : V[t]) {
				for (ll m : V[t]) {
					if (m <= n)continue;
					score += A[n][m];
				}
			}
		}
		ans = max(ans, score);
		team[0]++;
		for (ll n = 1; n < N; n++) {
			if (team[n - 1] == 3) {
				team[n]++;
				team[n - 1] = 0;
			}
		}
		if (team.back() == 3)break;
	}
	cout << ans << "\n";
	return 0;
}
