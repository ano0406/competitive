#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>
#include <bitset>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

template< typename T >
struct edge {
	ll src, to;
	T cost;
	ll ind;

	edge(int to, T cost) : src(-1), to(to), cost(cost),ind(0) {}

	edge(ll src, ll to, T cost,ll i) : src(src), to(to), cost(cost),ind(i) {}

	edge& operator=(const int& x) {
		to = x;
		return *this;
	}
	edge() :src(0), to(0), cost(0), ind(0){}
	operator int() const { return to; }
};

template< typename T >
using Edges = vector< edge< T > >;
template< typename T >
using WeightedGraph = vector< Edges< T > >;
using UnWeightedGraph = vector< vector< int > >;
template< typename T >
using Matrix = vector< vector< T > >;

struct UnionFind {
	vector< int > data;

	UnionFind(int sz) {
		data.assign(sz, -1);
	}

	bool unite(int x, int y) {
		x = find(x), y = find(y);
		if (x == y) return (false);
		if (data[x] > data[y]) swap(x, y);
		data[x] += data[y];
		data[y] = x;
		return (true);
	}

	int find(int k) {
		if (data[k] < 0) return (k);
		return (data[k] = find(data[k]));
	}

	int size(int k) {
		return (-data[find(k)]);
	}
};

VLL ans;

template< typename T >
T kruskal(Edges< T >& edges, int V) {
	ans.reserve(V - 1);
	sort(begin(edges), end(edges), [](const edge< T >& a, const edge< T >& b) {
		return (a.cost < b.cost);
	});
	UnionFind tree(V);
	T ret = 0;
	for (auto& e : edges) {
		if (tree.unite(e.src, e.to)) {
			ret += e.cost;
			ans.push_back(e.ind);
		}
	}
	sort(ans.begin(), ans.end(), [](ll a, ll b) {
		return a < b;
	});
	for (ll a : ans) {
		cout << a << "\n";
	}
	return (ret);
}


int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	ll N, M;
	cin >> N >> M;
	Edges<ll> E(M);
	for (ll m = 0; m < M; m++) {
		ll s, t, w;
		cin >> s >> t >> w;
		E[m] = { s - 1,t - 1,-w,m+1 };
	}
	kruskal(E, N);
	return 0;
}
