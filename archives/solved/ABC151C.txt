#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long long LL;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	LL N, M;
	cin >> N >> M;
	VLL P(M);
	vector<string> S(M);
	for (LL m = 0; m < M; m++) {
		cin >> P[m] >> S[m];
	}
	vector<bool> check(N + 1, false);
	LL AC = 0;
	for (LL m = 0; m < M; m++) {
		if (S[m] == string("AC")) {
			if (check[P[m]])continue;
			check[P[m]] = true;
			AC++;
		}
	}
	LL WA = 0;
	vector<bool> accheck(N + 1, false);
	for (LL m = 0; m < M; m++) {
		if (check[P[m]]) {
			if (S[m] == string("AC")) {
				accheck[P[m]] = true;
			}
			else {
				if (!accheck[P[m]])WA++;
			}
		}
	}
	cout << AC << " " << WA << "\n";
}
