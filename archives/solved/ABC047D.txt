#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
using namespace std;

template<class T>
void in(vector<T>& V) {
	for (auto itr = V.begin(); itr != V.end(); itr++)cin >> *itr;
	return;
}

template<class T>
void out(vector<T>& V) {
	for (T& itr : V)cout << itr << endl;
	return;
}

//int N, T;
//vector<int> A;
//vector<set<int>> minset;
//vector<int> minvect;
//vector<int> resmin;
//
//int main() {
//	cin >> N >> T;
//	A.resize(N+1);
//	A[0] = 1e9+1;
//	for (int n = 1; n <= N; n++)cin >> A[n];
//	minset.resize(N + 1);
//	minvect.resize(N + 1);
//	minset[0].insert(A[0]);
//	minvect[0] = 0;
//	for (int n = 1; n <= N; n++) {
//		if (minvect[n - 1] > A[n]) {
//			minvect[n] = n;
//			minset[n].insert(n);
//		}
//		else if (minvect[n - 1] == A[n]) {
//			minvect[n] = minvect[n - 1];
//			minset[n] = minset[n - 1];
//			minset[n].insert(n);
//		}
//		else {
//			minvect[n] = minvect[n - 1];
//			minset[n] = minset[n - 1];
//		}
//	}
//	//1.各町で売る際の、利益単価最小を保存
//	resmin.resize(N + 1);
//	resmin[0] = A[0];
//	for (int n = 1; n <= N; n++) {
//		resmin[n] = A[n] - A[minvect[n - 1]];
//	}
//	//2.利益単価最小の最大を求める
//	int minmax = -(1e9)-1;
//	for (int n = 1; n <= N; n++) {
//		if (minmax < resmin[n])minmax = resmin[n];
//	}
//	//3.利益単価最小の最大値を取る町を順にみていく
//	int lasttown = 0;   //最後に見た町
//	set<int> seeing;   //リンゴを買う場所が同じ町たち
//	int ans = 0;
//	for (int town = 1; town <= N; town++) {
//		if (resmin[town] != minmax)continue;
//		//if (lasttown == 0) {
//		//	lasttown = town;
//		//	seeing.insert(town);
//		//}
//		////前見た町と同じ町で買っている
//		//else if (A[minvect[lasttown]] == A[minvect[town]]) {
//		//	lasttown = town;
//		//	seeing.insert(town);
//		//}
//		////前見た町と違う、より安く仕入れられる街で買っている
//		//else{
//		//	ans += min(seeing.size(),minset[lasttown].size());
//		//	lasttown = town;
//		//	seeing.clear();
//		//	seeing.insert(town);
//		//}
//		ans++;
//	}
//	//ans += min(seeing.size(), minset[lasttown].size());
//	cout << ans << endl;
//	return 0;
//}

int N, T;
vector<int> A;
vector<int> minvect;

int main() {
	cin >> N >> T;
	A.resize(N + 1);
	A[0] = 1e9 + 1;
	for (int n = 1; n <= N; n++) {
		cin >> A[n];
	}
	minvect.resize(N + 1);
	minvect[0] = A[0];
	for (int n = 1; n <= N; n++) {
		minvect[n] = min(minvect[n - 1], A[n]);
	}
	int maxben = -1e9 - 1;
	for (int n = 1; n <= N; n++) {
		maxben = max(maxben, A[n] - minvect[n - 1]);
	}
	int ans = 0;
	for (int n = 1; n <= N; n++) {
		if (A[n] - minvect[n - 1] == maxben)ans++;
	}
	cout << ans << endl;
	return 0;
}
