#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
using namespace std;

vector<long long> seg;

void add(int n, long long x,int k = 1,int l = 0,int r = seg.size()/2-1) {
	if (n < l|| n > r)return;
	if (k >= seg.size())return;
	seg[k] += x;
	add(n, x, 2 * k, l, (l + r) / 2);
	add(n, x, 2 * k + 1, (l + r) / 2 + 1, r);
	return;
}

long long getSum(int a, int b, int k = 1, int l = 0, int r = seg.size() / 2 - 1) {
	if (b < l || a > r)return 0;
	if (a <= l && r <= b)return seg[k];
	else return getSum(a, b, 2 * k, l, (l + r) / 2) + getSum(a, b, 2 * k + 1, (l + r) / 2 + 1, r);
}

void solve() {
	int N, Q;
	cin >> N >> Q;
	int RN = 1;
	while (RN < N)RN *= 2;
	seg.resize(2 * RN);
	for (int query = 0; query < Q; query++) {
		int com, x, y;
		cin >> com >> x >> y;
		if (com == 0) {
			add(--x, y);
		}
		else {
			cout << getSum(--x, --y) << endl;
		}
	}
	return;
}

//////////////////////////////
//////////////////////////////

int main() {
#ifdef DEBUGTIME
	for (int time = 0; time < DEBUGTIME; time++) {
		solve();
		cout << "####################" << endl;
	}
#else
	solve();
#endif
	return 0;
}

##############################
##############################
#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>

using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

//数列タイプのtreap
//Xorshift
unsigned int Xorshift() {
	static unsigned int tx = 123456789, ty = 362436069, tz = 521288629, tw = 88675123;
	unsigned int tt = (tx ^ (tx << 11));
	tx = ty; ty = tz; tz = tw;
	return (tw = (tw ^ (tw >> 19)) ^ (tt ^ (tt >> 8)));
}

struct node_t {
	ll val;   //値
	node_t* ch[2];   //子
	ll pri;   //優先度
	ll cnt;   //子の個数
	ll sum;   //値の和
	static ll node_count;   //プール用の要素を数える変数
	static const ll MAX_N = 1000000 + 10;   //プールのサイズ
	/*void* operator new(std::size_t) {
		static node_t pool[MAX_N];   //プール
		return pool + node_count++;
	}*/
	/*static void delete_all() {
		node_count = 0;
	}*/
	node_t(ll v) {
		val = v;
		ch[0] = ch[1] = NULL;
		cnt = 1;
		sum = v;
		pri = Xorshift();
	}
	node_t() {}
	node_t* update() {
		node_t* t = this;
		t->cnt = (t->ch[0] ? t->ch[0]->cnt : 0) + (t->ch[1] ? t->ch[1]->cnt : 0) + 1;
		t->sum = (t->ch[0] ? t->ch[0]->sum : 0)+(t->ch[1] ? t->ch[1]->sum : 0)+t->val;
		return t;
	}
};

void delete_all(node_t* root) {
	if (root == NULL)return;
	delete_all(root->ch[0]);
	delete_all(root->ch[1]);
	delete root;
	return;
}

//2つのtreapをマージ
node_t* merge(node_t* l, node_t* r) {
	if (!l || !r)return !l ? r : l;
	if (l->pri > r->pri) {
		l->ch[1] = merge(l->ch[1], r);
		return l->update();
	}
	else {
		r->ch[0] = merge(l, r->ch[0]);
		return r->update();
	}
}

//treapを[0,k)と[k,n)にsplit
pair<node_t*, node_t*> split(node_t* t, ll k) {
	typedef pair<node_t*, node_t*> P;
	if (!t)return P(NULL, NULL);
	ll count = t->ch[0] ? t->ch[0]->cnt : 0;
	if (k <= count) {
		P s = split(t->ch[0], k);
		t->ch[0] = s.second;
		return P(s.first, t->update());
	}
	else {
		P s = split(t->ch[1], k - count - 1);
		t->ch[1] = s.first;
		return P(t->update(), s.second);
	}
}

//treap trの場所kに要素tを追加
node_t* insert(node_t* tr, ll k, node_t* t) {
	auto sp = split(tr, k);
	sp.first = merge(sp.first, t);
	return merge(sp.first, sp.second);
}

//treap trの場所kの要素を消去
node_t* erase(node_t* tr, ll k) {
	auto sp = split(tr, k - 1);
	auto sp2 = split(sp.second, 1);
	delete sp2.first;
	return merge(sp.first, sp2.second);
}

void print(node_t* root) {
	if (root == NULL)return;
	print(root->ch[0]);
	cout << " " << root->val;
	print(root->ch[1]);
	return;
}

node_t* index(node_t* root,ll n) {
	if (!root)return NULL;
	ll ln = (root->ch[0] ? root->ch[0]->cnt : 0);
	ll rn = (root->ch[1] ? root->ch[1]->cnt : 0);
	if (n >= ln + rn)return NULL;
	if (n < ln)return index(root->ch[0], n);
	else if (n == ln)return root;
	else return index(root->ch[1], n - (ln + 1));
}

node_t* change(node_t* root, ll n, ll x) {
	if (!root)return NULL;
	ll ln = (root->ch[0] ? root->ch[0]->cnt : 0);
	ll rn = (root->ch[1] ? root->ch[1]->cnt : 0);
	if (n >= ln + rn + 1)return NULL;
	if (n < ln) {
		node_t* r = change(root->ch[0], n, x);
		root->update();
		return r;
	}
	else if (n == ln) {
		root->val += x;
		root->update();
		return root;
	}
	else {
		node_t* r = change(root->ch[1], n - (ln + 1), x);
		root->update();
		return r;
	}
}

ll rangesum(node_t* root, ll l, ll r) {
	if (root == NULL)return 0;
	ll ln = (root->ch[0] ? root->ch[0]->cnt : 0);
	ll rn = (root->ch[1] ? root->ch[1]->cnt : 0);
	if (r < 0 || l > ln + rn)return 0;
	l = max((ll)0, l);
	r = min(ln + rn, r);
	if (l == 0 && r == ln + rn)return root->sum;
	ll ans = rangesum(root->ch[0], l, r);
	if (l <= ln && ln <= r)ans += root->val;
	ans += rangesum(root->ch[1], l - ln - 1, r - ln - 1);
	return ans;
}

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	ll N, Q;
	cin >> N >> Q;
	node_t* root = NULL;
	for (ll n = 0; n < N; n++) {
		root = merge(root, new node_t(0));
	}
	ll c, x, y;
	for (ll q = 0; q < Q; q++) {
		cin >> c >> x >> y;
		if (c == 0) {
			change(root,x-1, y);
		}
		else {
			cout << rangesum(root, x-1, y-1) << "\n";
		}
	}
	delete_all(root);
	return 0;
}