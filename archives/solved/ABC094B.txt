#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>

using namespace std;
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
//typedef boost::multiprecision::cpp_int bigint;

int main() {
	ll N,M,X;
	cin >> N >> M >> X;
	vector<ll> DP(N + 1, 0);
	for (ll m = 0; m < M; m++) {
		ll a;
		cin >> a;
		DP[a]++;
	}
	for (ll n = 1; n <= N; n++) {
		DP[n] += DP[n - 1];
	}
	cout << min(DP[N] - DP[X], DP[X] - DP[0]) << endl;
	return 0;
}
