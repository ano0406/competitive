#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>
#include <bitset>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	ll N, A, B;
	cin >> N >> A >> B;
	VLL D;
	D.reserve(B + 1);
	D.push_back(0);
	for (ll n = 0; n < B; n++) {
		ll a;
		cin >> a;
		D.push_back(a);
	}
	D.push_back(N + 1);
	sort(D.begin(), D.end(), [](ll a, ll b) {
		return a < b;
	});
	ll ans = 0;
	for (ll b = 0; b <= B; b++) {
		ans += ceil((ld)(D[b + 1] - D[b]) / A);
	}
	cout << (N+1)-ans << "\n";
	return 0;
}
