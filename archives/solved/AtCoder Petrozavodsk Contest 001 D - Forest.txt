#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>

using namespace std;
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
//typedef boost::multiprecision::cpp_int bigint;

//unionFind
class unionFind {
private:
	int* p;   //親配列のポインタ
	int* rank;
	int N;   //要素数
	int* check;   //同値な要素の数
public:
	unionFind(int);   //コンストラクタ
	int parent(int);   //親要素を返す
	void unit(int, int);   //2要素をつなぐ
	int operator[](int);   //parentの省略形
	~unionFind();
	int size(int n);   //頂点nと同値な要素数を返す
};

unionFind::unionFind(int n) {
	N = n;
	p = new int[N];
	rank = new int[N];
	for (int i = 0; i < N; i++) {
		p[i] = i;
		rank[i] = 0;
	}
	check = new int[N];
	for (int n = 0; n < N; n++)check[n] = 1;
	return;
}

int unionFind::parent(int n) {
	if (n < 0 || n >= N)return -1;
	if (p[n] == n)return n;   //自分が一番上の親
	return p[n] = parent(p[n]);   //つなぎ直しと上にたどる操作
}

int unionFind::operator[](int n) {
	return parent(n);
}

void unionFind::unit(int x, int y) {
	x = parent(x), y = parent(y);
	if (x == y)return;   //根が同じだから何もせずに帰る
	int sum = check[x] + check[y];
	if (rank[x] < rank[y])p[x] = y;
	else {
		p[y] = x;
		if (rank[x] == rank[y])rank[x]++;
	}
	check[x] = sum;
	check[y] = sum;
	return;
}

unionFind::~unionFind() {
	delete(p);
	delete(rank);
	delete(check);
	return;
}

int unionFind::size(int n) {
	return check[parent(n)];
}

ll N, M;
vector<pll> A;   //中身、添え字

int main() {
	cin >> N >> M;
	A.resize(N);
	for (ll n = 0; n < N; n++) {
		cin >> A[n].first;
		A[n].second = n;
	}
	unionFind UF(N);
	for (ll m = 0; m < M; m++) {
		ll x, y;
		cin >> x >> y;
		UF.unit(x, y);
	}
	vector<pll> mincheck(N,pll(1e9+1,-1));
	for (ll n = 0; n < N; n++) {
		ll p = UF[n];
		if (mincheck[p].first >= A[n].first) {
			mincheck[p] = A[n];
		}
	}
	ll ans = 0;
	ll root = 0;
	for (ll n = 0; n < N; n++) {
		if (mincheck[n].first != 1e9 + 1) {
			ans += mincheck[n].first;
			A[mincheck[n].second].first = 1e9 + 1;
		}
		else root++;
	}
	root = N - root;
	if (2 * root - 2 > N) {
		cout << "Impossible" << endl;
		return 0;
	}
	else if (root == 1) {
		cout << 0 << endl;
		return 0;
	}
	sort(A.begin(), A.end(), [](pll a, pll b) {
		return a.first < b.first;
	});
	for (ll n = 0; n < root-2; n++) {
		ans += A[n].first;
	}
	cout << ans << endl;
	return 0;
}