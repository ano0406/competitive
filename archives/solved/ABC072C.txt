#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
using namespace std;
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
//typedef boost::multiprecision::cpp_int bigint;

ll N;
vector<ll> imos;

int main() {
	cin >> N;
	imos.resize(1e5 + 3,0);
	for (ll n = 0; n < N; n++) {
		ll a;
		cin >> a;
		imos[max(a - 1, (ll)0)]++;
		imos[a + 2]--;
	}
	for (ll n = 1; n <= 1e5; n++) {
		imos[n] += imos[n - 1];
	}
	ll ans = 0;
	for (ll n = 1; n <= 1e5; n++) {
		if (imos[n] > imos[ans])ans = n;
	}
	cout << imos[ans] << endl;
	return 0;
}
