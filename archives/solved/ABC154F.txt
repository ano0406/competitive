#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long LL;
typedef long double LD;
typedef pair<LL, LL> PLL;
typedef pair<LD, LL> PDL;
typedef pair<LD, LD> PDD;
typedef vector<LL> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

template<class T>
void in(T& x) {
	cin >> x;
}

template<class T1,class T2>
void in(pair<T1, T2>& p) {
	in(p.first);
	in(p.second);
}

template<class T>
void in(vector<T>& v,LL st=-1,LL en=-1) {
	if (st == -1) {
		st = 0;
		en = v.size() - 1;
	}
	for (LL n = st; n <= en; n++) {
		in(v[n]);
	}
}

void modinvs(long long N, vector<long long>& inv, vector<long long>& sinv, long long mod = 1e9 + 7) {
	inv.resize(N + 1);
	sinv.resize(N + 1);
	inv[1] = 1;
	sinv[0] = 1;
	sinv[1] = 1;
	for (int n = 2; n <= N; n++) {
		inv[n] = mod - (inv[mod % n] * (mod / n)) % mod;
		sinv[n] = (sinv[n - 1] * inv[n]) % mod;
	}
}

long long Comb(long long n, long long k, vector<long long>& st, vector<long long>& sinv, long long mod = 1e9 + 7) {
	if (n < 0)return 0;
	if (k > n || k < 0)return 0;
	long long ans = st[n];
	ans = (ans * sinv[n - k]) % mod;
	ans = (ans * sinv[k]) % mod;
	return ans;
}

VLL st, inv, sinv;

LL S(LL C, LL R) {
	LL ans = 0;
	for (LL c = 1; c <= C+1; c++) {
		LL temp = (st[R + c] * sinv[c]) % MOD;
		ans += temp;
	}
	ans %= MOD;
	ans = (ans * sinv[R]) % MOD;
	return ans;
}

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	LL R1, C1, R2, C2;
	cin >> R1 >> C1 >> R2 >> C2;
	st.resize(R2 + C2 + 2, 1);
	for (LL n = 2; n <= R2 + C2 + 1; n++) {
		st[n] = (st[n - 1] * n) % MOD;
	}
	modinvs(R2 + C2 + 1, inv, sinv);
	LL ans = 0;
	ans = S(C2, R2);
	if (C1 > 0)ans -= S(C1 - 1, R2);
	if (R1 > 0)ans -= S(C2, R1 - 1);
	if (C1 > 0 && R1 > 0)ans += S(C1 - 1, R1 - 1);
	ans = (ans + 2 * MOD) % MOD;
	cout << ans << "\n";
	return 0;
}
