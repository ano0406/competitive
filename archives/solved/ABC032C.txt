#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>

using namespace std;
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
//typedef boost::multiprecision::cpp_int bigint;

ll N, K;
vector<ll> S;

int main() {
	cin >> N >> K;
	S.resize(N+1,1);
	for (ll n = 0; n < N; n++)cin >> S[n];
	for (ll n = 0; n < N; n++) {
		if (S[n] == 0) {
			cout << N << endl;
			return 0;
		}
	}
	ll ans = 0;
	ll s = 0, e = 1;
	ll cur = S[0];
	while (e <= N) {
		if (e > s+1 && cur <= K) {
			ans = max(ans, e - s);
			cur *= S[e];
			e++;
		}
		else if (e > s + 1 && cur > K) {
			cur /= S[s];
			s++;
		}
		else {
			if (cur <= K)ans = max(ans, (ll)1);
			cur *= S[e];
			e++;
		}
	}
	cout << ans << endl;
	return 0;
}