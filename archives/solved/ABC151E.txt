#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long long LL;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

void modinvs(long long N, vector<long long>& inv, vector<long long>& sinv, long long mod = 1e9 + 7) {
	inv.resize(N + 1);
	sinv.resize(N + 1);
	inv[1] = 1;
	sinv[0] = 1;
	sinv[1] = 1;
	for (int n = 2; n <= N; n++) {
		inv[n] = mod - (inv[mod % n] * (mod / n)) % mod;
		sinv[n] = (sinv[n - 1] * inv[n]) % mod;
	}
}

LL N, K;
VLL inv, sinv;
VLL st;
VLL A;

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	cin >> N >> K;
	modinvs(N + 1, inv, sinv);
	st.resize(N + 1, 1);
	for (LL n = 2; n <= N; n++) {
		st[n] = st[n - 1] * n;
		st[n] %= MOD;
	}
	A.resize(N);
	for (LL n = 0; n < N; n++)cin >> A[n];
	sort(A.begin(), A.end(), [](LL a, LL b) {
		return a < b;
	});
	LL ans = 0;
	for (LL n = 0; n <= N - K; n++) {
		LL temp = 1;
		temp = (temp * st[N - n - 1] * sinv[K - 1]) % MOD;
		temp = (temp * sinv[N - n - K]) % MOD;
		temp = (temp * A[n]) % MOD;
		ans -= temp;
	}
	for (LL n = K - 1; n < N; n++) {
		LL temp = 1;
		temp = (temp * st[n] * sinv[n - K + 1]) % MOD;
		temp = (temp * sinv[K - 1]) % MOD;
		temp = (temp * A[n]) % MOD;
		ans += temp;
	}
	cout << ans % MOD << "\n";
	return 0;
}
