#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	ll N;
	cin >> N;
	VLL check(N + 1, 0);
	for (ll n = 0; n < N; n++) {
		ll a;
		cin >> a;
		check[a]++;
	}
	ll surp = -1;
	ll less = -1;
	for (ll n = 1; n <= N; n++) {
		if (check[n] == 2)surp = n;
		else if (check[n] == 0)less = n;
	}
	if (surp != -1) {
		cout << surp << " " << less << "\n";
	}
	else cout << "Correct\n";
	return 0;
}
