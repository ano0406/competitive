#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>
#include <list>

//< in.txt > out.txt
using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
typedef vector<ll> VLL;
typedef vector<VLL> VVLL;
//typedef boost::multiprecision::cpp_int bigint;

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	ll N,Q;
	cin >> N >> Q;
	vector<set<ll>> F(N);
	for (ll q = 0; q < Q; q++) {
		ll que;
		cin >> que;
		if (que == 1) {
			ll a, b;
			cin >> a >> b;
			a--; b--;
			F[a].insert(b);
		}
		else if (que == 2) {
			ll a;
			cin >> a;
			a--;
			for (ll n = 0; n < N; n++) {
				if (n == a)continue;
				if (F[n].find(a) != F[n].end()) {
					F[a].insert(n);
				}
			}
		}
		else {
			ll a;
			cin >> a;
			a--;
			set<ll> old = F[a];
			for (ll p : old) {
				for (ll n : F[p]) {
					F[a].insert(n);
				}
			}
		}
	}
	for (ll n = 0; n < N; n++) {
		for (ll p = 0; p < N; p++) {
			if (n == p)cout << "N";
			else if (F[n].find(p) != F[n].end())cout << "Y";
			else cout << "N";
		}
		cout << "\n";
	}
	return 0;
}
