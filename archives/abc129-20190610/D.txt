void solve();

int main() {
	solve();
	return 0;
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

int H, W;

vector<vector<bool>> map0;   //true->è·äQï®
vector<vector<int>> map1;
vector<vector<int>> temp;

void solve() {
	cin >> H >> W;
	map0.resize(W);
	map1.resize(W);
	temp.resize(W);
	for (int x = 0; x < W; x++) {
		map0[x].resize(H);
		map1[x].resize(H,0);
		temp[x].resize(H);
	}
	for (int y = 0; y < H; y++) {
		string S;
		cin >> S;
		for (int x = 0; x < W; x++)map0[x][y] = (S[x]=='#'?true:false);
	}
	for (int y = 0; y < H; y++) {
		map1[W-1][y] = (map0[W-1][y]?-1:0);
		for (int x = W-2; x >= 0; x--) {
			if (map0[x][y])map1[x][y] = -1;
			else map1[x][y] = map1[x + 1][y] + 1;
		}
	}
	for (int y = 0; y < H; y++) {
		temp[0][y] = (map0[0][y] ? -1 : 0);
		for (int x = 1; x < W; x++) {
			if (map0[x][y])temp[x][y] = -1;
			else temp[x][y] = temp[x - 1][y] + 1;
			map1[x][y] += temp[x][y];
		}
	}
	for (int x = 0; x < W; x++) {
		temp[x][0] = (map0[x][0] ? -1 : 0);
		for (int y = 1; y < H; y++) {
			if (map0[x][y])temp[x][y] = -1;
			else temp[x][y] = temp[x][y - 1] + 1;
			map1[x][y] += temp[x][y];
		}
	}
	for (int x = 0; x < W; x++) {
		temp[x][H-1] = (map0[x][H-1] ? -1 : 0);
		for (int y = H - 2; y >= 0; y--) {
			if (map0[x][y])temp[x][y] = -1;
			else temp[x][y] = temp[x][y + 1] + 1;
			map1[x][y] += temp[x][y];
		}
	}
	int ans = 0;
	for (int x = 0; x < W; x++) {
		for (int y = 0; y < H; y++) {
			if (map0[x][y])continue;
			ans = max(ans,map1[x][y]+1);
		}
	}
	cout << ans << endl;
	return;
}
