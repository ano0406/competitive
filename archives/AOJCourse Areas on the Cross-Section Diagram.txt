#include <iostream>
#include <vector>
#include <limits.h>
#include <algorithm>
#include <string>
#include <math.h>
#include <limits.h>
#include <queue>
#include <map>
#include <set>
#include <iomanip>
#include <bitset>
#include <cassert>
#include <random>
#include <functional>
#include <stack>
#include <iomanip>
#include <cassert>
//#include <boost/multiprecision/cpp_int.hpp>
#include <complex>
#include <cstdio>

using namespace std;
//std::ios::sync_with_stdio(false);
//std::cin.tie(0);
const long long MOD = 1e9 + 7;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ll> pdl;
typedef pair<ld, ld> pdd;
//typedef boost::multiprecision::cpp_int bigint;

ll down[40001];
vector<ll> ans;

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	for (ll h = 0; h <= 40000; h++)down[h] = -1;
	ll h = 20000;
	string S;
	cin >> S;
	ans.push_back(0);
	for (ll n = S.size() - 1; n >= 0; n--) {
		if (S[n] == '\\'){
			h++;
			if (down[h] == -1)ans.push_back(0);
			else ans.back() += down[h] - n;
		}
		else if (S[n] == '/') {
			down[h] = n;
			h--;
		}
	}
	ll sum = 0;
	ll count = 0;
	for (ll n = 0; n < ans.size(); n++) {
		if (ans[n] != 0)count++;
		sum += ans[n];
	}
	cout << sum << "\n";
	cout << count;
	for (ll n = ans.size() - 1; n >= 0; n--) {
		if (ans[n] == 0)continue;
		cout << " " << ans[n];
	}
	return 0;
}