void solve();

int main() {
	solve();
	return 0;
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
#include <iostream>
#include <vector>
#include <algorithm>
#include <functional>
#include <limits.h>
#include <math.h>
#include <iomanip>
#include <string>
using namespace std;
typedef pair<int, int> pii;
typedef long double ld;
typedef long long ll;

string S;
vector<vector<long long>> dp;
int MOD = 1e9 + 7;

void solve() {
	cin >> S;
	int  N = S.size();
	dp.resize(N);
	for (int n = 0; n < N; n++)dp[n].resize(13,0);
	if (S[0] != '?') {
		int d = S[0] - '0';
		dp[0][d] = 1;
	}
	else {
		for (int k = 0; k < 10; k++)dp[0][k] = 1;
	}
	for (int n = 1; n < N; n++) {
		if (S[n] != '?') {
			int d = S[n] - '0';
			for (int m = 0; m <= 12; m++) {
				dp[n][(10 * m + d) % 13] += dp[n - 1][m];
				dp[n][(10 * m + d) % 13] %= MOD;
			}
		}
		else {
			for (int d = 0; d < 10; d++) {
				for (int m = 0; m < 13; m++) {
					dp[n][(10 * m + d) % 13] += dp[n-1][m];
					dp[n][(10 * m + d) % 13] %= MOD;
				}
			}
		}
	}
	cout << dp[N - 1][5] << endl;
	return;
}
