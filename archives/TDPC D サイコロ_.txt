#include <iostream>
#include <math.h>
#include <algorithm>
#include <vector>
#include <iomanip>
using namespace std;

void solve();

int main() {
	solve();
	return 0;
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
int N, D;
int A = 0, B = 0, C = 0;
float dp[101][201][101][101];

void solve() {
	cin >> N >> D;
	while (D % 2 == 0) {
		A++;
		D /= 2;
	}
	while (D % 3 == 0) {
		B++;
		D /= 3;
	}
	while (D % 5 == 0) {
		C++;
		D /= 5;
	}
	if (D != 1) {
		cout << "0" << endl;
		return;
	}
	for (int a = 0; a <= 200; a++) {
		for (int b = 0; b <= 100; b++) {
			for (int c = 0; c <= 100; c++)dp[0][a][b][c] = 0;
		}
	}
	dp[0][0][0][0] = 1;
	for (int n = 1; n <= N; n++) {
		for (int a = 0; a <= 200; a++) {
			for (int b = 0; b <= 100; b++) {
				for (int c = 0; c <= 100; c++) {
					dp[n][a][b][c] = dp[n - 1][a][b][c];
					if (a - 1 >= 0)dp[n][a][b][c] += dp[n - 1][a - 1][b][c];
					if (b - 1 >= 0)dp[n][a][b][c] += dp[n - 1][a][b - 1][c];
					if (a - 2 >= 0)dp[n][a][b][c] += dp[n - 1][a - 2][b][c];
					if (c - 1 >= 0)dp[n][a][b][c] += dp[n - 1][a][b][c - 1];
					if (a - 1 >= 0 && b - 1 >= 0)dp[n][a][b][c] += dp[n - 1][a - 1][b - 1][c];
				}
			}
		}
	}
	int ans = 0;
	for (int a = A; a <= 200; a++) {
		for (int b = B; b <= 100; b++) {
			for (int c = C; c <= 100; c++) {
				ans += dp[N][a][b][c];
			}
		}
	}
	float aans = ans;
	for (int n = 0; n < N; n++)aans /= 6;
	cout << setprecision(8) << aans << endl;
	return;
}